<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="[Homepage] Notifications Test Suite" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[User Vars] Test Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="test.type" elementType="Argument">
            <stringProp name="Argument.name">test.type</stringProp>
            <stringProp name="Argument.value">${__P(test.type,onprem)}</stringProp>
            <stringProp name="Argument.desc">cloud|onprem - default cloud</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server.name" elementType="Argument">
            <stringProp name="Argument.name">server.name</stringProp>
            <stringProp name="Argument.value">${__P(server.name,dubxpcvm2329.mul.ie.ibm.com)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">dubxpcvm2349.mul.ie.ibm.com,lcauto51.swg.usma.ibm.com</stringProp>
          </elementProp>
          <elementProp name="mail.general.from" elementType="Argument">
            <stringProp name="Argument.name">mail.general.from</stringProp>
            <stringProp name="Argument.value">${__P(mail.general.from,no-reply@basesandbox30.swg.usma.ibm.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">no-reply@acdev.swg.usma.ibm.com,news-admin@elvar.mul.ie.ibm.com,news-admin@lc45linux1.swg.usma.ibm.com</stringProp>
          </elementProp>
          <elementProp name="mail.invite.from" elementType="Argument">
            <stringProp name="Argument.name">mail.invite.from</stringProp>
            <stringProp name="Argument.value">${__P(mail.invite.from,no-reply@collabservacdev.swg.usma.ibm.com)}</stringProp>
            <stringProp name="Argument.desc">no-reply@collabservacdev.swg.usma.ibm.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sc.user.admin.name" elementType="Argument">
            <stringProp name="Argument.name">sc.user.admin.name</stringProp>
            <stringProp name="Argument.value">${__P(sc.user.admin.name,bssadmin@us.ibm.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sc.user.admin.pwd" elementType="Argument">
            <stringProp name="Argument.name">sc.user.admin.pwd</stringProp>
            <stringProp name="Argument.value">${__P(sc.user.admin.pwd,Pa88w0rd)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="http.port" elementType="Argument">
            <stringProp name="Argument.name">http.port</stringProp>
            <stringProp name="Argument.value">${__P(http.port,9081)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">9081/80</stringProp>
          </elementProp>
          <elementProp name="https.port" elementType="Argument">
            <stringProp name="Argument.name">https.port</stringProp>
            <stringProp name="Argument.value">${__P(https.port,9444)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">9444/443</stringProp>
          </elementProp>
          <elementProp name="sc.org.name" elementType="Argument">
            <stringProp name="Argument.name">sc.org.name</stringProp>
            <stringProp name="Argument.value">${__P(sc.org.name,OrgA)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">orgA</stringProp>
          </elementProp>
          <elementProp name="sc.org.ext.name" elementType="Argument">
            <stringProp name="Argument.name">sc.org.ext.name</stringProp>
            <stringProp name="Argument.value">${__P(sc.org.ext.name,OrgABC)}</stringProp>
            <stringProp name="Argument.desc">orgB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sc.invite.guest.subject" elementType="Argument">
            <stringProp name="Argument.name">sc.invite.guest.subject</stringProp>
            <stringProp name="Argument.value">${__P(sc.invite.guest.subject,You have been invited to join)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_0" elementType="Argument">
            <stringProp name="Argument.name">user_0</stringProp>
            <stringProp name="Argument.value">${__P(user_0,jdoe4@elvar.mul.ie.ibm.com)}</stringProp>
            <stringProp name="Argument.desc">4th internal user - User D</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_1" elementType="Argument">
            <stringProp name="Argument.name">user_1</stringProp>
            <stringProp name="Argument.value">${__P(user_1,jdoe1@elvar.mul.ie.ibm.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ssocial1@oxpar.mul.ie.ibm.com</stringProp>
          </elementProp>
          <elementProp name="user_2" elementType="Argument">
            <stringProp name="Argument.name">user_2</stringProp>
            <stringProp name="Argument.value">${__P(user_2,jdoe2@elvar.mul.ie.ibm.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">buser10@janet.iris.com</stringProp>
          </elementProp>
          <elementProp name="user_3" elementType="Argument">
            <stringProp name="Argument.name">user_3</stringProp>
            <stringProp name="Argument.value">${__P(user_3,jdoe3@elvar.mul.ie.ibm.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ajones3@janet.iris.com</stringProp>
          </elementProp>
          <elementProp name="user_4" elementType="Argument">
            <stringProp name="Argument.name">user_4</stringProp>
            <stringProp name="Argument.value">${__P(user_4,dummy@mailinator.com)}</stringProp>
            <stringProp name="Argument.desc">guest user</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_5" elementType="Argument">
            <stringProp name="Argument.name">user_5</stringProp>
            <stringProp name="Argument.value">${__P(user_5,ext1@mailinator.com)}</stringProp>
            <stringProp name="Argument.desc">external user</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="add.guest.user" elementType="Argument">
            <stringProp name="Argument.name">add.guest.user</stringProp>
            <stringProp name="Argument.value">${__P(add.guest.user,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="use.external.user" elementType="Argument">
            <stringProp name="Argument.name">use.external.user</stringProp>
            <stringProp name="Argument.value">${__P(use.external.user,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email.read.delay.ms" elementType="Argument">
            <stringProp name="Argument.name">email.read.delay.ms</stringProp>
            <stringProp name="Argument.value">${__P(email.read.delay.ms,60000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="responses.dir" elementType="Argument">
            <stringProp name="Argument.name">responses.dir</stringProp>
            <stringProp name="Argument.value">${__P(responses.dir,/tmp/saved_responses)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="set.prefs.run" elementType="Argument">
            <stringProp name="Argument.name">set.prefs.run</stringProp>
            <stringProp name="Argument.value">${__P(set.prefs.run,true)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tests.mailchecks.run" elementType="Argument">
            <stringProp name="Argument.name">tests.mailchecks.run</stringProp>
            <stringProp name="Argument.value">${__P(tests.mailchecks.run,false)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="std.tests.run" elementType="Argument">
            <stringProp name="Argument.name">std.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(std.tests.run,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="activites.tests.run" elementType="Argument">
            <stringProp name="Argument.name">activites.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(activites.tests.run,true)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="blogs.tests.run" elementType="Argument">
            <stringProp name="Argument.name">blogs.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(blogs.tests.run,true)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bookmarks.tests.run" elementType="Argument">
            <stringProp name="Argument.name">bookmarks.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(bookmarks.tests.run,true)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="forums.tests.run" elementType="Argument">
            <stringProp name="Argument.name">forums.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(forums.tests.run,true)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="communities.tests.run" elementType="Argument">
            <stringProp name="Argument.name">communities.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(communities.tests.run,true)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="files.tests.run" elementType="Argument">
            <stringProp name="Argument.name">files.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(files.tests.run,true)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="files.upload.file.name" elementType="Argument">
            <stringProp name="Argument.name">files.upload.file.name</stringProp>
            <stringProp name="Argument.value">${__P(files.upload.file.name,jmeter.test.file.txt)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="files.upload.file.path" elementType="Argument">
            <stringProp name="Argument.name">files.upload.file.path</stringProp>
            <stringProp name="Argument.value">${__P(files.upload.file.path,C:\work\scripts\mntSeadog.sh)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="profiles.tests.run" elementType="Argument">
            <stringProp name="Argument.name">profiles.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(profiles.tests.run,true)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="microblog.tests.run" elementType="Argument">
            <stringProp name="Argument.name">microblog.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(microblog.tests.run,true)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="wikis.tests.run" elementType="Argument">
            <stringProp name="Argument.name">wikis.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(wikis.tests.run,true)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fvt.tests.run" elementType="Argument">
            <stringProp name="Argument.name">fvt.tests.run</stringProp>
            <stringProp name="Argument.value">${__P(fvt.tests.run,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="runLabel" elementType="Argument">
            <stringProp name="Argument.name">runLabel</stringProp>
            <stringProp name="Argument.value">${__time(HMS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="runLabel1" elementType="Argument">
            <stringProp name="Argument.name">runLabel1</stringProp>
            <stringProp name="Argument.value">${__RandomString(8,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="runLabel2" elementType="Argument">
            <stringProp name="Argument.name">runLabel2</stringProp>
            <stringProp name="Argument.value">${__RandomString(8,abcdefghijklmnopqrstuvwxyz)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="runLabel3" elementType="Argument">
            <stringProp name="Argument.name">runLabel3</stringProp>
            <stringProp name="Argument.value">${__RandomString(6,0123456789aeiouAEIOU)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="[Notification Tests]" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1404396864000</longProp>
        <longProp name="ThreadGroup.end_time">1404396864000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Local Cookie Manager (jsession)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="X-Requested-With" elementType="Cookie" testname="X-Requested-With">
              <stringProp name="Cookie.value">XMLHttpRequest</stringProp>
              <stringProp name="Cookie.domain"></stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] set variables &amp; log run info" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">SampleResult.setSampleLabel(&quot;[START][BSF] setting vars for &quot; + vars.get(&quot;server.name&quot;));

var email=vars.get(&quot;user_1&quot;);
if (email.indexOf(&quot;bluebox&quot;) != -1) {
    vars.put(&quot;mailType&quot;,&quot;bluebox&quot;)
} else {
    vars.put(&quot;mailType&quot;,&quot;mailinator&quot;)
}

var testvars = [];
testvars.push(&quot;user_0&quot;,&quot;user_1&quot;,&quot;user_2&quot;,&quot;user_3&quot;,&quot;user_4&quot;,&quot;user_5&quot;);
testvars.push(&quot;test.type&quot;,&quot;sc.user.admin.name&quot;,&quot;sc.user.admin.pwd&quot;,&quot;sc.org.name&quot;,&quot;sc.org.ext.name&quot;);
testvars.push(&quot;mail.general.from&quot;,&quot;mail.invite.from&quot;);
testvars.push(&quot;runLabel&quot;,&quot;runLabel1&quot;,&quot;runLabel2&quot;,&quot;runLabel3&quot;,&quot;server.name&quot;,&quot;http.port&quot;,&quot;https.port&quot;);
testvars.push(&quot;email.read.delay.ms&quot;,&quot;set.prefs.run&quot;);
testvars.push(&quot;wikis.tests.run&quot;,&quot;activites.tests.run&quot;,&quot;blogs.tests.run&quot;,&quot;bookmarks.tests.run&quot;,&quot;communities.tests.run&quot;);
testvars.push(&quot;profiles.tests.run&quot;,&quot;microblog.tests.run&quot;,&quot;forums.tests.run&quot;);
testvars.push(&quot;files.tests.run&quot;,&quot;files.upload.file.name&quot;,&quot;files.upload.file.path&quot;,&quot;use.external.user&quot;);
testvars.push(&quot;tests.mailchecks.run&quot;,&quot;std.tests.run&quot;,&quot;fvt.tests.run&quot;,&quot;mailType&quot;,&quot;sc.invite.guest.subject&quot;,&quot;add.guest.user&quot;);

var type=vars.get(&quot;test.type&quot;);
for (i = 0; i &lt; 6; i++) {
    var user = vars.get(testvars[i]);
    var idx = user.indexOf(&quot;@&quot;);
    var name = user.substr(0, idx);
    var pwd = user.substr(1, idx-1);
    var imap_srv = user.substr(idx+1);
    vars.put(testvars[i]+&quot;.name&quot;,user);
    
    if (type == &quot;cloud&quot;) {
        vars.put(testvars[i] + &quot;.password&quot;, &apos;Pa88w0rd&apos;);
    } else {
        vars.put(testvars[i] + &quot;.password&quot;, pwd);
    }    
    vars.put(testvars[i]+&quot;.imap_svr&quot;,imap_srv);
    testvars.push(testvars[i]+&quot;.name&quot;);
    testvars.push(testvars[i]+&quot;.password&quot;);
}

for (i = 0; i &lt; testvars.length; i++) {
    vars.put(testvars[i],(vars.get(testvars[i])).trim()); //seems to be a bug where jmeter adds trailing space to default property value, trimming here
    log.info(testvars[i] + &quot; :: [&quot; + vars.get(testvars[i]) + &quot;]&quot;);
    OUT.println(testvars[i] + &quot; :: [&quot; + vars.get(testvars[i]) + &quot;]&quot;);
}

log.info(&quot;=============================================================&quot;);
log.info(&quot;START&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </BSFSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SETUP]" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] Get org ids" enabled="true">
            <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;cloud&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">SampleResult.setSampleLabel(&quot;[GET ORG IDS]&quot;);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${sc.user.admin.name}" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user.name" elementType="Argument">
                    <stringProp name="Argument.name">user.name</stringProp>
                    <stringProp name="Argument.value">${sc.user.admin.name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="user.password" elementType="Argument">
                    <stringProp name="Argument.name">user.password</stringProp>
                    <stringProp name="Argument.value">${sc.user.admin.pwd}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </kg.apc.jmeter.control.ParameterizedController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                  <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get internal org name" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pageNum" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pageNum</stringProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">100</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                  </elementProp>
                  <elementProp name="queryField" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">manageaccount.tableheader.org</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryField</stringProp>
                  </elementProp>
                  <elementProp name="queryValue" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sc.org.name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryValue</stringProp>
                  </elementProp>
                  <elementProp name="queryValueText" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sc.org.name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryValueText</stringProp>
                  </elementProp>
                  <elementProp name="sortAttribute" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">customer.organization.orgName</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sortAttribute</stringProp>
                  </elementProp>
                  <elementProp name="sortDirection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sortDirection</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
              <stringProp name="HTTPSampler.port">${https.port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/manage/account/csgList/input</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">sc.org.id</stringProp>
                <stringProp name="RegexExtractor.regex">showUserAccounts.customerId=(.*?)\&apos;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&apos;sc.org.id : [&apos; + vars.get(&quot;sc.org.id&quot;) + &apos;]&apos;);

orgIdentifier=vars.get(&quot;sc.org.id&quot;)
if (orgIdentifier == -1){
	prev.setSuccessful(false);
	errmsg=&quot;Could not find org id, stopping tests as need org id for execution&quot;
	prev.setResponseMessage(errmsg);
	log.info(errmsg);
	prev.setStopTest(true);
}</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] if using external user" enabled="true">
              <stringProp name="IfController.condition">&quot;${use.external.user}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get external org name" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="pageNum" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">pageNum</stringProp>
                    </elementProp>
                    <elementProp name="pageSize" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">100</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">pageSize</stringProp>
                    </elementProp>
                    <elementProp name="queryField" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">manageaccount.tableheader.org</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">queryField</stringProp>
                    </elementProp>
                    <elementProp name="queryValue" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sc.org.ext.name}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">queryValue</stringProp>
                    </elementProp>
                    <elementProp name="queryValueText" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sc.org.ext.name}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">queryValueText</stringProp>
                    </elementProp>
                    <elementProp name="sortAttribute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">customer.organization.orgName</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sortAttribute</stringProp>
                    </elementProp>
                    <elementProp name="sortDirection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">ASC</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sortDirection</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/manage/account/csgList/input</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sc.org.ext.id</stringProp>
                  <stringProp name="RegexExtractor.regex">showUserAccounts.customerId=(.*?)\&apos;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&apos;sc.org.ext.id : [&apos; + vars.get(&quot;sc.org.ext.id&quot;) + &apos;]&apos;);

orgIdentifier=vars.get(&quot;sc.org.ext.id&quot;)
if (orgIdentifier == -1){
	prev.setSuccessful(false);
	errmsg=&quot;Could not find ext org id, stopping tests as need ext org id for execution&quot;
	prev.setResponseMessage(errmsg);
	log.info(errmsg);
	prev.setStopTest(true);
}</stringProp>
                </BSFPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="0"></stringProp>
                <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                <stringProp name="-795477064">[SC] Logout</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] Add guest user" enabled="true">
            <stringProp name="IfController.condition">&quot;${add.guest.user}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">SampleResult.setSampleLabel(&quot;[ADD GUEST USER]&quot;);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user.name" elementType="Argument">
                    <stringProp name="Argument.name">user.name</stringProp>
                    <stringProp name="Argument.value">${user_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="user.password" elementType="Argument">
                    <stringProp name="Argument.name">user.password</stringProp>
                    <stringProp name="Argument.value">${user_1.password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </kg.apc.jmeter.control.ParameterizedController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                  <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] showInviteGuestDialog" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
              <stringProp name="HTTPSampler.port">${https.port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">manage/subscribers/showInviteGuestDialog/input</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XPath] get csrf.token" enabled="true">
                <stringProp name="XPathExtractor.default">-1</stringProp>
                <stringProp name="XPathExtractor.refname">csrf.token</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//input[@type=&quot;hidden&quot; and @id=&quot;csrfToken&quot;]/@value</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">true</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&apos;csrf.token :: [&apos; + vars.get(&quot;csrf.token&quot;) + &apos;]&apos;);

token=vars.get(&quot;csrf.token&quot;)
if (token == -1){
	prev.setSuccessful(false);
	errmsg=&quot;Could not find csrf.token, stopping tests as something is broken&quot;
	prev.setResponseMessage(errmsg);
	log.info(errmsg);
	prev.setStopTest(true);
}</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] Invite Guest" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="customerId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">customerId</stringProp>
                  </elementProp>
                  <elementProp name="csrfToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${csrf.token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">csrfToken</stringProp>
                  </elementProp>
                  <elementProp name="givenName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${guest.fname}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">givenName</stringProp>
                  </elementProp>
                  <elementProp name="familyName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${guest.lname}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">familyName</stringProp>
                  </elementProp>
                  <elementProp name="emailId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${guest.email}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">emailId</stringProp>
                  </elementProp>
                  <elementProp name="languageCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en_US</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">languageCode</stringProp>
                  </elementProp>
                  <elementProp name="extidContent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${runLabel} A new account is ready for you</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">extidContent</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
              <stringProp name="HTTPSampler.port">${https.port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">manage/subscribers/inviteGuest</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create values" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;guest.fname&quot;, &quot;JC&quot;);
vars.put(&quot;guest.lname&quot;, &quot;guest&quot; + vars.get(&quot;runLabel&quot;));
vars.put(&quot;guest.display.name&quot;, &quot;JC guest&quot; + vars.get(&quot;runLabel&quot;));
vars.put(&quot;user_4.display.name&quot;, &quot;JC guest&quot; + vars.get(&quot;runLabel&quot;));

var mailType=vars.get(&quot;mailType&quot;);
var guestMail=&quot;jcguest&quot; + vars.get(&quot;runLabel&quot;) + &quot;@&quot;;

if (mailType.indexOf(&quot;bluebox&quot;) != -1) {
	guestMail=guestMail + &quot;bluebox.lotus.com&quot;;
} else {
	guestMail=guestMail + &quot;mailinator.com&quot;;
}

vars.put(&quot;guest.email&quot;, guestMail);
vars.put(&quot;user_4&quot;,guestMail);
log.info(&quot;guest.email :: [&quot; + vars.get(&quot;guest.email&quot;) + &quot;]&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                <stringProp name="-795477064">[SC] Logout</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="[TA] Pause" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${email.read.delay.ms}</stringProp>
            </TestAction>
            <hashTree>
              <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="[BSG] Log" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&quot;Pause for &quot; + vars.get(&quot;email.read.delay.ms&quot;) + &quot; ms, prior to email check&quot;);</stringProp>
              </BSFPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[Register]" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[check email]" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                <stringProp name="HTTPSampler.port">https.port</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/pkmslogout</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">jython</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import urllib2
import json
import re
import time

class logx:
    @classmethod
    def info(self,msg):
        print msg
        log.info(msg)


class CheckBluebox:
    def __init__(self,userEmail):
        try:
            self.userEmail=userEmail.lower()
            logx.info(&quot;checking email for &quot; + self.userEmail)
            self.inboxJson={}
            self.blueboxHost=&quot;bluebox.lotus.com&quot;
            self.blueboxInbox = &apos;http://&apos; + self.blueboxHost + &apos;/bluebox/rest/json/inbox/&apos; + self.userEmail + &quot;/0/&quot;
            self.blueboxMessage = &apos;http://&apos; + self.blueboxHost + &apos;/bluebox/rest/json/inbox/detail/&apos;
            logx.info(&quot;-&gt; getting ~&quot; + self.blueboxInbox)
            headers = {&apos;Host&apos; : self.blueboxHost,&apos;content-type&apos; : &apos;application/json&apos;, &apos;X-Requested-With&apos;: &apos;XMLHttpRequest&apos;,&apos;Range&apos;: &apos;items=0-24&apos;}
            rq = urllib2.Request(self.blueboxInbox, None, headers)
            req = urllib2.urlopen(rq)
            data=req.read()
            self.inboxJson=json.loads(data, strict=False)
        except Exception as e:
            logx.info(&quot;ERR: &quot; + e.message)
        finally:
            try:
                req.close()
            except Exception as e:
                logx.info(&quot;ERR:: &quot; + e.message)

    def getRegistrationToken(self,subjectPattern):
        token=None
        logx.info(&quot;get reg token from bluebox:\n\t\t&quot; + self.userEmail + &quot; : looking for subject:: &quot; + subjectPattern)
        for msg in self.inboxJson[::-1]:
            if re.search(subjectPattern,msg[&quot;Subject&quot;]) is not None:
                msgId=msg[&quot;Uid&quot;]
                req = urllib2.urlopen(self.blueboxMessage + msgId)
                data=req.read()
                regexPattern=&quot;token=(.*?)&amp;amp;locale&quot;
                match=re.search(regexPattern,data)
                token=match.group(1)
                break

        return token

class CheckMailinator:
    def __init__(self,userEmail):
        try:
            logx.info(&quot;checking email for &quot; + userEmail)
            self.inboxJson={}
            self.userEmail=userEmail
            self.mailinatorToken=&apos;0e09a9096e8340a7927e31d7b26fe220&apos;
            self.mailinatorInbox=&apos;http://api.mailinator.com/api/inbox?token=&apos; + self.mailinatorToken + &apos;&amp;to=&apos; + userEmail
            self.mailinatorMessage=&apos;http://api.mailinator.com/api/email?token=&apos; + self.mailinatorToken + &apos;&amp;msgid=&apos;
            logx.info(&quot;-&gt; getting ~&quot; + self.mailinatorInbox)
            req = urllib2.urlopen(self.mailinatorInbox)
            data=req.read()
            self.inboxJson=json.loads(data, strict=False)
        except Exception as e:
            log.info(&quot;ERR: &quot; + repr(e) + &quot; - &quot; + e.message)
        finally:
            try:
                req.close()
            except Exception as e:
                pass

    def getRegistrationToken(self,subjectPattern):
        token=None
        logx.info(&quot;get reg token from mailinator:\n\t\t&quot; + self.userEmail + &quot; : looking for subject:: &quot; + subjectPattern)
        for msg in self.inboxJson[&quot;messages&quot;][::-1]:
            if re.search(subjectPattern,msg[&quot;subject&quot;]) is not None:
                msgId=msg[&quot;id&quot;]
                req = urllib2.urlopen(self.mailinatorMessage + msgId)
                data=req.read()
                regexPattern=&quot;token=(.*?)&amp;locale&quot;
                match=re.search(regexPattern,data)
                token=match.group(1)
                break

        return token

def main():
    prev.setSampleLabel(&quot;getting reg token for ${guest.email}&quot;)
    #logx.info(&quot;sleeping 10secs... to give reg email a chance to get to users inbox&quot;)
    #time.sleep(10)
    if &quot;bluebox&quot; in &quot;${guest.email}&quot;:
        mailBox = CheckBluebox(&quot;${guest.email}&quot;)
    else:
        mailBox = CheckMailinator(&quot;${guest.email}&quot;)

    cte=True
    count=0

    while cte is True:
        token=mailBox.getRegistrationToken(&quot;${sc.invite.guest.subject}&quot;)
        if token is None:
            if count &lt; 4:
                msg=&quot;Could not get reg token for guest user, retrying after delay&quot;
                logx.info(msg);
                time.sleep(15)
                count = count + 1
            else:
                cte=False
        else:
            cte=False
            
    if token is None:
        vars.put(&quot;add.guest.user&quot;,&quot;false&quot;)
        prev.setSuccessful(False);
        errmsg=&quot;Could not get reg token for guest user, failing test :: setting var add.guest.user to false&quot;
        prev.setResponseMessage(errmsg);
        logx.info(errmsg);
    else:
        logx.info(&quot;token is &quot; + token)
        vars.put(&quot;reg.token&quot;,token)


main()
</stringProp>
                </BSFPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user.name" elementType="Argument">
                    <stringProp name="Argument.name">user.name</stringProp>
                    <stringProp name="Argument.value">${user_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="user.password" elementType="Argument">
                    <stringProp name="Argument.name">user.password</stringProp>
                    <stringProp name="Argument.value">${user_1.password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </kg.apc.jmeter.control.ParameterizedController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                  <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] Register user using token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Pa88w0rd</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                  <elementProp name="confirmpassword" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Pa88w0rd</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">confirmpassword</stringProp>
                  </elementProp>
                  <elementProp name="countryCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">GB</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">countryCode</stringProp>
                  </elementProp>
                  <elementProp name="emailaddress" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${guest.email}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">emailaddress</stringProp>
                  </elementProp>
                  <elementProp name="fullname" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${guest.fname} ${guest.lname}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">fullname</stringProp>
                  </elementProp>
                  <elementProp name="languageCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en_US</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">languageCode</stringProp>
                  </elementProp>
                  <elementProp name="orgname" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">orgName</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">orgname</stringProp>
                  </elementProp>
                  <elementProp name="shouldValidate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">shouldValidate</stringProp>
                  </elementProp>
                  <elementProp name="timeZoneCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Africa/Bamako</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">timeZoneCode</stringProp>
                  </elementProp>
                  <elementProp name="token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${reg.token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">token</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
              <stringProp name="HTTPSampler.port">${https.port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">manage/account/public/registration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                <stringProp name="-795477064">[SC] Logout</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Get user ids" enabled="true"/>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">SampleResult.setSampleLabel(&quot;[GET USER IDS]&quot;);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] get internal user ids (users 0,1,2 &amp; 3)" enabled="true"/>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] cloud " enabled="true">
                <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;cloud&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] internal users 0,1,2,3" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${sc.user.admin.name}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${sc.user.admin.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${sc.user.admin.pwd}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] bssadmin manage accounts" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/manage/account/csgList/input</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="[BSF PP] log" enabled="false">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script"></stringProp>
                    </BSFPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] bssadmin showUserAccounts ${sc.org.id}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/manage/account/csgList/showUserAccounts?customerId=${sc.org.id}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Search internal users, gets user ids for user0,1,2,3" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="651270082">[ForEach] Search Users</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] onprem " enabled="true">
                <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;onprem&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] get user ids for user0, 1, 2 &amp; 3 for use in tests" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Search users, gets user ids for user1, 2, 3 &amp; 4" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="651270082">[ForEach] Search Users</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">log.info(&quot;END SEARCH USERS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </BSFSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] guest user 4" enabled="true">
              <stringProp name="IfController.condition">&quot;${add.guest.user}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="user.name" elementType="Argument">
                      <stringProp name="Argument.name">user.name</stringProp>
                      <stringProp name="Argument.value">${user_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="user.password" elementType="Argument">
                      <stringProp name="Argument.name">user.password</stringProp>
                      <stringProp name="Argument.value">${user_1.password}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </kg.apc.jmeter.control.ParameterizedController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] search contacts for guest user" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="count" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">24</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">count</stringProp>
                    </elementProp>
                    <elementProp name="startIndex" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">startIndex</stringProp>
                    </elementProp>
                    <elementProp name="sortOrder" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">descending</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sortOrder</stringProp>
                    </elementProp>
                    <elementProp name="filterOp" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">contains</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filterOp</stringProp>
                    </elementProp>
                    <elementProp name="filterBy" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">search</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filterBy</stringProp>
                    </elementProp>
                    <elementProp name="filterValue" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${user_4}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filterValue</stringProp>
                    </elementProp>
                    <elementProp name="type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">all</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                    </elementProp>
                    <elementProp name="includeConnectToStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">includeConnectToStatus</stringProp>
                    </elementProp>
                    <elementProp name="includeConnectToOrg" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">includeConnectToOrg</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/mycontacts/api/contacts/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">jython</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import json

log.info(&quot;====================================================================&quot;)
log.info(&quot;Looking for id of guest user &quot; + vars.get(&quot;user_4&quot;) + &quot; in JSON&quot;)
respJson=json.loads(prev.getResponseDataAsString())
log.info(json.dumps(respJson))

found=False
for entry in respJson[&quot;entry&quot;]:
    entryJson=json.loads(json.dumps(entry))
    emailAddr=entryJson[&quot;primaryemail&quot;]
    log.info(emailAddr)
    if emailAddr == vars.get(&quot;user_4&quot;):
        vars.put(&quot;user_4.id&quot;,entryJson[&quot;connectToId&quot;])
        vars.put(&quot;user_4.id1&quot;,entryJson[&quot;id&quot;])
        found=True
        break
        
if found is True:
    log.info(&quot;guest user_4.id &quot; + vars.get(&quot;user_4.id&quot;))
    log.info(&quot;guest user_4.id1 &quot; + vars.get(&quot;user_4.id1&quot;))
else:
    log.info(&quot;did not find details for guest user&quot;)
    prev.setSuccessful(false);
    errmsg=&quot;Could not find guest users id, stopping tests as need users id for execution&quot;
    prev.setResponseMessage(errmsg);
    log.info(errmsg);
    prev.setStopTest(true);
log.info(&quot;====================================================================&quot;)    

</stringProp>
                </BSFPostProcessor>
                <hashTree/>
              </hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                  <stringProp name="-795477064">[SC] Logout</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] if using external user 5" enabled="true">
              <stringProp name="IfController.condition">&quot;${use.external.user}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] external user 5" enabled="true"/>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${sc.user.admin.name}" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${sc.user.admin.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${sc.user.admin.pwd}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] bssadmin manage accounts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/manage/account/csgList/input</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="[BSF PP] log" enabled="false">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script"></stringProp>
                  </BSFPreProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] bssadmin showUserAccounts ${sc.org.ext.id}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/manage/account/csgList/showUserAccounts?customerId=${sc.org.ext.id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] search user ${user_5}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="pageNum" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">pageNum</stringProp>
                      </elementProp>
                      <elementProp name="pageSize" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">50</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">pageSize</stringProp>
                      </elementProp>
                      <elementProp name="queryField" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">custsubscribers.byEmail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">queryField</stringProp>
                      </elementProp>
                      <elementProp name="queryValue" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${user_5}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">queryValue</stringProp>
                      </elementProp>
                      <elementProp name="queryValueText" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${user_5}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">queryValueText</stringProp>
                      </elementProp>
                      <elementProp name="sortAttribute" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">subscriber.person.displayName</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">sortAttribute</stringProp>
                      </elementProp>
                      <elementProp name="sortDirection" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">ASC</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">sortDirection</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/manage/subscribers/companyList/input</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get user id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">user_5.id</stringProp>
                    <stringProp name="RegexExtractor.regex">(SubscriberId=(.*)&apos;)</stringProp>
                    <stringProp name="RegexExtractor.template">$2$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get user name" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">user_5.display.name</stringProp>
                    <stringProp name="RegexExtractor.regex">(SubscriberId=(.*)&apos;\);&quot;&gt;(.*)&lt;/a&gt;)</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(vars.get(&quot;user_5&quot;) + &apos; [ user_5.id :: &apos; + vars.get(&quot;user_5.id&quot;) + &apos;]&apos;);
log.info(vars.get(&quot;user_5&quot;) + &apos; [ user_5.display.name :: &apos; + vars.get(&quot;user_5.display.name&quot;) + &apos;]&apos;);

userIdentifier=vars.get(&quot;user_5.id&quot;)
if (userIdentifier == -1){
	prev.setSuccessful(false);
	errmsg=&quot;Could not find external user id, stopping tests as need users id for execution&quot;
	prev.setResponseMessage(errmsg);
	log.info(errmsg);
	prev.setStopTest(true);
}</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="-795477064">[SC] Logout</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.info(&quot;END SEARCH USERS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] set notification emails to individual for users" enabled="true">
            <stringProp name="IfController.condition">&quot;${set.prefs.run}&quot;  == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">SampleResult.setSampleLabel(&quot;[SET NOTIFICATION PREFERENCES]&quot;);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] set notification emails to individual for users" enabled="true"/>
            <hashTree>
              <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] set notification emails to individual for user0" enabled="true">
                <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="user.name" elementType="Argument">
                      <stringProp name="Argument.name">user.name</stringProp>
                      <stringProp name="Argument.value">${user_0}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="user.password" elementType="Argument">
                      <stringProp name="Argument.name">user.password</stringProp>
                      <stringProp name="Argument.value">${user_0.password}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="email.notify.pref.frequency" elementType="Argument">
                      <stringProp name="Argument.name">email.notify.pref.frequency</stringProp>
                      <stringProp name="Argument.value">individual</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="direct.notifications" elementType="Argument">
                      <stringProp name="Argument.name">direct.notifications</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </kg.apc.jmeter.control.ParameterizedController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Set Notification Preferences" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="1819868399">[SC] Set Notification Preferences</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] set notification emails to individual for user1" enabled="true">
                <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="user.name" elementType="Argument">
                      <stringProp name="Argument.name">user.name</stringProp>
                      <stringProp name="Argument.value">${user_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="user.password" elementType="Argument">
                      <stringProp name="Argument.name">user.password</stringProp>
                      <stringProp name="Argument.value">${user_1.password}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="email.notify.pref.frequency" elementType="Argument">
                      <stringProp name="Argument.name">email.notify.pref.frequency</stringProp>
                      <stringProp name="Argument.value">individual</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="direct.notifications" elementType="Argument">
                      <stringProp name="Argument.name">direct.notifications</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </kg.apc.jmeter.control.ParameterizedController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Set Notification Preferences" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="1819868399">[SC] Set Notification Preferences</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] set notification emails to individual for user2" enabled="true">
                <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="user.name" elementType="Argument">
                      <stringProp name="Argument.name">user.name</stringProp>
                      <stringProp name="Argument.value">${user_2}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="user.password" elementType="Argument">
                      <stringProp name="Argument.name">user.password</stringProp>
                      <stringProp name="Argument.value">${user_2.password}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="email.notify.pref.frequency" elementType="Argument">
                      <stringProp name="Argument.name">email.notify.pref.frequency</stringProp>
                      <stringProp name="Argument.value">individual</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="direct.notifications" elementType="Argument">
                      <stringProp name="Argument.name">direct.notifications</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </kg.apc.jmeter.control.ParameterizedController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Set Notification Preferences" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="1819868399">[SC] Set Notification Preferences</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] set notification emails to individual for user3" enabled="true">
                <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="user.name" elementType="Argument">
                      <stringProp name="Argument.name">user.name</stringProp>
                      <stringProp name="Argument.value">${user_3}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="user.password" elementType="Argument">
                      <stringProp name="Argument.name">user.password</stringProp>
                      <stringProp name="Argument.value">${user_3.password}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="email.notify.pref.frequency" elementType="Argument">
                      <stringProp name="Argument.name">email.notify.pref.frequency</stringProp>
                      <stringProp name="Argument.value">individual</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="direct.notifications" elementType="Argument">
                      <stringProp name="Argument.name">direct.notifications</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </kg.apc.jmeter.control.ParameterizedController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Set Notification Preferences" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="1819868399">[SC] Set Notification Preferences</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] set notification emails to individual for user4" enabled="true">
                <stringProp name="IfController.condition">&quot;${add.guest.user}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] set notification emails to individual for user4" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_4.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.notify.pref.frequency" elementType="Argument">
                        <stringProp name="Argument.name">email.notify.pref.frequency</stringProp>
                        <stringProp name="Argument.value">individual</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="direct.notifications" elementType="Argument">
                        <stringProp name="Argument.name">direct.notifications</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Set Notification Preferences" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="1819868399">[SC] Set Notification Preferences</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] set notification emails to individual for user5" enabled="true">
                <stringProp name="IfController.condition">&quot;${use.external.user}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] set notification emails to individual for user5" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_5}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_5.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.notify.pref.frequency" elementType="Argument">
                        <stringProp name="Argument.name">email.notify.pref.frequency</stringProp>
                        <stringProp name="Argument.value">individual</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="direct.notifications" elementType="Argument">
                        <stringProp name="Argument.name">direct.notifications</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Set Notification Preferences" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="1819868399">[SC] Set Notification Preferences</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">log.info(&quot;=============================================================&quot;);
log.info(&quot;END SETTING PREFS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTS]" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] onprem" enabled="true">
            <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;onprem&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] ACTIVITIES TEST &lt;3&gt;" enabled="true">
              <stringProp name="IfController.condition">&quot;${activites.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;START UT ACTIVITIES&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT ACTIVITIES]  notify, add-member (2 tests)" enabled="true"/>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] activities/service/atom2/activities, get Activity Dashboard" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">activities/service/atom2/activities</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">get Activity Dashboard, just for viewing</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Create Activitiy" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
        &lt;id&gt;&lt;/id&gt;
        &lt;title&gt;${activity.name}&lt;/title&gt;
         &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;activity&quot; label=&quot;Activity&quot; /&gt;
        &lt;link href=&quot;${activity.url}&quot;/&gt;
        &lt;content type=&quot;html&quot;&gt;${activity.description}&lt;/content&gt;
    &lt;/entry&gt;
</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">activities/service/atom2/activities</stringProp>
                  <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create activity  values" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">vars.put(&quot;activity.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST ACTIVITY&quot;);
vars.put(&quot;activity.description&quot;, &quot;JMETER ACTIVITY GOAL ~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ test....&quot;);

</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  activity.id1" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">activity.id1</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  activity.id" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">activity.id</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:entry/snx:activity</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">var tmp = vars.get(&quot;activity.id&quot;);
log.info(&apos;activity.id : [&apos; + vars.get(&quot;activity.id&quot;) + &apos;]&apos;);</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] activity add member ${user_2}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_2}&lt;/email&gt;
        &lt;snx:userid&gt;${user_2.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/activities&quot;&gt;member&lt;/snx:role&gt;
     &lt;!--snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/activities&quot;&gt;owner&lt;/snx:role--&gt;
&lt;/entry&gt;</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">activities/service/atom2/acl?activityUuid=${activity.id}</stringProp>
                  <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] activity add member ${user_3}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_3}&lt;/email&gt;
        &lt;snx:userid&gt;${user_3.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/activities&quot;&gt;member&lt;/snx:role&gt;
     &lt;!--snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/activities&quot;&gt;owner&lt;/snx:role--&gt;
&lt;/entry&gt;</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">activities/service/atom2/acl?activityUuid=${activity.id}</stringProp>
                  <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] activity add todo ${user_3}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;id&gt;&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;#JMETER# To Do ${runLabel}&lt;/title&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;todo&quot; label=&quot;To Do&quot;&gt;&lt;/category&gt;
    &lt;content type=&quot;text&quot;&gt;#JMETER# To Do ${runLabel}&lt;/content&gt;
    &lt;snx:assignedto name=&quot;${user_3.name}&quot; userid=&quot;${user_3.id}&quot;&gt;&lt;/snx:assignedto&gt;
&lt;/entry&gt;</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">activities/service/atom2/activity?activityUuid=${activity.id}</stringProp>
                  <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="-795477064">[SC] Logout</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END UT ACTIVITIES&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] BLOGS TEST &lt;1&gt;" enabled="true">
              <stringProp name="IfController.condition">&quot;${blogs.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;START UT BLOGS&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT BLOGS]  notify - (has notified you about the blog entry)" enabled="true">
                <stringProp name="TestPlan.comments">has notified you about the blog entry</stringProp>
              </GenericController>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] blogs/api" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">blogs/api</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] blogs/homepage/api/blogs" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">blogs/homepage/api/blogs</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] blogs/roller-ui/rendering/feed/homepage/entries/atom?lang=en_us" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">blogs/roller-ui/rendering/feed/homepage/entries/atom?lang=en_us</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Create Blog" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
        &lt;id&gt;&lt;/id&gt;
        &lt;title&gt;${blog.name}&lt;/title&gt;
         &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;blog&quot; label=&quot;Blog&quot; /&gt;
        &lt;content type=&quot;text&quot;&gt;${blog.description}&lt;/content&gt;
    &lt;/entry&gt;
</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">blogs/homepage/api/blogs</stringProp>
                  <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create blog  values" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">vars.put(&quot;blog1.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BLOG&quot;);
vars.put(&quot;blog1.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  blog.id1" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">blog1.id1</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] blog id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">blog1.id</stringProp>
                    <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:blogs:blog-(.*)&lt;/id&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] blog handle" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">blog1.handle</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;snx:handle xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;(.*)&lt;/snx:handle&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;blog1.id1 : [&apos; + vars.get(&quot;blog1.id1&quot;) + &apos;]&apos;);
log.info(&apos;blog1.id : [&apos; + vars.get(&quot;blog1.id&quot;) + &apos;]&apos;);
log.info(&apos;blog1.handle : [&apos; + vars.get(&quot;blog1.handle&quot;) + &apos;]&apos;);</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Add blog entry" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
        &lt;id&gt;&lt;/id&gt;
        &lt;title&gt;${entry1.name}&lt;/title&gt;
         &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;entry&quot; label=&quot;Entry&quot; /&gt;
        &lt;content type=&quot;html&quot;&gt;&lt;![CDATA[&lt;div&gt;&lt;p&gt;${entry.description}&lt;/p&gt;&lt;/div&gt;]]&gt;&lt;/content&gt;
    &lt;/entry&gt;
</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">blogs/${blog1.handle}/api/entries</stringProp>
                  <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create entry  values" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">vars.put(&quot;entry1.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BLOG ENTRY&quot;);
vars.put(&quot;entry1.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex] entry.id1" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">entry1.id1</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] entry id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">entry1.id</stringProp>
                    <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:blogs:entry-(.*)&lt;/id&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] entry handle" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">entry1.handle</stringProp>
                    <stringProp name="RegexExtractor.regex">blogs/${blog1.handle}/feed/entrycomments/(.+?)/atom</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;entry1.id1 : [&apos; + vars.get(&quot;entry1.id1&quot;) + &apos;]&apos;);
log.info(&apos;entry1.id : [&apos; + vars.get(&quot;entry1.id&quot;) + &apos;]&apos;);
log.info(&apos;entry1.handle : [&apos; + vars.get(&quot;entry1.handle&quot;) + &apos;]&apos;);</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Add comment to blog entry" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;
&lt;entry xmlns=&apos;http://www.w3.org/2005/Atom&apos; xmlns:thr=&quot;http://purl.org/syndication/thread/1.0&quot;&gt;
  &lt;id&gt;ignored&lt;/id&gt;
  &lt;title type=&apos;text&apos;&gt;ignored&lt;/title&gt;
  &lt;thr:in-reply-to ref=&quot;${entry1.id1}&quot;/&gt;
  &lt;content type=&apos;html&apos;&gt;${comment.description}&lt;/content&gt;
&lt;/entry&gt; </stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">blogs/${blog1.handle}/api/comments</stringProp>
                  <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create entry  values" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">vars.put(&quot;comment.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BLOG COMMENT&quot;);
vars.put(&quot;comment.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ JMETER comment blah blah blah ....&quot;);

</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get securitynonce" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">blogs/${blog1.handle}/entry/${entry1.handle}?lang=en</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="X-Update-Nonce Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                    <stringProp name="RegexExtractor.regex">var t = &apos;nonce:\\&apos;(.+?)\\&apos;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;security.nonce : &apos; +vars.get(&quot;security.nonce&quot;));</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] notify user2 and user3 of blog entry" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                        <stringProp name="Argument.value">250</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="entry" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">entry</stringProp>
                        <stringProp name="Argument.value">${entry1.id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dangerousurlnonce" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dangerousurlnonce</stringProp>
                        <stringProp name="Argument.value">${security.nonce}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="receivers" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">receivers</stringProp>
                        <stringProp name="Argument.value">&lt;${user_2.id}&gt;, &lt;${user_3.id}&gt;, </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value">Hi- I thought you all might be interested in this blog entry.</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="lang" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lang</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">blogs/roller-services/json/notify</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="-795477064">[SC] Logout</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END UT BLOGS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] BOOKMARK TESTS &lt;2&gt;" enabled="true">
              <stringProp name="IfController.condition">&quot;${bookmarks.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;START UT BOOKMARKS&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT BOOKMARKS]  notify - Notify user2 &amp; 3 of bookmark" enabled="true"/>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] dogear/api/app, get service document" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">dogear/api/app</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">get service document</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  bookmark.create.uri" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">bookmark.create.uri</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:service/:workspace/:collection[1]/@href</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  bookmark.notify.uri" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">bookmark.notify.uri</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:service/:workspace/:collection[2]/@href</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;bookmark.create.uri : [&apos; +vars.get(&quot;bookmark.create.uri&quot;) + &apos;]&apos;);
log.info(&apos;bookmark.notify.uri : [&apos; +vars.get(&quot;bookmark.notify.uri&quot;) + &apos;]&apos;);</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Create bookmark" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">    &lt;entry&gt;
        &lt;id&gt;&lt;/id&gt;
        &lt;title&gt;${bookmark.name}&lt;/title&gt;
        &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;bookmark&quot;/&gt;
        &lt;link href=&quot;${bookmark.url}&quot;/&gt;
        &lt;content type=&quot;html&quot;&gt;&lt;![CDATA[&lt;div&gt;&lt;p&gt;${bookmark.description}&lt;/p&gt;&lt;/div&gt;]]&gt;&lt;/content&gt;
    &lt;/entry&gt;</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">dogear/api/app?email=${user_1}</stringProp>
                  <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                  <stringProp name="RestSampler.request_headers"></stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create bookmark  values" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">vars.put(&quot;bookmark.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BOOKMARK&quot;);
vars.put(&quot;bookmark.url&quot;, &quot;http://www.imra.ie&quot;);
vars.put(&quot;bookmark.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  bookmark.id1" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">bookmark.id1</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] bookmark.id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">bookmark.id</stringProp>
                    <stringProp name="RegexExtractor.regex">:link:(.*)&lt;/id&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">var tmp = vars.get(&quot;bookmark.id&quot;);

log.info(&apos;bookmark.id : [&apos; + vars.get(&quot;bookmark.id&quot;) + &apos;]&apos;);</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] securitynonce" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/dogear/securitynonce</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="X-Update-Nonce Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;security.nonce : &apos; +vars.get(&quot;security.nonce&quot;));</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] notify user2 and user3 of bookmark" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="notify" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">notify</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="links" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">links</stringProp>
                        <stringProp name="Argument.value">${bookmark.id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dangerousurlnonce" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dangerousurlnonce</stringProp>
                        <stringProp name="Argument.value">${security.nonce}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="users" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">users</stringProp>
                        <stringProp name="Argument.value">&lt;${user_2.id}&gt;, &lt;${user_3.id}&gt;, </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value">Hi- I thought you all might be interested in this bookmark.</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/dogear/url_notifier?lang=en_US</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA]  Your notifications have been sent" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1894972135"> Your notifications have been sent</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="-795477064">[SC] Logout</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT1 BOOKMARKS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT BOOKMARKS]  brokenurl - &quot;has notified you that one of your bookmarks may be broken&quot;" enabled="true"/>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] dogear/api/app, get service document" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">dogear/api/app</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">get service document - need to call this to refresh nonce</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  bookmark.create.uri" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">bookmark.create.uri</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:service/:workspace/:collection[1]/@href</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  bookmark.notify.uri" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">bookmark.notify.uri</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:service/:workspace/:collection[2]/@href</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;bookmark.create.uri : [&apos; +vars.get(&quot;bookmark.create.uri&quot;) + &apos;]&apos;);
log.info(&apos;bookmark.notify.uri : [&apos; +vars.get(&quot;bookmark.notify.uri&quot;) + &apos;]&apos;);</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get securitynonce" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/dogear/securitynonce</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="X-Update-Nonce Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;security.nonce : &apos; +vars.get(&quot;security.nonce&quot;));</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] notify user1 of broken url" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="brokenUrl" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">brokenUrl</stringProp>
                        <stringProp name="Argument.value">${bookmark.id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value">Hi,I was unable to access this bookmark. If this link is access controlled, could you please consider providing access to me? If the site no longer exists, you may want to consider deleting the bookmark.Thanks</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dangerousurlnonce" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">dangerousurlnonce</stringProp>
                        <stringProp name="Argument.value">${security.nonce}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="urlowner" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">urlowner</stringProp>
                        <stringProp name="Argument.value">&lt;${user_1}&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="notifyAllOwners" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">notifyAllOwners</stringProp>
                      </elementProp>
                      <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${security.nonce}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">dogear/broken_url_notifier?lang=en</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA]  Your broken URL notification has been sent" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1051027552">Your broken URL notification has been sent</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="496348869">#3# Logout Controller</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT2 BOOKMARKS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END UT BOOKMARKS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FORUMS TESTS &lt;1&gt;" enabled="true">
              <stringProp name="IfController.condition">&quot;${forums.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;START UT FORUMS&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT FORUMS]  " enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user2 create forum" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] create forum" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
&lt;title type=&quot;text&quot;&gt;${forum.name}&lt;/title&gt;
&lt;content type=&quot;text&quot;&gt;${forum.description}&lt;/content&gt;
&lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;forum-forum&quot;&gt;&lt;/category&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">forums/atom/forums</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    <stringProp name="TestPlan.comments">notoification sent to users when a topic us added to a forum they are following </stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create forum  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;forum.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST FORUM&quot;);
vars.put(&quot;forum.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  forum.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">forum.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] forum.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">forum.id</stringProp>
                      <stringProp name="RegexExtractor.regex">:forum:(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;forum.id : [&apos; + vars.get(&quot;forum.id&quot;) + &apos;]&apos;);
log.info(&apos;forum.id1 : [&apos; + vars.get(&quot;forum.id1&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user3 follow forum" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] follow forum" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="subscribe" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">subscribe</stringProp>
                        </elementProp>
                        <elementProp name="forumId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${forum.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">forumId</stringProp>
                        </elementProp>
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/forums/ajax/subscribeForum</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;true&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Operation failed" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="263641398">Operation failed</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user2 create and reply to forum topic" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] create forum topic" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
 &lt;title type=&quot;text&quot;&gt;${topic.name}&lt;/title&gt;
 &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;forum-topic&quot; /&gt;
 &lt;content type=&quot;text&quot;&gt;${topic.description}&lt;/content&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">forums/atom/topics?forumUuid=${forum.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create forum  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;topic.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST FORUM TOPIC&quot;);
vars.put(&quot;topic.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  forum.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">topic.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] topic.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">topic.id</stringProp>
                      <stringProp name="RegexExtractor.regex">:forum:(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;topic.id : [&apos; + vars.get(&quot;topic.id&quot;) + &apos;]&apos;);
log.info(&apos;topic.id1 : [&apos; + vars.get(&quot;topic.id1&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] reply to topic" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns:thr=&quot;http://purl.org/syndication/thread/1.0&quot; xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;title type=&quot;text&quot;&gt;${reply.name}&lt;/title&gt;
    &lt;content type=&quot;text&quot;&gt;${reply.description}&lt;/content&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;forum-reply&quot;&gt;&lt;/category&gt;
    &lt;thr:in-reply-to xmlns:thr=&quot;http://purl.org/syndication/thread/1.0&quot;
     ref=&quot;${topic.id1}&quot;
     href=&quot;https://${server.name}/forums/html/topic?id=${topic.id}&quot;&gt;
   &lt;/thr:in-reply-to&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">forums/atom/replies?topicUuid=${topic.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    <stringProp name="TestPlan.comments">notoification sent to users when a topic us added to a forum they are following </stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create reply  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;reply.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST REPLY&quot;);
vars.put(&quot;reply.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  reply.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">reply.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] reply.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">reply.id</stringProp>
                      <stringProp name="RegexExtractor.regex">:forum:(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;reply.id : [&apos; + vars.get(&quot;reply.id&quot;) + &apos;]&apos;);
log.info(&apos;reply.id1 : [&apos; + vars.get(&quot;reply.id1&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END UT FORUMS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] COMMUNITIES TESTS &lt;2&gt;" enabled="true">
              <stringProp name="IfController.condition">&quot;${communities.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;START UT COMMUNITIES&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT COMMUNITIES] memberAdded - User 1 adds community, adds user 3 as member" enabled="true"/>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] add community" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;

    &lt;id&gt;ignored&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;${community.name}&lt;/title&gt;
    &lt;summary type=&quot;text&quot;&gt;ignored&lt;/summary&gt;
    &lt;content type=&quot;html&quot;&gt;${community.content}&lt;/content&gt;
    &lt;published&gt;ignored&lt;/published&gt;

    &lt;author&gt;
        &lt;name&gt;${user_1}&lt;/name&gt;
        &lt;email&gt;${user_1}&lt;/email&gt;
        &lt;snx:userid&gt;${user1.id}&lt;/snx:userid&gt;
        &lt;snx:userState&gt;active&lt;/snx:userState&gt;
    &lt;/author&gt;

    &lt;updated&gt;ignored&lt;/updated&gt;

    &lt;contributor&gt;
        &lt;name&gt;${user1.displayName}&lt;/name&gt;
        &lt;email&gt;${user1.email}&lt;/email&gt;
        &lt;snx:userid&gt;${user1.id}&lt;/snx:userid&gt;
        &lt;snx:userState&gt;active&lt;/snx:userState&gt;
    &lt;/contributor&gt;

    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;snx:membercount&gt;ignored&lt;/snx:membercount&gt;
    &lt;snx:communityType&gt;public&lt;/snx:communityType&gt;
&lt;/entry&gt;

</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">communities/service/atom/communities/my</stringProp>
                  <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create community values" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">vars.put(&quot;community.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST COMMUNITY&quot;);
vars.put(&quot;community.content&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);
vars.put(&quot;community.file.name&quot;, &quot;TestFile&quot; + vars.get(&quot;runLabel&quot;) + &quot;.txt&quot;);
vars.put(&quot;community.comment.text&quot;, &quot;Test comment &quot; + vars.get(&quot;runLabel&quot;) + &quot;. \nIts a beautiful day!&quot;);

</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] not code 409" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="51517">409</stringProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">conflict</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get community id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">community.id</stringProp>
                    <stringProp name="RegexExtractor.regex">(communityUuid=(.*))</stringProp>
                    <stringProp name="RegexExtractor.template">$2$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get edit location" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">community.edit.path</stringProp>
                    <stringProp name="RegexExtractor.regex">(Location: (.*)${https.port}/(.*))</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;community.id :: &apos; + vars.get(&quot;community.id&quot;));
log.info(&apos;community.edit.path :: &apos; + vars.get(&quot;community.edit.path&quot;));
</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get community file library details" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">files/basic/api/communitylibrary/${community.id}/feed</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get etag" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">community.files.etag</stringProp>
                    <stringProp name="RegexExtractor.regex">(ETag: &quot;(.*):modified)</stringProp>
                    <stringProp name="RegexExtractor.template">$2$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;community.files.etag :: [&apos; + vars.get(&quot;community.files.etag&quot;) + &apos;]&apos;);</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] add file to community" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:td=&quot;urn:ibm.com/td&quot;&gt;
    &lt;title type=&quot;text&quot;&gt;${community.file.name}&lt;/title&gt;
    &lt;td:label&gt;${community.file.name}&lt;/td:label&gt;
    &lt;content type=&quot;text&quot;&gt;I&apos;m a blank file.&lt;/content&gt;
    &lt;summary type=&quot;text&quot;&gt;I&apos;m a blank file.&lt;/summary&gt;
    &lt;td:visibility&gt;public&lt;/td:visibility&gt;
    &lt;td:notification&gt;true&lt;/td:notification&gt;
    &lt;td:propagate&gt;true&lt;/td:propagate&gt;
    &lt;category term=&quot;&quot;/&gt;
    &lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;document&quot; label=&quot;document&quot;/&gt;
&lt;/entry&gt;

</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">files/basic/api/library/${community.files.etag}/feed?category=document</stringProp>
                  <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XPath] get file id" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">community.file.id</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:entry/td:uuid</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">community.file.id1</stringProp>
                    <stringProp name="RegexExtractor.regex">(ETag: &quot;(.*):modified)</stringProp>
                    <stringProp name="RegexExtractor.template">$2$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XPath] get file urn" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">community.file.urn</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XPath] get file library id" enabled="true">
                    <stringProp name="XPathExtractor.default">-1</stringProp>
                    <stringProp name="XPathExtractor.refname">community.file.library.id</stringProp>
                    <stringProp name="XPathExtractor.xpathQuery">/:entry/td:libraryId</stringProp>
                    <boolProp name="XPathExtractor.validate">false</boolProp>
                    <boolProp name="XPathExtractor.tolerant">false</boolProp>
                    <boolProp name="XPathExtractor.namespace">true</boolProp>
                  </XPathExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;community.file.id :: [&apos; + vars.get(&quot;community.file.id&quot;) + &apos;]&apos;);
log.info(&apos;community.file.id1 :: [&apos; + vars.get(&quot;community.file.id1&quot;) + &apos;]&apos;);
log.info(&apos;community.file.urn :: [&apos; + vars.get(&quot;community.file.urn&quot;) + &apos;]&apos;);
log.info(&apos;community.file.library.id :: [&apos; + vars.get(&quot;community.file.library.id&quot;) + &apos;]&apos;);</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] community add member ${user_3}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_3}&lt;/email&gt;
        &lt;snx:userid&gt;${user_3.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community.id}</stringProp>
                  <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="-795477064">[SC] Logout</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user2 follow community" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow community" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry&gt;
    &lt;id&gt;urn:lsid:ibm.com:follow:resource-${community.id}&lt;/id&gt;
    &lt;category term=&quot;resource-follow&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;communities&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/source&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;${community.id}&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-id&quot;&gt;
    &lt;/category&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/follow/atom/resources?source=communities&amp;type=community</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT COMMUNITIES] memberRemoved - User 1 removes user 3 from community" enabled="true"/>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] communities/service/atom/service" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body"></stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">communities/service/atom/service</stringProp>
                  <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  <stringProp name="TestPlan.comments">get Communities service document</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] communities/service/atom/communities/my" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body"></stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">communities/service/atom/communities/my</stringProp>
                  <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  <stringProp name="TestPlan.comments">get Communities service document</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] community - get member list" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body"></stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community.id}</stringProp>
                  <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                  <stringProp name="RestSampler.request_headers"></stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] community remove member ${user_3}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body"></stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community.id}&amp;userid=${user_3.id}</stringProp>
                  <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                  <stringProp name="RestSampler.request_headers"></stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout  ${user_1}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="496348869">#3# Logout Controller</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END UT COMMUNITIES&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FILES TESTS &lt;1&gt;" enabled="true">
              <stringProp name="IfController.condition">&quot;${files.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;START UT FILES&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] upload file tests" enabled="true">
                <stringProp name="IfController.condition">&quot;${files.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT FILES]  user1 ,follow user2, upload file, create public folder,add file to folder" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="self" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">self</stringProp>
                        </elementProp>
                        <elementProp name="format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">format</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/files/form/api/people/feed</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="JSON Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get nonce" enabled="true">
                      <stringProp name="VAR">security.nonce</stringProp>
                      <stringProp name="JSONPATH">items[0].nonce</stringProp>
                      <stringProp name="DEFAULT"></stringProp>
                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;security.nonce is &quot; + vars.get(&quot;security.nonce&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] upload file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">html</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">format</stringProp>
                        </elementProp>
                        <elementProp name="opId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">upload,${file.name},1409144434549</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">opId</stringProp>
                        </elementProp>
                        <elementProp name="nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">nonce</stringProp>
                        </elementProp>
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                        <elementProp name="propagate" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">propagate</stringProp>
                        </elementProp>
                        <elementProp name="notification" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">on</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">notification</stringProp>
                        </elementProp>
                        <elementProp name="label" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${file.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">label</stringProp>
                        </elementProp>
                        <elementProp name="tag" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">tag1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tag</stringProp>
                        </elementProp>
                        <elementProp name="visibility" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">public</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">visibility</stringProp>
                        </elementProp>
                        <elementProp name="shareSummary" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">shareSummary</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/files/form/api/myuserlibrary/feed</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                      <collectionProp name="HTTPFileArgs.files">
                        <elementProp name="${files.upload.file.path}" elementType="HTTPFileArg">
                          <stringProp name="File.path">${files.upload.file.path}</stringProp>
                          <stringProp name="File.paramname">file</stringProp>
                          <stringProp name="File.mimetype"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Update-Nonce</stringProp>
                          <stringProp name="Header.value">${security.nonce}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create file  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;file.name&quot;, &quot;${timestamp}&quot; + &quot;_&quot; + &quot;${runLabel}&quot; + &quot;_1_&quot; + &quot;${files.upload.file.name}&quot; );</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Item Exists" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-698589841">ItemExists</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">file.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(urn:lsid:ibm.com:td:(.*?)&amp;quot)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file library id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">file.library.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(files/form/api/library/(.*?)/document)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;file.id is &quot; + vars.get(&quot;file.id&quot;));
log.info(&quot;file.library.id is &quot; + vars.get(&quot;file.library.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
  &lt;category term=&quot;recommendation&quot; label=&quot;recommendation&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot; /&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/form/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml;type=entry;charset=UTF-8</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] comment on  file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:td=&quot;urn:ibm.com/td&quot;&gt;
    &lt;id&gt;ignored&lt;/id&gt;
    &lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;comment&quot; label=&quot;comment&quot;/&gt;
    &lt;title type=&quot;text&quot;&gt;${file.name}&lt;/title&gt;
    &lt;content type=&apos;text&apos;&gt;.JMETER TEST ${timestamp} ${runLabel}&lt;/content&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/basic/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] create public folder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;category term=&quot;collection&quot; label=&quot;collection&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;/&gt;
    &lt;label xmlns=&quot;urn:ibm.com/td&quot; makeUnique=&quot;true&quot;&gt;${folder.name}&lt;/label&gt;
    &lt;title&gt;${folder.name}&lt;/title&gt;
    &lt;summary type=&quot;text&quot;&gt;${folder.description}&lt;/summary&gt;
    &lt;visibility xmlns=&quot;urn:ibm.com/td&quot;&gt;public&lt;/visibility&gt;
    &lt;sharedWith xmlns=&quot;urn:ibm.com/td&quot;/&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/form/api/collections/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create folder  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;folder.name&quot;, vars.get(&quot;timestamp&quot;) + &quot;_&quot; + vars.get(&quot;runLabel&quot;) + &quot;_1_JMETER_TEST_FOLDER&quot;);
vars.put(&quot;folder.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ public folder blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  folder.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">folder.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] folder.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">folder.id</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;td:uuid&gt;(.*)&lt;/td:uuid&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;folder.id : [&apos; + vars.get(&quot;folder.id&quot;) + &apos;]&apos;);
log.info(&apos;folder.id1 : [&apos; + vars.get(&quot;folder.id1&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] move file to public folder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;feed xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;entry&gt;
        &lt;category term=&quot;collection&quot; label=&quot;collection&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;/&gt;
        &lt;sharePermission xmlns=&quot;urn:ibm.com/td&quot;&gt;Edit&lt;/sharePermission&gt;
        &lt;itemId xmlns=&quot;urn:ibm.com/td&quot;&gt;${folder.id}&lt;/itemId&gt;
    &lt;/entry&gt;
&lt;/feed&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/form/api/myuserlibrary/document/${file.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
  &lt;category term=&quot;recommendation&quot; label=&quot;recommendation&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot; /&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/form/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml;type=entry;charset=UTF-8</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT FILES]  user3 upload file,create private folder, share folder, follow folder, add file to folder" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="self" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">self</stringProp>
                        </elementProp>
                        <elementProp name="format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">format</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/files/form/api/people/feed</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                      <collectionProp name="HTTPFileArgs.files">
                        <elementProp name="/home/decarey/MyNotes/buildConnectionsFE.sh" elementType="HTTPFileArg">
                          <stringProp name="File.path">/home/decarey/MyNotes/buildConnectionsFE.sh</stringProp>
                          <stringProp name="File.paramname"></stringProp>
                          <stringProp name="File.mimetype"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="JSON Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get nonce" enabled="true">
                      <stringProp name="VAR">security.nonce</stringProp>
                      <stringProp name="JSONPATH">items[0].nonce</stringProp>
                      <stringProp name="DEFAULT"></stringProp>
                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;security.nonce is &quot; + vars.get(&quot;security.nonce&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] upload file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">html</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">format</stringProp>
                        </elementProp>
                        <elementProp name="opId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">upload,${file.name},1409144434549</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">opId</stringProp>
                        </elementProp>
                        <elementProp name="nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">nonce</stringProp>
                        </elementProp>
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                        <elementProp name="propagate" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">propagate</stringProp>
                        </elementProp>
                        <elementProp name="notification" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">on</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">notification</stringProp>
                        </elementProp>
                        <elementProp name="label" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${file.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">label</stringProp>
                        </elementProp>
                        <elementProp name="tag" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">tag1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tag</stringProp>
                        </elementProp>
                        <elementProp name="visibility" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">public</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">visibility</stringProp>
                        </elementProp>
                        <elementProp name="shareSummary" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">shareSummary</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/files/form/api/myuserlibrary/feed</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                      <collectionProp name="HTTPFileArgs.files">
                        <elementProp name="${files.upload.file.path}" elementType="HTTPFileArg">
                          <stringProp name="File.path">${files.upload.file.path}</stringProp>
                          <stringProp name="File.paramname">file</stringProp>
                          <stringProp name="File.mimetype"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Update-Nonce</stringProp>
                          <stringProp name="Header.value">${security.nonce}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create file  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;file.name&quot;, &quot;${runLabel}&quot; + &quot;_&quot; + &quot;${runLabel}&quot; + &quot;_&quot; + &quot;${files.upload.file.name}&quot; );</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Item Exists" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-698589841">ItemExists</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">file.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(urn:lsid:ibm.com:td:(.*?)&amp;quot)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;file.id is &quot; + vars.get(&quot;file.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] create private folder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;category term=&quot;collection&quot; label=&quot;collection&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;/&gt;
    &lt;label xmlns=&quot;urn:ibm.com/td&quot; makeUnique=&quot;true&quot;&gt;${folder.name}&lt;/label&gt;
    &lt;title&gt;${folder.name}&lt;/title&gt;
    &lt;summary type=&quot;text&quot;&gt;${folder.description}&lt;/summary&gt;
    &lt;visibility xmlns=&quot;urn:ibm.com/td&quot;&gt;private&lt;/visibility&gt;
    &lt;sharedWith xmlns=&quot;urn:ibm.com/td&quot;/&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/form/api/collections/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create folder  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;folder.name&quot;, vars.get(&quot;timestamp&quot;) + &quot;_&quot; + vars.get(&quot;runLabel&quot;) + &quot;_JMETER_TEST_FOLDER&quot;);
vars.put(&quot;folder.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ private folder blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  folder.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">folder.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] folder.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">folder.id</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;td:uuid&gt;(.*)&lt;/td:uuid&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;folder.id : [&apos; + vars.get(&quot;folder.id&quot;) + &apos;]&apos;);
log.info(&apos;folder.id1 : [&apos; + vars.get(&quot;folder.id1&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] share private folder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;feed xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;entry&gt;
        &lt;content xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot; atom:type=&quot;application/xml&quot;&gt;
            &lt;role xmlns=&quot;http://www.ibm.com/xmlns/prod/composite-applications/v1.0&quot;
                  xmlns:ca=&quot;http://www.ibm.com/xmlns/prod/composite-applications/v1.0&quot; ca:type=&quot;reader&quot;&gt;
                &lt;member ca:id=&quot;${user_2.id}&quot; ca:type=&quot;user&quot;/&gt;
            &lt;/role&gt;
        &lt;/content&gt;
    &lt;/entry&gt;
&lt;/feed&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/form/api/collection/${folder.id}/roles</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow shared folder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;notifications xmlns=&quot;urn:ibm.com/td&quot;&gt;
        &lt;filesAdded&gt;on&lt;/filesAdded&gt;
    &lt;/notifications&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/form/api/collection/${folder.id}/entry</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Update-Nonce</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Method-Override</stringProp>
                          <stringProp name="Header.value">PUT</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] &lt;td:filesAdded&gt;on&lt;/td:filesAdded&gt;" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1658506588">&lt;td:filesAdded&gt;on&lt;/td:filesAdded&gt;</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] move file to shared folder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;feed xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;entry&gt;
        &lt;category term=&quot;collection&quot; label=&quot;collection&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;/&gt;
        &lt;sharePermission xmlns=&quot;urn:ibm.com/td&quot;&gt;Edit&lt;/sharePermission&gt;
        &lt;itemId xmlns=&quot;urn:ibm.com/td&quot;&gt;${folder.id}&lt;/itemId&gt;
    &lt;/entry&gt;
&lt;/feed&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/form/api/myuserlibrary/document/${file.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT FILES]  commentAdd - user3 comments on file of user 1" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] comment on  file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:td=&quot;urn:ibm.com/td&quot;&gt;
    &lt;id&gt;${community.file.urn}&lt;/id&gt;
    &lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;comment&quot; label=&quot;comment&quot;/&gt;
    &lt;title type=&quot;text&quot;&gt;${community.file.name}&lt;/title&gt;
    &lt;content type=&apos;text&apos;&gt;${community.comment.text}&lt;/content&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/basic/api/library/${community.file.library.id}/document/${community.file.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="496348869">#3# Logout Controller</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END UT FILES&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] MODERATION TEST &lt;2&gt;" enabled="true">
              <stringProp name="IfController.condition">&quot;${moderation.tests.run}&quot;  == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;START UT MODERATION&quot;);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT MODERATION] " enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] blog comment" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] blog - get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">edit</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">method</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blogs/roller-ui/admin/rollerConfig.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="X-Update-Nonce Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">(dangerousurlnonce&quot; value=&quot;(.*?)&quot;/&gt;&lt;input)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;security.nonce : &apos; +vars.get(&quot;security.nonce&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] blog admin config - turn on moderation" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">update</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">method</stringProp>
                        </elementProp>
                        <elementProp name="site.name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Blogs</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">site.name</stringProp>
                        </elementProp>
                        <elementProp name="site.shortName" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Blogs</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">site.shortName</stringProp>
                        </elementProp>
                        <elementProp name="site.description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">site.description</stringProp>
                        </elementProp>
                        <elementProp name="site.frontpage.weblog.handle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">homepage</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">site.frontpage.weblog.handle</stringProp>
                        </elementProp>
                        <elementProp name="acf.enabled" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">on</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">acf.enabled</stringProp>
                        </elementProp>
                        <elementProp name="site.heartBeatTime" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">15</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">site.heartBeatTime</stringProp>
                        </elementProp>
                        <elementProp name="configForm.homepageEntryLimit" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">configForm.homepageEntryLimit</stringProp>
                        </elementProp>
                        <elementProp name="database.version" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">5.0.0.0.0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">database.version</stringProp>
                        </elementProp>
                        <elementProp name="database.schema.version" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">70</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">database.schema.version</stringProp>
                        </elementProp>
                        <elementProp name="database.data.version" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">70</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">database.data.version</stringProp>
                        </elementProp>
                        <elementProp name="site.pages.maxEntries" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">50</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">site.pages.maxEntries</stringProp>
                        </elementProp>
                        <elementProp name="site.newsfeeds.defaultEntries" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">50</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">site.newsfeeds.defaultEntries</stringProp>
                        </elementProp>
                        <elementProp name="users.comments.enabled" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">on</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">users.comments.enabled</stringProp>
                        </elementProp>
                        <elementProp name="users.trackbacks.inbound.enabled" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">on</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">users.trackbacks.inbound.enabled</stringProp>
                        </elementProp>
                        <elementProp name="users.trackbacks.outbound.enabled" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">on</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">users.trackbacks.outbound.enabled</stringProp>
                        </elementProp>
                        <elementProp name="users.comments.autoformat" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">on</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">users.comments.autoformat</stringProp>
                        </elementProp>
                        <elementProp name="users.comments.emailnotify" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">off</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">users.comments.emailnotify</stringProp>
                        </elementProp>
                        <elementProp name="users.moderation.required" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">on</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">users.moderation.required</stringProp>
                        </elementProp>
                        <elementProp name="uploads.enabled" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">on</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploads.enabled</stringProp>
                        </elementProp>
                        <elementProp name="uploads.types.allowed" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">jpg,jpeg,gif,png</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploads.types.allowed</stringProp>
                        </elementProp>
                        <elementProp name="uploads.types.forbid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploads.types.forbid</stringProp>
                        </elementProp>
                        <elementProp name="uploads.file.maxsize" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">1.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploads.file.maxsize</stringProp>
                        </elementProp>
                        <elementProp name="uploads.dir.maxsize" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4.00</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uploads.dir.maxsize</stringProp>
                        </elementProp>
                        <elementProp name="dangerousurlnonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">dangerousurlnonce</stringProp>
                        </elementProp>
                        <elementProp name="lang" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">en</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">lang</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blogs/roller-ui/admin/rollerConfig.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">turn on moderation for blogs</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Change saved" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1389468105">Change saved</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">children</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Create Blog" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
        &lt;id&gt;&lt;/id&gt;
        &lt;title&gt;${blog.name}&lt;/title&gt;
         &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;blog&quot; label=&quot;Blog&quot; /&gt;
        &lt;content type=&quot;text&quot;&gt;@${__time(HMS)} ${blog.description}&lt;/content&gt;
    &lt;/entry&gt;
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">blogs/homepage/api/blogs</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create blog  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;blog.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BLOG FOR MODERATION TEST&quot;);
vars.put(&quot;blog.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ moderation test blog ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  blog.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">blog.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] blog id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">blog.id</stringProp>
                      <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:blogs:blog-(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] blog handle" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">blog.handle</stringProp>
                      <stringProp name="RegexExtractor.regex">&lt;snx:handle xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;(.*)&lt;/snx:handle&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;blog.id1 : [&apos; + vars.get(&quot;blog.id1&quot;) + &apos;]&apos;);
log.info(&apos;blog.id : [&apos; + vars.get(&quot;blog.id&quot;) + &apos;]&apos;);
log.info(&apos;blog.handle : [&apos; + vars.get(&quot;blog.handle&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Add blog entry" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
        &lt;id&gt;&lt;/id&gt;
        &lt;title&gt;${entry.name}&lt;/title&gt;
         &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;entry&quot; label=&quot;Entry&quot; /&gt;
        &lt;content type=&quot;html&quot;&gt;&lt;![CDATA[&lt;div&gt;&lt;p&gt;@${__time(HMS)} ${entry.description}&lt;/p&gt;&lt;/div&gt;]]&gt;&lt;/content&gt;
    &lt;/entry&gt;
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">blogs/${blog.handle}/api/entries</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create entry  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;entry.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BLOG ENTRY FOR MODERATION&quot;);
vars.put(&quot;entry.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ moderatinon entry ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex] entry.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">entry.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] entry id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">entry.id</stringProp>
                      <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:blogs:entry-(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] entry handle" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">entry.handle</stringProp>
                      <stringProp name="RegexExtractor.regex">blogs/${blog.handle}/feed/entrycomments/(.+?)/atom</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;entry.id1 : [&apos; + vars.get(&quot;entry.id1&quot;) + &apos;]&apos;);
log.info(&apos;entry.id : [&apos; + vars.get(&quot;entry.id&quot;) + &apos;]&apos;);
log.info(&apos;entry.handle : [&apos; + vars.get(&quot;entry.handle&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Add comment to blog entry" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;
&lt;entry xmlns=&apos;http://www.w3.org/2005/Atom&apos; xmlns:thr=&quot;http://purl.org/syndication/thread/1.0&quot;&gt;
  &lt;id&gt;ignored&lt;/id&gt;
  &lt;title type=&apos;text&apos;&gt;ignored&lt;/title&gt;
  &lt;thr:in-reply-to ref=&quot;${entry.id1}&quot;/&gt;
  &lt;content type=&apos;html&apos;&gt;1! ${comment.description} @${__time(HMS)}&lt;/content&gt;
&lt;/entry&gt; </stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">blogs/${blog.handle}/api/comments</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create entry  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;comment.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BLOG COMMENT FOPr MODERATION&quot;);
vars.put(&quot;comment.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ JMETER comment for moderation test ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_2}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Add comment to blog entry - this should need approval when moderation is turned on" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;
&lt;entry xmlns=&apos;http://www.w3.org/2005/Atom&apos; xmlns:thr=&quot;http://purl.org/syndication/thread/1.0&quot;&gt;
  &lt;id&gt;ignored&lt;/id&gt;
  &lt;title type=&apos;text&apos;&gt;ignored&lt;/title&gt;
  &lt;thr:in-reply-to ref=&quot;${entry.id1}&quot;/&gt;
  &lt;content type=&apos;html&apos;&gt;${comment.description}&lt;/content&gt;
&lt;/entry&gt; </stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">blogs/${blog.handle}/api/comments</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create entry  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;comment.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BLOG COMMENT FOPr MODERATION&quot;);
vars.put(&quot;comment.description&quot;, &quot;2! ~ @${__time(HMS)} : &quot; + vars.get(&quot;runLabel&quot;) + &quot;~ JMETER comment for moderation test .... should need approval!!&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] comment id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">comment.id</stringProp>
                      <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:blogs:comment-(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;comment.id : [&apos; + vars.get(&quot;comment.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_3}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] blog manage - get pending comments" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">query</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">method</stringProp>
                        </elementProp>
                        <elementProp name="weblog" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${blog.handle}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">weblog</stringProp>
                        </elementProp>
                        <elementProp name="pageSize" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">pageSize</stringProp>
                        </elementProp>
                        <elementProp name="commentType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">pending</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">commentType</stringProp>
                        </elementProp>
                        <elementProp name="reverse" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">reverse</stringProp>
                        </elementProp>
                        <elementProp name="lang" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">en</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">lang</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blogs/roller-ui/authoring/commentManagement.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="X-Update-Nonce Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">(dangerousurlnonce&quot; value=&quot;(.*?)&quot;/&gt;&lt;input)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] comment in  pending list ??" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="529333895">${comment.description}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">children</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;security.nonce : &apos; +vars.get(&quot;security.nonce&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] blog manage - approve comment" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="method" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">approve</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">method</stringProp>
                        </elementProp>
                        <elementProp name="weblog" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${blog.handle}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">weblog</stringProp>
                        </elementProp>
                        <elementProp name="pageSize" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">25</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">pageSize</stringProp>
                        </elementProp>
                        <elementProp name="commentType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">pending</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">commentType</stringProp>
                        </elementProp>
                        <elementProp name="reverse" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">reverse</stringProp>
                        </elementProp>
                        <elementProp name="lang" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">en</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">lang</stringProp>
                        </elementProp>
                        <elementProp name="dangerousurlnonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">dangerousurlnonce</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                        </elementProp>
                        <elementProp name="commentCheck" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${comment.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">commentCheck</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blogs/roller-ui/authoring/commentManagement.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_2}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 2 - like post1, post2 with @mentions" enabled="false"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like microblog" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/connections/opensocial/rest/ublog/@all/@all/${microblog.id}/likes</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] post microblog with @mentions" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot;hello &lt;span class=\&quot;vcard\&quot;&gt;&lt;span class=\&quot;fn\&quot;&gt;@${user_4.name}&lt;/span&gt;&lt;span class=\&quot;x-lconn-userid\&quot;&gt;${user_4.id}&lt;/span&gt;&lt;/span&gt; &lt;span class=\&quot;vcard\&quot;&gt;&lt;span class=\&quot;fn\&quot;&gt;@${user_3.name}&lt;/span&gt;&lt;span class=\&quot;x-lconn-userid\&quot;&gt;${user_3.id}&lt;/span&gt;&lt;/span&gt; from JMETER! ${runLabel} @${__time(HMS)}...&quot;}
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/connections/opensocial/rest/ublog/${user_2.id}/@all</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get microblog id" enabled="true">
                      <stringProp name="VAR">microblog1.id</stringProp>
                      <stringProp name="JSONPATH">entry.id</stringProp>
                      <stringProp name="DEFAULT"></stringProp>
                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;microblog1.id is &quot; + vars.get(&quot;microblog1.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_2}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 3 - comment on post" enabled="false"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] comment microblog" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot;  comment from JMETER! ${runLabel} @${__time(HMS)}...&quot;}
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/connections/opensocial/rest/ublog/@all/@all/${microblog.id}/comments</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_3}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END UT MODERATION&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] PROFILES TEST &lt;2&gt;" enabled="true">
              <stringProp name="IfController.condition">&quot;${profiles.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;START UT PROFILES&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT PROFILES] make network invitation" enabled="true"/>
              <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] follow user3" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="targetKey" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${user_3.profile.key}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">targetKey</stringProp>
                      </elementProp>
                      <elementProp name="sourceKey" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${user_1.profile.key}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">sourceKey</stringProp>
                      </elementProp>
                      <elementProp name="action" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">follow</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">action</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                  <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/profiles/html/following.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user profile requests" enabled="true"/>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_0.id}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_0.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user0.profile.key" enabled="true">
                      <stringProp name="HtmlExtractor.refname">user0.profile.key</stringProp>
                      <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">-1</stringProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user0.profile.key : [&apos; + vars.get(&quot;user0.profile.key&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_1.id}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_1.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user1.profile.key" enabled="true">
                      <stringProp name="HtmlExtractor.refname">user1.profile.key</stringProp>
                      <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">-1</stringProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user1.profile.key : [&apos; + vars.get(&quot;user1.profile.key&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_2.id}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_2.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user2.profile.key" enabled="true">
                      <stringProp name="HtmlExtractor.refname">user2.profile.key</stringProp>
                      <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">-1</stringProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user2.profile.key : [&apos; + vars.get(&quot;user2.profile.key&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_3.id}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_3.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user3.profile.key" enabled="true">
                      <stringProp name="HtmlExtractor.refname">user3.profile.key</stringProp>
                      <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">-1</stringProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user3.profile.key : [&apos; + vars.get(&quot;user3.profile.key&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] profiles/atom/profileService.do" enabled="true"/>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profileService.do?email=\${user_3}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/profileService.do?email=${user_3}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get target key" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">user3.target.key</stringProp>
                      <stringProp name="RegexExtractor.regex">(targetKey=(.+?)&amp;amp;lastMod=)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user3.target.key : [&apos; + vars.get(&quot;user3.target.key&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profileService.do?userid=\${user_1.id}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/profileService.do?userid=${user_1.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get target key" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">user1.target.key</stringProp>
                      <stringProp name="RegexExtractor.regex">(targetKey=(.+?)&amp;amp;lastMod=)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user1.target.key : [&apos; + vars.get(&quot;user1.target.key&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] connections feeds " enabled="true"/>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] connections feed of user 0 - profiles/atom/connections.do?connectionType=colleague&amp;key=\${user0.profile.key}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/connections.do?connectionType=colleague&amp;key=${user0.profile.key}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP] get connections count - opensearch:totalResults" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">user4.connections.count</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:feed/opensearch:totalResults</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get connection id (if exists)" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">user0.connection.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(connectionId=(.+?)&quot;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user0.connection.id : [&apos; + vars.get(&quot;user0.connection.id&quot;) + &apos;]&apos;);
log.info(&apos;user0.connections.count : [&apos; + vars.get(&quot;user0.connections.count&quot;) + &apos;]&apos;);
</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] connections feed of user 1 - profiles/atom/connections.do?connectionType=colleague&amp;key=\${user1.profile.key}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/connections.do?connectionType=colleague&amp;key=${user1.profile.key}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP] get connections count - opensearch:totalResults" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">user1.connections.count</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:feed/opensearch:totalResults</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get connection id (if exists)" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">user1.connection.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(connectionId=(.+?)&quot;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user1.connection.id : [&apos; + vars.get(&quot;user1.connection.id&quot;) + &apos;]&apos;);
log.info(&apos;user1.connections.count : [&apos; + vars.get(&quot;user1.connections.count&quot;) + &apos;]&apos;);
</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] connections feed of user 2 - profiles/atom/connections.do?connectionType=colleague&amp;key=\${user2.profile.key}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/connections.do?connectionType=colleague&amp;key=${user2.profile.key}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP] get connections count - opensearch:totalResults" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">user2.connections.count</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:feed/opensearch:totalResults</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get connection id (if exists)" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">user2.connection.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(connectionId=(.+?)&quot;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user2.connection.id : [&apos; + vars.get(&quot;user2.connection.id&quot;) + &apos;]&apos;);
log.info(&apos;user2.connections.count : [&apos; + vars.get(&quot;user2.connections.count&quot;) + &apos;]&apos;);
</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] connections feed of user 3 - profiles/atom/connections.do?connectionType=colleague&amp;key=\${user3.profile.key}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/connections.do?connectionType=colleague&amp;key=${user3.profile.key}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP] get connections count - opensearch:totalResults" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">user3.connections.count</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:feed/opensearch:totalResults</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get connection id (if exists)" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">user3.connection.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(connectionId=(.+?)&quot;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user3.connection.id : [&apos; + vars.get(&quot;user3.connection.id&quot;) + &apos;]&apos;);
log.info(&apos;user3.connections.count : [&apos; + vars.get(&quot;user3.connections.count&quot;) + &apos;]&apos;);
</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] delete connections" enabled="false"/>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user2.connection.id not empty" enabled="true">
                    <stringProp name="IfController.condition">&quot;${user2.connection.id}&quot; != null &amp;&amp; &quot;${user2.connection.id}&quot; != &quot;&quot; &amp;&amp; &quot;${user2.connection.id}&quot; != &quot;-1&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST]  deleting connection request user2" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body"></stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">profiles/atom/connection.do?connectionId=${user2.connection.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers"></stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user3.connection.id not empty" enabled="true">
                    <stringProp name="IfController.condition">&quot;${user3.connection.id}&quot; != null &amp;&amp; &quot;${user3.connection.id}&quot; != &quot;&quot; &amp;&amp; &quot;${user3.connection.id}&quot; != &quot;-1&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST]  deleting connection request user3" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body"></stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">profiles/atom/connection.do?connectionId=${user3.connection.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers"></stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If user4.connection.id not empty" enabled="true">
                    <stringProp name="IfController.condition">&quot;${user4.connection.id}&quot; != null &amp;&amp; &quot;${user4.connection.id}&quot; != &quot;&quot; &amp;&amp; &quot;${user4.connection.id}&quot; != &quot;-1&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST]  deleting connection request user4" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body"></stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">profiles/atom/connection.do?connectionId=${user4.connection.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers"></stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] inviting a user3 to become your colleague" enabled="false">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
 xmlns=&quot;http://www.w3.org/2005/Atom&quot;
 xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
  &lt;category term=&quot;connection&quot;
   scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; /&gt;
  &lt;category term=&quot;colleague&quot;
   scheme=&quot;http://www.ibm.com/xmlns/prod/sn/connection/type&quot; /&gt;
  &lt;category term=&quot;pending&quot;
   scheme=&quot;http://www.ibm.com/xmlns/prod/sn/status&quot; /&gt;
  &lt;!-- Message to other user --&gt;
  &lt;content type=&quot;html&quot;&gt;
   Please accept this invitation to be in my network of Connections colleagues. ${runLabel}
  &lt;/content&gt;
&lt;/entry&gt;</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">profiles/atom/connections.do?email=${user_3}&amp;connectionType=colleague</stringProp>
                  <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get connection id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">new.connection.id</stringProp>
                    <stringProp name="RegexExtractor.regex">(connectionId=(.*))</stringProp>
                    <stringProp name="RegexExtractor.template">$2$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">log.info(&apos;new.connection.id : [&apos; + vars.get(&quot;new.connection.id&quot;) + &apos;]&apos;);</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                </hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="496348869">#3# Logout Controller</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT PROFILES] accept network invitation." enabled="false"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] empty mail boxes for user1, 2,3 &amp; 4" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="622984551">[SC] Empty mail boxes for user1,2,3 &amp; 4</stringProp>
                    <stringProp name="144121105">[ForEach] Mail Users</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.name" elementType="Argument">
                        <stringProp name="Argument.name">user.name</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.password" elementType="Argument">
                        <stringProp name="Argument.name">user.password</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] accept invite" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
 &lt;title type=&quot;text&quot;&gt;${user_3.displayName}&lt;/title&gt;
 &lt;category term=&quot;connection&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
 &lt;category term=&quot;colleague&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/connection/type&quot;&gt;&lt;/category&gt;
 &lt;category term=&quot;accepted&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/status&quot;&gt;&lt;/category&gt;
 &lt;content type=&quot;html&quot;&gt;${invite.accept.comment}&lt;/content&gt;
&lt;/entry&gt;</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                  <stringProp name="RestSampler.resource">profiles/atom/connection.do?connectionId=${new.connection.id}</stringProp>
                  <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                  <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  <stringProp name="TestPlan.comments">964639c2-3d83-4c19-8f5d-caa33bc47dc8</stringProp>
                </com.atlantbh.jmeter.plugins.rest.RestSampler>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create community values" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">vars.put(&quot;invite.accept.comment&quot;, vars.get(&quot;runLabel&quot;) + &quot; blah&quot;);

</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                </hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_3}" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                    <stringProp name="-795477064">[SC] Logout</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END UT PROFILES&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] WIKIS TEST &lt;2&gt;" enabled="true">
              <stringProp name="IfController.condition">&quot;${wikis.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;START UT WIKIS&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT WIKIS] create wiki(add user as editor), commentAdd" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 1 - create wiki and wiki page" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] create a wiki (set user 2 as editor)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;id&gt;ignore&lt;/id&gt;
    &lt;td:label xmlns:td=&quot;urn:ibm.com/td&quot;&gt;${wiki.label}&lt;/td:label&gt;
    &lt;category term=&quot;wiki&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot; label=&quot;wiki&quot;&gt;

    &lt;/category&gt;
    &lt;author&gt;
        &lt;name&gt;${user_1}&lt;/name&gt;
        &lt;snx:userid xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;${user_1.id}&lt;/snx:userid&gt;
        &lt;email&gt;${user_1}&lt;/email&gt;
    &lt;/author&gt;

    &lt;td:sharedWith xmlns:td=&quot;urn:ibm.com/td&quot;&gt;
        &lt;ca:member
                xmlns:ca=&quot;http://www.ibm.com/xmlns/prod/composite-applications/v1.0&quot;
                ca:id=&quot;${user_2.id}&quot;
                ca:type=&quot;user&quot;
                ca:role=&quot;editor&quot; &gt;
        &lt;/ca:member&gt;

        &lt;ca:member
                xmlns:ca=&quot;http://www.ibm.com/xmlns/prod/composite-applications/v1.0&quot;
                ca:id=&quot;anonymous-user&quot;
                ca:type=&quot;virtual&quot;
                ca:role=&quot;reader&quot; &gt;
        &lt;/ca:member&gt;
    &lt;/td:sharedWith&gt;

    &lt;title type=&quot;text&quot;&gt;${wiki.title}&lt;/title&gt;
    &lt;summary type=&quot;text&quot;&gt;${wiki.summary}&lt;/summary&gt;

&lt;/entry&gt;

</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">wikis/basic/api/wikis/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    <stringProp name="TestPlan.comments">create a wiki with user 2 as editor</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create wiki values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;wiki.label&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST WIKI&quot;);
vars.put(&quot;wiki.title&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ JMETER TEST WIKI ....&quot;);
vars.put(&quot;wiki.summary&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ summary blah blah blah ....&quot;);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname=" XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex] get wiki id" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">new.wiki.id</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/td:uuid</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex] get wiki label" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">new.wiki.label</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/td:label</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;new.wiki.id : [&apos; + vars.get(&quot;new.wiki.id&quot;) + &apos;]&apos;);
log.info(&apos;new.wiki.label : [&apos; + vars.get(&quot;new.wiki.label&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] create wiki page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
 &lt;title type=&quot;text&quot;&gt;${wiki.page.title}&lt;/title&gt;
 &lt;content type=&quot;text&quot; /&gt;
 &lt;category term=&quot;&quot; /&gt;
 &lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;page&quot; label=&quot;page&quot; /&gt;
&lt;/entry&gt;

</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">wikis/basic/api/wiki/${__javaScript(encodeURIComponent(&apos;${new.wiki.label}&apos;))}/feed?draft=false&amp;includeNotification=true&amp;sendNotification=true</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create wiki page values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;wiki.page.title&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ JMETER TEST WIKI PAGE....&quot;);

//wikis/basic/api/wiki/${__javaScript(encodeURIComponent(&apos;${new.wiki.label}&apos;))}/feed?draft=false&amp;includeNotification=true&amp;sendNotification=true</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname=" XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex] get wiki id" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">new.wiki.page.id</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/td:uuid</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex] get wiki label" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">new.wiki.page.label</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/td:label</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;new.wiki.page.id : [&apos; + vars.get(&quot;new.wiki.page.id&quot;) + &apos;]&apos;);
log.info(&apos;new.wiki.page.label : [&apos; + vars.get(&quot;new.wiki.page.label&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 2 - follow wiki" enabled="false"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow wiki" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry&gt;
    &lt;id&gt;urn:lsid:ibm.com:follow:resource-${new.wiki.id}&lt;/id&gt;
    &lt;category term=&quot;resource-follow&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;wikis&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/source&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;wiki&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;${new.wiki.id}&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-id&quot;&gt;
&lt;/category&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">wikis/follow/atom/resources?source=wikis&amp;type=wiki</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml; charset=UTF-8</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_2}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 3 - add comment to wiki page" enabled="false"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] addComment to wiki page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
  &lt;category term=&quot;comment&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot; label=&quot;comment&quot;&gt;&lt;/category&gt;
  &lt;content type=&quot;text/plain&quot;&gt;${wiki.page.comment}&lt;/content&gt;
&lt;/entry&gt;
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">wikis/basic/api/wiki/${new.wiki.id}/page/${new.wiki.page.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname=" XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create wiki comment values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;wiki.page.comment&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ JMETER TEST WIKI COMMENT....&quot;);</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_3}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END UT WIKIS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] MICROBLOG TEST" enabled="true">
              <stringProp name="IfController.condition">&quot;${microblog.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;START UT MICROBLOG&quot;);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT MICROBLOG] post " enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 1 - post1" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] post microblog" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot; ... Hello from JMETER! ${runLabel} @${__time(HMS)}...&quot;}
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/${user_1.id}/@all</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get microblog id" enabled="true">
                      <stringProp name="VAR">microblog.id</stringProp>
                      <stringProp name="JSONPATH">entry.id</stringProp>
                      <stringProp name="DEFAULT"></stringProp>
                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;microblog.id is &quot; + vars.get(&quot;microblog.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like microblog" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/@all/@all/${microblog.id}/likes/urn:lsid:lconn.ibm.com:profiles.person:${user_1.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 2 - like post1, post2 with @mentions" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like microblog" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/@all/@all/${microblog.id}/likes/urn:lsid:lconn.ibm.com:profiles.person:${user_2.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] post microblog with @mentions" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot;hello &lt;span class=\&quot;vcard\&quot;&gt;&lt;span class=\&quot;fn\&quot;&gt;@${user_3.name}&lt;/span&gt;&lt;span class=\&quot;x-lconn-userid\&quot;&gt;${user_3.id}&lt;/span&gt;&lt;/span&gt;  from JMETER! ${runLabel} @${__time(HMS)}...&quot;}
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/${user_2.id}/@all</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get microblog id" enabled="true">
                      <stringProp name="VAR">microblog1.id</stringProp>
                      <stringProp name="JSONPATH">entry.id</stringProp>
                      <stringProp name="DEFAULT"></stringProp>
                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;microblog1.id is &quot; + vars.get(&quot;microblog1.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_2}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 3 - comment on post" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] comment microblog" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot;  comment from JMETER! ${runLabel} @${__time(HMS)}...&quot;}
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/@all/@all/${microblog.id}/comments</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_3}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END UT MICROBLOG&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] DIGESTS &lt;daily, weekly user1 &amp; user3&gt;" enabled="true"/>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] Fire Daily/Weekly Digest" enabled="true">
                <stringProp name="IfController.condition">&quot;${digests.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START UT DIGESTS&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] Daily Digest" enabled="true">
                  <stringProp name="IfController.condition">&quot;${digests.daily.tests.run}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Daily Digest user 1" enabled="true"/>
                  <hashTree>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] set notification emails to daily for user1" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="email.notify.pref.frequency" elementType="Argument">
                            <stringProp name="Argument.name">email.notify.pref.frequency</stringProp>
                            <stringProp name="Argument.value">daily</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="direct.notifications" elementType="Argument">
                            <stringProp name="Argument.name">direct.notifications</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Set Notification Preferences" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="0"></stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="1819868399">[SC] Set Notification Preferences</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="0"></stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP]  Daily Digest ${user_1}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">news/web/testEmailDigestSendMail.action?type=daily</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] User must be in admin role " enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1393443524">You are not authorized to perform this action. User must be in admin role for News.</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">6</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Building email digest" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1581946874">Building email digest for sending. Note that you may not receive a digest if no eligible digest entries are found.</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&quot;daily digest called for user&quot;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] Weekly Digest" enabled="true">
                  <stringProp name="IfController.condition">&quot;${digests.weekly.tests.run}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Weekly Digest user 2" enabled="true"/>
                  <hashTree>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] set notification emails to weekly for user1" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="email.notify.pref.frequency" elementType="Argument">
                            <stringProp name="Argument.name">email.notify.pref.frequency</stringProp>
                            <stringProp name="Argument.value">weekly</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="direct.notifications" elementType="Argument">
                            <stringProp name="Argument.name">direct.notifications</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Set Notification Preferences" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="0"></stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="1819868399">[SC] Set Notification Preferences</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="0"></stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP]  Weekly Digest ${user_1}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">news/web/testEmailDigestSendMail.action?type=weekly</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] User must be in admin role " enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1393443524">You are not authorized to perform this action. User must be in admin role for News.</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">6</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Building email digest" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1581946874">Building email digest for sending. Note that you may not receive a digest if no eligible digest entries are found.</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&quot;weekly digest called for user&quot;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT DIGESTS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] GET, SAVE AND CHECK EMAIL " enabled="true">
              <stringProp name="IfController.condition"> &quot;${tests.mailchecks.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] email time delay" enabled="true"/>
              <hashTree>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&quot;mail check delay &quot; + vars.get(&quot;email.read.delay.ms&quot;) + &quot;ms&quot;);</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="email..read.delay.ms delay" enabled="true">
                  <stringProp name="ConstantTimer.delay">${email.read.delay.ms}</stringProp>
                </ConstantTimer>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] ACTIVITIES MAIL CHECKS &lt;2&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${activites.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START ACTIVITIES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been added to:</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${activity.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.activity.memberAdd</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">has added you to an activity,Open Your Activity Dashboard,You can bookmark the URL below to find this activity again in the future</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have created a new activity</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${activity.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.activity.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">assigned you a to</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.activity.todo.assigned</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END ACTIVITIES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] BLOGS MAIL CHECKS &lt;1&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${blogs.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START BLOGS MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check user2 mailbox for blog entry notification email" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">${blog1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${entry1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.blog.entry.notify</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END BLOGS MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] BOOKMARK MAIL CHECKS &lt;1&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${bookmarks.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START BOOKMARKS MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">${bookmark.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${bookmark.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.bookmark.notify</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">Your bookmark</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">has been flagged as broken</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.bookmark.brokenurl.eml</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END BOOKMARKS MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FORUMS MAIL CHECKS &lt;1&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${forums.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START FORUMS MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">replied to the</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${topic.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.forum.follow</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">Open this item,${forum.name},${topic.name},${reply.description},To unsubscribe or change settings, please go to your IBM Connections Settings</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END FORUMS MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] COMMUNITIES MAIL CHECKS &lt;2&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${communities.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START COMMUNITIES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3 (has added you to a community)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been added to:</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${community.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.communities.memberAdd</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been removed from:</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${community.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.communities.memberRemove.eml</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END COMMUNITIES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FILES MAIL CHECKS &lt;1&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${files.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START FILES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1 (commented on your file)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">commented on your file</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${community.file.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.files.commentAdd</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1 (uploaded the file)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">uploaded the file</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.files.uploadedFile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2 (liked  the file)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">liked your file</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.files.likedFile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END FILES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] MODERATION MAIL CHECKS &lt;0&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${moderation.tests.run}&quot;  == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START MODERATION  MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">Comment Posted For Review</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.moderation.for.approval</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.global.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">should need approval</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">Comment Approved</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.moderation.approved</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.global.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">should need approval</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END MODERATION MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] NEWS MAIL CHECKS &lt;0&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${news.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] PROFILES MAIL CHECKS &lt;2&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${profiles.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START PROFILES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">accepted your network invitation</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">accepted your network invitation</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.profiles.invite.accept</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3 - followed you" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">followed you</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">followed you</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.profiles.followedYou</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You are invited to join my network</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">You are invited to join my network</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.profiles.invite</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END PROFILES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] WIKIS TEST MAIL CHECKS &lt;1&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${wikis.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START WIKIS MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2 (has made you Editor of )" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">has made you Editor of the</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${wiki.title}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.wikis.editor</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2 (has commented on)" enabled="false">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">has commented on</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">has commented on</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.wikis.addComment</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END WIKIS MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] MICROBLOG TEST MAIL CHECKS &lt;2&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${microblog.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START MICROBLOG MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1 (liked your message)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">liked your message</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">liked your message</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.microblog.like</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1 (commented on your message)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">commented on your message</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">commented on your message</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.microblog.comment</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3 (mentions)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">mentioned</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">you in a message</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.microblog.mentions</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">JMETER!</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="0"></stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END MICROBLOG MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] DIGESTS TEST MAIL CHECKS &lt;2&gt;" enabled="true">
                <stringProp name="IfController.condition">&quot;${digests.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START DIGESTS MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] DIGESTS TEST DAILY" enabled="true">
                  <stringProp name="IfController.condition">&quot;${digests.daily.tests.run}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1 daily newsletter" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">Daily Newsletter</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">Daily Newsletter</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.digest.daily</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] DIGESTS TEST WEEKLY" enabled="true">
                  <stringProp name="IfController.condition">&quot;${digests.weekly.tests.run}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2 weekly newsletter" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">Weekly Newsletter</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">Weekly Newsletter</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.digest.weekly</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${user.mail.news.admin}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END DIGESTS MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] cloud" enabled="true">
            <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;cloud&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] STD TESTS" enabled="true">
              <stringProp name="IfController.condition">&quot;${std.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] ACTIVITIES TEST" enabled="true">
                <stringProp name="IfController.condition">&quot;${activites.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;START UT ACTIVITIES&quot;);
log.info(&quot;START UT ACTIVITIES&quot;);


</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT ACTIVITIES]  notify, add-member (2 tests)" enabled="true"/>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/activities</stringProp>
                        <stringProp name="Authorization.username">${user_1}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] activities/service/atom2/activities, get Activity Dashboard" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">activities/service/atom2/activities</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">get Activity Dashboard, just for viewing</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Create Activitiy" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
        &lt;id&gt;&lt;/id&gt;
        &lt;title&gt;${activity.name}&lt;/title&gt;
         &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;activity&quot; label=&quot;Activity&quot; /&gt;
        &lt;link href=&quot;${activity.url}&quot;/&gt;
        &lt;content type=&quot;html&quot;&gt;${activity.description}&lt;/content&gt;
    &lt;/entry&gt;
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">activities/service/atom2/activities</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create activity  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;activity.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST ACTIVITY&quot;);
vars.put(&quot;activity.yrl&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST ACTIVITY&quot;);
vars.put(&quot;activity.description&quot;, &quot;JMETER ACTIVITY GOAL ~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ test....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  activity.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">activity.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  activity.id" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">activity.id</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/snx:activity</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">var tmp = vars.get(&quot;activity.id&quot;);
log.info(&apos;activity.id : [&apos; + vars.get(&quot;activity.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] activity add member ${user_3}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_3}&lt;/email&gt;
        &lt;snx:userid&gt;${user_3.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/activities&quot;&gt;member&lt;/snx:role&gt;
     &lt;!--snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/activities&quot;&gt;owner&lt;/snx:role--&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">activities/service/atom2/acl?activityUuid=${activity.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] activity add todo ${user_3}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;id&gt;&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;#JMETER# To Do ${runLabel}&lt;/title&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;todo&quot; label=&quot;To Do&quot;&gt;&lt;/category&gt;
    &lt;content type=&quot;text&quot;&gt;#JMETER# To Do ${runLabel}&lt;/content&gt;
    &lt;snx:assignedto name=&quot;${user_3.name}&quot; userid=&quot;${user_3.id}&quot;&gt;&lt;/snx:assignedto&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">activities/service/atom2/activity?activityUuid=${activity.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] if using guest user 4" enabled="true">
                    <stringProp name="IfController.condition">&quot;${add.guest.user}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] activity add guest member ${user_4}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_4}&lt;/email&gt;
        &lt;snx:userid&gt;${user_4.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/activities&quot;&gt;member&lt;/snx:role&gt;
     &lt;!--snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/activities&quot;&gt;owner&lt;/snx:role--&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">activities/service/atom2/acl?activityUuid=${activity.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] activity add todo guest member ${user_4}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;id&gt;&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;#JMETER# To Do ${runLabel}&lt;/title&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;todo&quot; label=&quot;To Do&quot;&gt;&lt;/category&gt;
    &lt;content type=&quot;text&quot;&gt;#JMETER# To Do ${runLabel}&lt;/content&gt;
    &lt;snx:assignedto name=&quot;${user_4.name}&quot; userid=&quot;${user_4.id}&quot;&gt;&lt;/snx:assignedto&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">activities/service/atom2/activity?activityUuid=${activity.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] if using external user 5" enabled="true">
                    <stringProp name="IfController.condition">&quot;${use.external.user}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] activity add external member ${user_5}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_5}&lt;/email&gt;
        &lt;snx:userid&gt;${user_5.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/activities&quot;&gt;member&lt;/snx:role&gt;
     &lt;!--snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/activities&quot;&gt;owner&lt;/snx:role--&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">activities/service/atom2/acl?activityUuid=${activity.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] activity add todo external member ${user_5}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;id&gt;&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;#JMETER# To Do ${runLabel}&lt;/title&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;todo&quot; label=&quot;To Do&quot;&gt;&lt;/category&gt;
    &lt;content type=&quot;text&quot;&gt;#JMETER# To Do ${runLabel}&lt;/content&gt;
    &lt;snx:assignedto name=&quot;${user_5.name}&quot; userid=&quot;${user_5.id}&quot;&gt;&lt;/snx:assignedto&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">activities/service/atom2/activity?activityUuid=${activity.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT ACTIVITIES&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] COMMUNITIES TESTS" enabled="true">
                <stringProp name="IfController.condition">&quot;${communities.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;START UT COMMUNITIES&quot;);
log.info(&quot;START UT COMMUNITIES&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT COMMUNITIES] memberAdded - User 1 adds community, adds user 3 as member" enabled="true"/>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/communities</stringProp>
                        <stringProp name="Authorization.username">${user_1}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] add communities and members" enabled="true"/>
                  <hashTree>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] add public community (only internal members allowed)" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;

    &lt;id&gt;ignored&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;${community.name}&lt;/title&gt;
    &lt;summary type=&quot;text&quot;&gt;ignored&lt;/summary&gt;
    &lt;content type=&quot;html&quot;&gt;${community.content}&lt;/content&gt;
    &lt;published&gt;ignored&lt;/published&gt;

    &lt;author&gt;
        &lt;name&gt;${user_1}&lt;/name&gt;
        &lt;email&gt;${user_1}&lt;/email&gt;
        &lt;snx:userid&gt;${user1.id}&lt;/snx:userid&gt;
        &lt;snx:userState&gt;active&lt;/snx:userState&gt;
    &lt;/author&gt;

    &lt;updated&gt;ignored&lt;/updated&gt;

    &lt;contributor&gt;
        &lt;name&gt;${user1.displayName}&lt;/name&gt;
        &lt;email&gt;${user1.email}&lt;/email&gt;
        &lt;snx:userid&gt;${user1.id}&lt;/snx:userid&gt;
        &lt;snx:userState&gt;active&lt;/snx:userState&gt;
    &lt;/contributor&gt;

    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;snx:membercount&gt;ignored&lt;/snx:membercount&gt;
    &lt;snx:communityType&gt;public&lt;/snx:communityType&gt;
&lt;/entry&gt;

</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/service/atom/communities/my</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create community values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;community.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST COMMUNITY&quot;);
vars.put(&quot;community.content&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);
vars.put(&quot;community.file.name&quot;, &quot;TestFile&quot; + vars.get(&quot;runLabel&quot;) + &quot;.txt&quot;);
vars.put(&quot;community.comment.text&quot;, &quot;Test comment &quot; + vars.get(&quot;runLabel&quot;) + &quot;. \nIts a beautiful day!&quot;);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="49587">201</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] not code 409" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="51517">409</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">conflict</stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">6</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get community id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                        <stringProp name="RegexExtractor.refname">community.id</stringProp>
                        <stringProp name="RegexExtractor.regex">(communityUuid=(.*))</stringProp>
                        <stringProp name="RegexExtractor.template">$2$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;community.id :: &apos; + vars.get(&quot;community.id&quot;));</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] communitycreate - get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/html/communitycreate</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get nonce" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                        <stringProp name="RegexExtractor.regex">(var dangerousurlnonce = &quot;(.*)&quot;;)</stringProp>
                        <stringProp name="RegexExtractor.template">$2$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&quot;security.nonce :: &quot; + vars.get(&quot;security.nonce&quot;));

 </stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] add restricted community" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="members" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">members</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="owners" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">owners</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="memberemails" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">memberemails</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="owneremails" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">owneremails</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                            <stringProp name="Argument.value">${community1.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="publicAccess" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">publicAccess</stringProp>
                            <stringProp name="Argument.value">privateAccess</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="externalAccess" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">externalAccess</stringProp>
                            <stringProp name="Argument.value">allowExternal</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">description</stringProp>
                            <stringProp name="Argument.value">&lt;p dir=&quot;ltr&quot;&gt;allows external and guests ${community1.content}&lt;/p&gt;&#xd; </stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="tagsList" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">tagsList</stringProp>
                            <stringProp name="Argument.value">jmeter ${runLabel}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="owners_P" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">owners_P</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="authors_P" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">authors_P</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="owners_PE" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">owners_PE</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="authors_PE" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">authors_PE</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="owners_G" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">owners_G</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="authors_G" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">authors_G</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="owners_C" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">owners_C</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="authors_C" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">authors_C</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="bhc_PeopleTypeAhead" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">bhc_PeopleTypeAhead</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="submit" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">submit</stringProp>
                            <stringProp name="Argument.value">Save</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/html/communityaddsubmit?X-Update-Nonce=${security.nonce}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create community values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;community1.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER RESTRICTED TEST COMMUNITY&quot;);
vars.put(&quot;community1.content&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....allows external&quot;);
</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get community id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">community1.id</stringProp>
                        <stringProp name="RegexExtractor.regex">(resourceId=(.*)&quot;;)</stringProp>
                        <stringProp name="RegexExtractor.template">$2$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;community1.id :: &apos; + vars.get(&quot;community1.id&quot;));</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] community add member ${user_2}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_2}&lt;/email&gt;
        &lt;snx:userid&gt;${user_2.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="49587">201</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] community add member ${user_3}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_3}&lt;/email&gt;
        &lt;snx:userid&gt;${user_3.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="49587">201</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] restricted community add member ${user_2}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_2}&lt;/email&gt;
        &lt;snx:userid&gt;${user_2.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community1.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="49587">201</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] restricted community add member ${user_3}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_3}&lt;/email&gt;
        &lt;snx:userid&gt;${user_3.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community1.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="49587">201</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC]  restricted community add guest member ${user_4}" enabled="true">
                      <stringProp name="IfController.condition">&quot;${add.guest.user}&quot; == &quot;true&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] restricted community add guest member ${user_4}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_4}&lt;/email&gt;
        &lt;snx:userid&gt;${user_4.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community1.id}</stringProp>
                        <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="49587">201</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] restricted community add ext member ${user_5}" enabled="true">
                      <stringProp name="IfController.condition">&quot;${use.external.user}&quot; == &quot;true&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] restricted community add ext member ${user_5}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_5}&lt;/email&gt;
        &lt;snx:userid&gt;${user_5.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community1.id}</stringProp>
                        <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="49587">201</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user2 follow community" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/communities</stringProp>
                          <stringProp name="Authorization.username">${user_2}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_2}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_2.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow community" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry&gt;
    &lt;id&gt;urn:lsid:ibm.com:follow:resource-${community.id}&lt;/id&gt;
    &lt;category term=&quot;resource-follow&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;communities&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/source&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;${community.id}&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-id&quot;&gt;
    &lt;/category&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/follow/atom/resources?source=communities&amp;type=community</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow community1  - restricted community" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry&gt;
    &lt;id&gt;urn:lsid:ibm.com:follow:resource-${community.id}&lt;/id&gt;
    &lt;category term=&quot;resource-follow&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;communities&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/source&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;${community1.id}&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-id&quot;&gt;
    &lt;/category&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/follow/atom/resources?source=communities&amp;type=community</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user3 follow community" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/communities</stringProp>
                          <stringProp name="Authorization.username">${user_2}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_3.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow community" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry&gt;
    &lt;id&gt;urn:lsid:ibm.com:follow:resource-${community.id}&lt;/id&gt;
    &lt;category term=&quot;resource-follow&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;communities&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/source&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;${community.id}&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-id&quot;&gt;
    &lt;/category&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/follow/atom/resources?source=communities&amp;type=community</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow community1  - restricted community" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry&gt;
    &lt;id&gt;urn:lsid:ibm.com:follow:resource-${community.id}&lt;/id&gt;
    &lt;category term=&quot;resource-follow&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;communities&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/source&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;${community1.id}&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-id&quot;&gt;
    &lt;/category&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/follow/atom/resources?source=communities&amp;type=community</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] guest user4 follow community" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/communities</stringProp>
                          <stringProp name="Authorization.username">${user_2}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_4}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_4.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow community" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry&gt;
    &lt;id&gt;urn:lsid:ibm.com:follow:resource-${community.id}&lt;/id&gt;
    &lt;category term=&quot;resource-follow&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;communities&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/source&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;${community.id}&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-id&quot;&gt;
    &lt;/category&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/follow/atom/resources?source=communities&amp;type=community</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow community1  - restricted community" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry&gt;
    &lt;id&gt;urn:lsid:ibm.com:follow:resource-${community.id}&lt;/id&gt;
    &lt;category term=&quot;resource-follow&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;communities&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/source&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;${community1.id}&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-id&quot;&gt;
    &lt;/category&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/follow/atom/resources?source=communities&amp;type=community</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] ext user5 follow community" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/communities</stringProp>
                          <stringProp name="Authorization.username">${user_2}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_5}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_5}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_5.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow community" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry&gt;
    &lt;id&gt;urn:lsid:ibm.com:follow:resource-${community.id}&lt;/id&gt;
    &lt;category term=&quot;resource-follow&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;communities&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/source&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;${community.id}&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-id&quot;&gt;
    &lt;/category&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/follow/atom/resources?source=communities&amp;type=community</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow community1  - restricted community" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry&gt;
    &lt;id&gt;urn:lsid:ibm.com:follow:resource-${community.id}&lt;/id&gt;
    &lt;category term=&quot;resource-follow&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;communities&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/source&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-type&quot;&gt;&lt;/category&gt;
    &lt;category term=&quot;${community1.id}&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/resource-id&quot;&gt;
    &lt;/category&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">communities/follow/atom/resources?source=communities&amp;type=community</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get community file library details" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">files/basic/api/communitylibrary/${community.id}/feed</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XPath] get file urn" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">community.files.etag</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:feed/td:uuid</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;community.files.etag :: [&apos; + vars.get(&quot;community.files.etag&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] add file to community" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:td=&quot;urn:ibm.com/td&quot;&gt;
    &lt;title type=&quot;text&quot;&gt;${community.file.name}&lt;/title&gt;
    &lt;td:label&gt;${community.file.name}&lt;/td:label&gt;
    &lt;content type=&quot;text&quot;&gt;I&apos;m a blank file.&lt;/content&gt;
    &lt;summary type=&quot;text&quot;&gt;I&apos;m a blank file.&lt;/summary&gt;
    &lt;td:visibility&gt;public&lt;/td:visibility&gt;
    &lt;td:notification&gt;true&lt;/td:notification&gt;
    &lt;td:propagate&gt;true&lt;/td:propagate&gt;
    &lt;category term=&quot;&quot;/&gt;
    &lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;document&quot; label=&quot;document&quot;/&gt;
&lt;/entry&gt;

</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/basic/api/library/${community.files.etag}/feed?category=document</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XPath] get file id" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">community.file.id</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/td:uuid</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XPath] get file urn" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">community.file.urn</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XPath] get file library id" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">community.file.library.id</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/td:libraryId</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;community.file.id :: [&apos; + vars.get(&quot;community.file.id&quot;) + &apos;]&apos;);
log.info(&apos;community.file.urn :: [&apos; + vars.get(&quot;community.file.urn&quot;) + &apos;]&apos;);
log.info(&apos;community.file.library.id :: [&apos; + vars.get(&quot;community.file.library.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT COMMUNITIES] memberRemoved - User 1 removes user 3 from community" enabled="true"/>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/communities</stringProp>
                        <stringProp name="Authorization.username">${user_1}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] communities/service/atom/service" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/service</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    <stringProp name="TestPlan.comments">get Communities service document</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] communities/service/atom/communities/my" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/communities/my</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    <stringProp name="TestPlan.comments">get Communities service document</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] community - get member list" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] community remove member ${user_3}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">DELETE</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community.id}&amp;userid=${user_3.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout  ${user_1}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="496348869">#3# Logout Controller</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT COMMUNITIES] memberAdd user_3 again" enabled="true"/>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/communities</stringProp>
                        <stringProp name="Authorization.username">${user_1}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] community add member ${user_3}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_3}&lt;/email&gt;
        &lt;snx:userid&gt;${user_3.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${community.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT COMMUNITIES&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FILES TESTS" enabled="true">
                <stringProp name="IfController.condition">&quot;${files.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;START UT FILES&quot;);
log.info(&quot;START UT FILES&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] upload file tests" enabled="true">
                  <stringProp name="IfController.condition">&quot;${files.tests.run}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT FILES]  internal user upload file" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                          <stringProp name="Authorization.username">${user_2}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_2}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_2.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="self" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">self</stringProp>
                          </elementProp>
                          <elementProp name="format" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">json</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">format</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/files/form/api/people/feed</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="JSON Format Post Processor" enabled="true"/>
                      <hashTree/>
                      <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get nonce" enabled="true">
                        <stringProp name="VAR">security.nonce</stringProp>
                        <stringProp name="JSONPATH">items[0].nonce</stringProp>
                        <stringProp name="DEFAULT"></stringProp>
                      </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&quot;security.nonce is &quot; + vars.get(&quot;security.nonce&quot;));</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] upload file" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="format" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">html</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">format</stringProp>
                          </elementProp>
                          <elementProp name="opId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">upload,${file.name},1409144434549</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">opId</stringProp>
                          </elementProp>
                          <elementProp name="nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nonce</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="propagate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">propagate</stringProp>
                          </elementProp>
                          <elementProp name="notification" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">on</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">notification</stringProp>
                          </elementProp>
                          <elementProp name="label" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${file.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">label</stringProp>
                          </elementProp>
                          <elementProp name="tag" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">tag1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tag</stringProp>
                          </elementProp>
                          <elementProp name="visibility" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">public</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">visibility</stringProp>
                          </elementProp>
                          <elementProp name="shareSummary" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">shareSummary</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/files/form/api/myuserlibrary/feed</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${files.upload.file.path}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${files.upload.file.path}</stringProp>
                            <stringProp name="File.paramname">file</stringProp>
                            <stringProp name="File.mimetype"></stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Update-Nonce</stringProp>
                            <stringProp name="Header.value">${security.nonce}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create file  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;file.name&quot;, &quot;${runLabel}&quot; + &quot;_1_&quot; + &quot;${files.upload.file.name}&quot; );</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Item Exists" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-698589841">ItemExists</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">6</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">file.id</stringProp>
                        <stringProp name="RegexExtractor.regex">(urn:lsid:ibm.com:td:(.*?)&amp;quot)</stringProp>
                        <stringProp name="RegexExtractor.template">$2$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file library id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">file.library.id</stringProp>
                        <stringProp name="RegexExtractor.regex">(files/form/api/library/(.*?)/document)</stringProp>
                        <stringProp name="RegexExtractor.template">$2$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&quot;file.id is &quot; + vars.get(&quot;file.id&quot;));
log.info(&quot;file.library.id is &quot; + vars.get(&quot;file.library.id&quot;));</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like file" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
  &lt;category term=&quot;recommendation&quot; label=&quot;recommendation&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot; /&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">files/form/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml;type=entry;charset=UTF-8</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] comment on  file" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:td=&quot;urn:ibm.com/td&quot;&gt;
    &lt;id&gt;ignored&lt;/id&gt;
    &lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;comment&quot; label=&quot;comment&quot;/&gt;
    &lt;title type=&quot;text&quot;&gt;${file.name}&lt;/title&gt;
    &lt;content type=&apos;text&apos;&gt;.JMETER TEST ${timestamp} ${runLabel}&lt;/content&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">files/basic/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] create public folder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
&lt;category term=&quot;collection&quot; label=&quot;collection&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;&gt;&lt;/category&gt;
&lt;label xmlns=&quot;urn:ibm.com/td&quot; makeUnique=&quot;true&quot;&gt;${folder.name}&lt;/label&gt;
&lt;title&gt;${folder.name}&lt;/title&gt;
&lt;summary type=&quot;text&quot;&gt;${folder.description}&lt;/summary&gt;
&lt;visibility xmlns=&quot;urn:ibm.com/td&quot;&gt;public&lt;/visibility&gt;
&lt;sharedWith xmlns=&quot;urn:ibm.com/td&quot;&gt;
&lt;member ca:id=&quot;all-authenticated-users&quot; xmlns=&quot;http://www.ibm.com/xmlns/prod/composite-applications/v1.0&quot; ca:type=&quot;virtual&quot; xmlns:ca=&quot;http://www.ibm.com/xmlns/prod/composite-applications/v1.0&quot; ca:role=&quot;contributor&quot;&gt;&lt;/member&gt;
&lt;/sharedWith&gt;
&lt;isExternal xmlns=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;true&lt;/isExternal&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">files/form/api/collections/feed</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create folder  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;folder.name&quot;, vars.get(&quot;timestamp&quot;) + &quot;_&quot; + vars.get(&quot;runLabel&quot;) + &quot;_1_JMETER_TEST_FOLDER&quot;);
vars.put(&quot;folder.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ public folder blah blah blah ....&quot;);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                      <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  folder.id1" enabled="true">
                        <stringProp name="XPathExtractor.default">-1</stringProp>
                        <stringProp name="XPathExtractor.refname">folder.id1</stringProp>
                        <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                        <boolProp name="XPathExtractor.validate">false</boolProp>
                        <boolProp name="XPathExtractor.tolerant">false</boolProp>
                        <boolProp name="XPathExtractor.namespace">true</boolProp>
                      </XPathExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] folder.id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">folder.id</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;td:uuid&gt;(.*)&lt;/td:uuid&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="49587">201</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;folder.id : [&apos; + vars.get(&quot;folder.id&quot;) + &apos;]&apos;);
log.info(&apos;folder.id1 : [&apos; + vars.get(&quot;folder.id1&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] guest user_4 follow public folder" enabled="false"/>
                    <hashTree>
                      <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_4}" enabled="true">
                        <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="user.name" elementType="Argument">
                              <stringProp name="Argument.name">user.name</stringProp>
                              <stringProp name="Argument.value">${user_4}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="user.password" elementType="Argument">
                              <stringProp name="Argument.name">user.password</stringProp>
                              <stringProp name="Argument.value">${user_4.password}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                      </kg.apc.jmeter.control.ParameterizedController>
                      <hashTree>
                        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                          <collectionProp name="ModuleController.node_path">
                            <stringProp name="-1227702913">WorkBench</stringProp>
                            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                            <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                          </collectionProp>
                        </ModuleController>
                        <hashTree/>
                      </hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow shared folder" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;notifications xmlns=&quot;urn:ibm.com/td&quot;&gt;
        &lt;filesAdded&gt;on&lt;/filesAdded&gt;
    &lt;/notifications&gt;
&lt;/entry&gt;</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">files/form/api/collection/${folder.id}/entry</stringProp>
                        <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                          <collectionProp name="AuthManager.auth_list">
                            <elementProp name="" elementType="Authorization">
                              <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                              <stringProp name="Authorization.username">${user_2}</stringProp>
                              <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                              <stringProp name="Authorization.domain"></stringProp>
                              <stringProp name="Authorization.realm"></stringProp>
                            </elementProp>
                          </collectionProp>
                        </AuthManager>
                        <hashTree/>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Update-Nonce</stringProp>
                              <stringProp name="Header.value">true</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Method-Override</stringProp>
                              <stringProp name="Header.value">PUT</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] &lt;td:filesAdded&gt;on&lt;/td:filesAdded&gt;" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-1658506588">&lt;td:filesAdded&gt;on&lt;/td:filesAdded&gt;</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-795477064">[SC] Logout</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] ext user_5 follow public folder" enabled="false"/>
                    <hashTree>
                      <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_5}" enabled="true">
                        <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="user.name" elementType="Argument">
                              <stringProp name="Argument.name">user.name</stringProp>
                              <stringProp name="Argument.value">${user_5}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="user.password" elementType="Argument">
                              <stringProp name="Argument.name">user.password</stringProp>
                              <stringProp name="Argument.value">${user_5.password}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                      </kg.apc.jmeter.control.ParameterizedController>
                      <hashTree>
                        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                          <collectionProp name="ModuleController.node_path">
                            <stringProp name="-1227702913">WorkBench</stringProp>
                            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                            <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                          </collectionProp>
                        </ModuleController>
                        <hashTree/>
                      </hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow shared folder" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;notifications xmlns=&quot;urn:ibm.com/td&quot;&gt;
        &lt;filesAdded&gt;on&lt;/filesAdded&gt;
    &lt;/notifications&gt;
&lt;/entry&gt;</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">files/form/api/collection/${folder.id}/entry</stringProp>
                        <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                          <collectionProp name="AuthManager.auth_list">
                            <elementProp name="" elementType="Authorization">
                              <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                              <stringProp name="Authorization.username">${user_2}</stringProp>
                              <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                              <stringProp name="Authorization.domain"></stringProp>
                              <stringProp name="Authorization.realm"></stringProp>
                            </elementProp>
                          </collectionProp>
                        </AuthManager>
                        <hashTree/>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Update-Nonce</stringProp>
                              <stringProp name="Header.value">true</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Method-Override</stringProp>
                              <stringProp name="Header.value">PUT</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] &lt;td:filesAdded&gt;on&lt;/td:filesAdded&gt;" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-1658506588">&lt;td:filesAdded&gt;on&lt;/td:filesAdded&gt;</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-795477064">[SC] Logout</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_2}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_2.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] move file to public folder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;feed xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;entry&gt;
        &lt;category term=&quot;collection&quot; label=&quot;collection&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;/&gt;
        &lt;sharePermission xmlns=&quot;urn:ibm.com/td&quot;&gt;Edit&lt;/sharePermission&gt;
        &lt;itemId xmlns=&quot;urn:ibm.com/td&quot;&gt;${folder.id}&lt;/itemId&gt;
    &lt;/entry&gt;
&lt;/feed&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">files/form/api/myuserlibrary/document/${file.id}/feed</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] internal like file" enabled="true"/>
                    <hashTree>
                      <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                        <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="user.name" elementType="Argument">
                              <stringProp name="Argument.name">user.name</stringProp>
                              <stringProp name="Argument.value">${user_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="user.password" elementType="Argument">
                              <stringProp name="Argument.name">user.password</stringProp>
                              <stringProp name="Argument.value">${user_1.password}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                      </kg.apc.jmeter.control.ParameterizedController>
                      <hashTree>
                        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                          <collectionProp name="ModuleController.node_path">
                            <stringProp name="-1227702913">WorkBench</stringProp>
                            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                            <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                          </collectionProp>
                        </ModuleController>
                        <hashTree/>
                      </hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like file" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
  &lt;category term=&quot;recommendation&quot; label=&quot;recommendation&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot; /&gt;
&lt;/entry&gt;</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">files/form/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                        <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml;type=entry;charset=UTF-8</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                          <collectionProp name="AuthManager.auth_list">
                            <elementProp name="" elementType="Authorization">
                              <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                              <stringProp name="Authorization.username">${user_1}</stringProp>
                              <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                              <stringProp name="Authorization.domain"></stringProp>
                              <stringProp name="Authorization.realm"></stringProp>
                            </elementProp>
                          </collectionProp>
                        </AuthManager>
                        <hashTree/>
                        <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-795477064">[SC] Logout</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] guest like file" enabled="true"/>
                    <hashTree>
                      <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_4}" enabled="true">
                        <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="user.name" elementType="Argument">
                              <stringProp name="Argument.name">user.name</stringProp>
                              <stringProp name="Argument.value">${user_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="user.password" elementType="Argument">
                              <stringProp name="Argument.name">user.password</stringProp>
                              <stringProp name="Argument.value">${user_1.password}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                      </kg.apc.jmeter.control.ParameterizedController>
                      <hashTree>
                        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                          <collectionProp name="ModuleController.node_path">
                            <stringProp name="-1227702913">WorkBench</stringProp>
                            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                            <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                          </collectionProp>
                        </ModuleController>
                        <hashTree/>
                      </hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like file" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
  &lt;category term=&quot;recommendation&quot; label=&quot;recommendation&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot; /&gt;
&lt;/entry&gt;</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">files/form/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                        <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml;type=entry;charset=UTF-8</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                          <collectionProp name="AuthManager.auth_list">
                            <elementProp name="" elementType="Authorization">
                              <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                              <stringProp name="Authorization.username">${user_1}</stringProp>
                              <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                              <stringProp name="Authorization.domain"></stringProp>
                              <stringProp name="Authorization.realm"></stringProp>
                            </elementProp>
                          </collectionProp>
                        </AuthManager>
                        <hashTree/>
                        <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-795477064">[SC] Logout</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] external like file" enabled="true"/>
                    <hashTree>
                      <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login external ${user_5}" enabled="true">
                        <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="user.name" elementType="Argument">
                              <stringProp name="Argument.name">user.name</stringProp>
                              <stringProp name="Argument.value">${user_5}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="user.password" elementType="Argument">
                              <stringProp name="Argument.name">user.password</stringProp>
                              <stringProp name="Argument.value">${user_5.password}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                      </kg.apc.jmeter.control.ParameterizedController>
                      <hashTree>
                        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                          <collectionProp name="ModuleController.node_path">
                            <stringProp name="-1227702913">WorkBench</stringProp>
                            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                            <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                          </collectionProp>
                        </ModuleController>
                        <hashTree/>
                      </hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like file" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
  &lt;category term=&quot;recommendation&quot; label=&quot;recommendation&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot; /&gt;
&lt;/entry&gt;</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">files/form/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                        <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml;type=entry;charset=UTF-8</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                          <collectionProp name="AuthManager.auth_list">
                            <elementProp name="" elementType="Authorization">
                              <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                              <stringProp name="Authorization.username">${user_1}</stringProp>
                              <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                              <stringProp name="Authorization.domain"></stringProp>
                              <stringProp name="Authorization.realm"></stringProp>
                            </elementProp>
                          </collectionProp>
                        </AuthManager>
                        <hashTree/>
                        <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-795477064">[SC] Logout</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT FILES]  user3 upload file,create private folder, share folder, follow folder, add file to folder" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                          <stringProp name="Authorization.username">${user_3}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_3.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="self" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">self</stringProp>
                          </elementProp>
                          <elementProp name="format" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">json</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">format</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/files/form/api/people/feed</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="/home/decarey/MyNotes/buildConnectionsFE.sh" elementType="HTTPFileArg">
                            <stringProp name="File.path">/home/decarey/MyNotes/buildConnectionsFE.sh</stringProp>
                            <stringProp name="File.paramname"></stringProp>
                            <stringProp name="File.mimetype"></stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="JSON Format Post Processor" enabled="true"/>
                      <hashTree/>
                      <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get nonce" enabled="true">
                        <stringProp name="VAR">security.nonce</stringProp>
                        <stringProp name="JSONPATH">items[0].nonce</stringProp>
                        <stringProp name="DEFAULT"></stringProp>
                      </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&quot;security.nonce is &quot; + vars.get(&quot;security.nonce&quot;));</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] upload file" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="format" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">html</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">format</stringProp>
                          </elementProp>
                          <elementProp name="opId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">upload,${file.name},1409144434549</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">opId</stringProp>
                          </elementProp>
                          <elementProp name="nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nonce</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="propagate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">propagate</stringProp>
                          </elementProp>
                          <elementProp name="notification" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">on</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">notification</stringProp>
                          </elementProp>
                          <elementProp name="label" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${file.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">label</stringProp>
                          </elementProp>
                          <elementProp name="tag" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">tag1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tag</stringProp>
                          </elementProp>
                          <elementProp name="visibility" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">public</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">visibility</stringProp>
                          </elementProp>
                          <elementProp name="shareSummary" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">shareSummary</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/files/form/api/myuserlibrary/feed</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                        <collectionProp name="HTTPFileArgs.files">
                          <elementProp name="${files.upload.file.path}" elementType="HTTPFileArg">
                            <stringProp name="File.path">${files.upload.file.path}</stringProp>
                            <stringProp name="File.paramname">file</stringProp>
                            <stringProp name="File.mimetype"></stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Update-Nonce</stringProp>
                            <stringProp name="Header.value">${security.nonce}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create file  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;file.name&quot;, &quot;${runLabel}&quot; + &quot;_&quot; + &quot;${files.upload.file.name}&quot; );</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Item Exists" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-698589841">ItemExists</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">6</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">file.id</stringProp>
                        <stringProp name="RegexExtractor.regex">(urn:lsid:ibm.com:td:(.*?)&amp;quot)</stringProp>
                        <stringProp name="RegexExtractor.template">$2$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&quot;file.id is &quot; + vars.get(&quot;file.id&quot;));</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] create private folder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;category term=&quot;collection&quot; label=&quot;collection&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;/&gt;
    &lt;label xmlns=&quot;urn:ibm.com/td&quot; makeUnique=&quot;true&quot;&gt;${folder.name}&lt;/label&gt;
    &lt;title&gt;${folder.name}&lt;/title&gt;
    &lt;summary type=&quot;text&quot;&gt;${folder.description}&lt;/summary&gt;
    &lt;visibility xmlns=&quot;urn:ibm.com/td&quot;&gt;private&lt;/visibility&gt;
    &lt;sharedWith xmlns=&quot;urn:ibm.com/td&quot;/&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">files/form/api/collections/feed</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create folder  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;folder.name&quot;, vars.get(&quot;timestamp&quot;) + &quot;_&quot; + vars.get(&quot;runLabel&quot;) + &quot;_JMETER_TEST_FOLDER&quot;);
vars.put(&quot;folder.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ private folder blah blah blah ....&quot;);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                      <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex]  folder.id1" enabled="true">
                        <stringProp name="XPathExtractor.default">-1</stringProp>
                        <stringProp name="XPathExtractor.refname">folder.id1</stringProp>
                        <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                        <boolProp name="XPathExtractor.validate">false</boolProp>
                        <boolProp name="XPathExtractor.tolerant">false</boolProp>
                        <boolProp name="XPathExtractor.namespace">true</boolProp>
                      </XPathExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] folder.id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">folder.id</stringProp>
                        <stringProp name="RegexExtractor.regex">&lt;td:uuid&gt;(.*)&lt;/td:uuid&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="49587">201</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;folder.id : [&apos; + vars.get(&quot;folder.id&quot;) + &apos;]&apos;);
log.info(&apos;folder.id1 : [&apos; + vars.get(&quot;folder.id1&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] share private folder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;feed xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;entry&gt;
        &lt;content xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot; atom:type=&quot;application/xml&quot;&gt;
            &lt;role xmlns=&quot;http://www.ibm.com/xmlns/prod/composite-applications/v1.0&quot;
                  xmlns:ca=&quot;http://www.ibm.com/xmlns/prod/composite-applications/v1.0&quot; ca:type=&quot;reader&quot;&gt;
                &lt;member ca:id=&quot;${user_2.id}&quot; ca:type=&quot;user&quot;/&gt;
            &lt;/role&gt;
        &lt;/content&gt;
    &lt;/entry&gt;
&lt;/feed&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">files/form/api/collection/${folder.id}/roles</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user_2 follow shared folder" enabled="true"/>
                    <hashTree>
                      <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                        <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="user.name" elementType="Argument">
                              <stringProp name="Argument.name">user.name</stringProp>
                              <stringProp name="Argument.value">${user_2}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="user.password" elementType="Argument">
                              <stringProp name="Argument.name">user.password</stringProp>
                              <stringProp name="Argument.value">${user_2.password}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                      </kg.apc.jmeter.control.ParameterizedController>
                      <hashTree>
                        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                          <collectionProp name="ModuleController.node_path">
                            <stringProp name="-1227702913">WorkBench</stringProp>
                            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                            <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                          </collectionProp>
                        </ModuleController>
                        <hashTree/>
                      </hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] follow shared folder" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;notifications xmlns=&quot;urn:ibm.com/td&quot;&gt;
        &lt;filesAdded&gt;on&lt;/filesAdded&gt;
    &lt;/notifications&gt;
&lt;/entry&gt;</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">files/form/api/collection/${folder.id}/entry</stringProp>
                        <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                          <collectionProp name="AuthManager.auth_list">
                            <elementProp name="" elementType="Authorization">
                              <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                              <stringProp name="Authorization.username">${user_2}</stringProp>
                              <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                              <stringProp name="Authorization.domain"></stringProp>
                              <stringProp name="Authorization.realm"></stringProp>
                            </elementProp>
                          </collectionProp>
                        </AuthManager>
                        <hashTree/>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Update-Nonce</stringProp>
                              <stringProp name="Header.value">true</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Method-Override</stringProp>
                              <stringProp name="Header.value">PUT</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] &lt;td:filesAdded&gt;on&lt;/td:filesAdded&gt;" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-1658506588">&lt;td:filesAdded&gt;on&lt;/td:filesAdded&gt;</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-795477064">[SC] Logout</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user_3 move file to shared folder" enabled="true"/>
                    <hashTree>
                      <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                        <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="user.name" elementType="Argument">
                              <stringProp name="Argument.name">user.name</stringProp>
                              <stringProp name="Argument.value">${user_3}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="user.password" elementType="Argument">
                              <stringProp name="Argument.name">user.password</stringProp>
                              <stringProp name="Argument.value">${user_3.password}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                      </kg.apc.jmeter.control.ParameterizedController>
                      <hashTree>
                        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                          <collectionProp name="ModuleController.node_path">
                            <stringProp name="-1227702913">WorkBench</stringProp>
                            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                            <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                          </collectionProp>
                        </ModuleController>
                        <hashTree/>
                      </hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] move file to shared folder" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;feed xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
    &lt;entry&gt;
        &lt;category term=&quot;collection&quot; label=&quot;collection&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;/&gt;
        &lt;sharePermission xmlns=&quot;urn:ibm.com/td&quot;&gt;Edit&lt;/sharePermission&gt;
        &lt;itemId xmlns=&quot;urn:ibm.com/td&quot;&gt;${folder.id}&lt;/itemId&gt;
    &lt;/entry&gt;
&lt;/feed&gt;</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">files/form/api/myuserlibrary/document/${file.id}/feed</stringProp>
                        <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                          <collectionProp name="AuthManager.auth_list">
                            <elementProp name="" elementType="Authorization">
                              <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                              <stringProp name="Authorization.username">${user_3}</stringProp>
                              <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                              <stringProp name="Authorization.domain"></stringProp>
                              <stringProp name="Authorization.realm"></stringProp>
                            </elementProp>
                          </collectionProp>
                        </AuthManager>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-795477064">[SC] Logout</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT FILES]  commentAdd - user3 comments on file of user 1" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                          <stringProp name="Authorization.username">${user_3}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_3.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] comment on  file" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:td=&quot;urn:ibm.com/td&quot;&gt;
    &lt;id&gt;${community.file.urn}&lt;/id&gt;
    &lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;comment&quot; label=&quot;comment&quot;/&gt;
    &lt;title type=&quot;text&quot;&gt;${community.file.name}&lt;/title&gt;
    &lt;content type=&apos;text&apos;&gt;${community.comment.text}&lt;/content&gt;
&lt;/entry&gt;</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">files/basic/api/library/${community.file.library.id}/document/${community.file.id}/feed</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="496348869">#3# Logout Controller</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT FILES&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] MICROBLOG TEST" enabled="true">
                <stringProp name="IfController.condition">&quot;${microblog.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;START UT MICROBLOG&quot;);
log.info(&quot;START UT MICROBLOG&quot;);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT MICROBLOG] post " enabled="true"/>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 1 - post1" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/connections</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] post microblog" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot; ... Hello from JMETER! ${runLabel} @${__time(HMS)}...&quot;}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/${user_1.id}/@all</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type : application/json
X-Requested-With : XMLHttpRequest</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                      <hashTree/>
                      <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                        <stringProp name="VAR">microblog.id</stringProp>
                        <stringProp name="JSONPATH">entry.id</stringProp>
                        <stringProp name="DEFAULT"></stringProp>
                      </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;microblog.id : [&apos; + vars.get(&quot;microblog.id&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like microblog" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">
</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/@all/@all/${microblog.id}/likes</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type : application/json
X-Requested-With : XMLHttpRequest</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] user 4 post microblog" enabled="true">
                    <stringProp name="IfController.condition">&quot;${add.guest.user}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/connections</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_4}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_4.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] post microblog" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot; ... Hello from JMETER! ${runLabel} @${__time(HMS)}...&quot;}
</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/${user_4.id}/@all</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get microblog id" enabled="true">
                        <stringProp name="VAR">microblog.guest.id</stringProp>
                        <stringProp name="JSONPATH">entry.id</stringProp>
                        <stringProp name="DEFAULT"></stringProp>
                      </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&quot;microblog.id is &quot; + vars.get(&quot;microblog.id&quot;));</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like microblog" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">
</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/@all/@all/${microblog.guest.id}/likes</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] post with @mentions" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/connections</stringProp>
                          <stringProp name="Authorization.username">${user_2}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like microblog" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">
</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/@all/@all/${microblog.id}/likes</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] post microblog with @mentions" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot;hi there, &lt;span class=\&quot;vcard\&quot;&gt;&lt;span class=\&quot;fn\&quot;&gt;@Will Do3&lt;/span&gt;&lt;span class=\&quot;x-lconn-userid\&quot;&gt;${user_3.id}&lt;/span&gt;&lt;/span&gt;, story?&quot;}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/${user_1.id}/@all</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get microblog id" enabled="true">
                        <stringProp name="VAR">microblog1.id</stringProp>
                        <stringProp name="JSONPATH">entry.id</stringProp>
                        <stringProp name="DEFAULT"></stringProp>
                      </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&quot;microblog1.id is &quot; + vars.get(&quot;microblog1.id&quot;));</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] post microblog with @mentions guest user" enabled="true">
                      <stringProp name="IfController.condition">&quot;${add.guest.user}&quot; == &quot;true&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] post microblog with @mentions guest user" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot;hi there, &lt;span class=\&quot;vcard\&quot;&gt;&lt;span class=\&quot;fn\&quot;&gt;@JCguest&lt;/span&gt;&lt;span class=\&quot;x-lconn-userid\&quot;&gt;${user_4.id}&lt;/span&gt;&lt;/span&gt;, story?&quot;}</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/${user_1.id}/@all</stringProp>
                        <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get microblog id" enabled="true">
                          <stringProp name="VAR">microblog1.guest.id</stringProp>
                          <stringProp name="JSONPATH">entry.id</stringProp>
                          <stringProp name="DEFAULT"></stringProp>
                        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                        <hashTree/>
                        <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                          <stringProp name="scriptLanguage">javascript</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">log.info(&quot;microblog1.guest.id is &quot; + vars.get(&quot;microblog1.guest.id&quot;));</stringProp>
                        </BSFPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] post microblog with @mentions ext user" enabled="true">
                      <stringProp name="IfController.condition">&quot;${use.external.user}&quot; == &quot;true&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] post microblog with @mentions ext user" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot;hi there, &lt;span class=\&quot;vcard\&quot;&gt;&lt;span class=\&quot;fn\&quot;&gt;@Bill Ext1&lt;/span&gt;&lt;span class=\&quot;x-lconn-userid\&quot;&gt;${user_5.id}&lt;/span&gt;&lt;/span&gt;, story?&quot;}</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/${user_1.id}/@all</stringProp>
                        <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                        <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get microblog id" enabled="true">
                          <stringProp name="VAR">microblog1.ext.id</stringProp>
                          <stringProp name="JSONPATH">entry.id</stringProp>
                          <stringProp name="DEFAULT"></stringProp>
                        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                        <hashTree/>
                        <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                          <stringProp name="scriptLanguage">javascript</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">log.info(&quot;microblog1.ext.id is &quot; + vars.get(&quot;microblog1.ext.id&quot;));</stringProp>
                        </BSFPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] post with @mentions and url preview" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/connections</stringProp>
                          <stringProp name="Authorization.username">${user_2}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] post microblog with @mentions + url preview" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot; http://www.ibm.com &lt;span class=\&quot;vcard\&quot;&gt;&lt;span class=\&quot;fn\&quot;&gt;@fvt2 hpdev&lt;/span&gt;&lt;span class=\&quot;x-lconn-userid\&quot;&gt;${user_2.id}&lt;/span&gt;&lt;/span&gt; great website&quot;,&quot;attachments&quot;:[{&quot;objectType&quot;:&quot;link&quot;,&quot;displayName&quot;:&quot;IBM - United States&quot;,&quot;url&quot;:&quot;http://www.ibm.com/us/en/&quot;,&quot;summary&quot;:&quot;For more than a century IBM has been dedicated to every client&apos;s success and to creating innovations that matter for the world&quot;,&quot;image&quot;:{&quot;url&quot;:&quot;{thumbnail}/api/imageProxy?url=http%3a%2f%2fwww.ibm.com%2fimages%2fportal%2fH878951C10974G18%2ftri_logo_black_angle_1.jpg&amp;maxHeight=180&amp;maxWidth=180&quot;,&quot;alt&quot;:&quot;IBM - United States&quot;}}]}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/${user_1.id}/@all</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get microblog id" enabled="true">
                        <stringProp name="VAR">microblog2.id</stringProp>
                        <stringProp name="JSONPATH">entry.id</stringProp>
                        <stringProp name="DEFAULT"></stringProp>
                      </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&quot;microblog2.id is &quot; + vars.get(&quot;microblog2.id&quot;));</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 3 - comment on post" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/connections</stringProp>
                          <stringProp name="Authorization.username">${user_3}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_3.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] comment microblog" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot;  comment from JMETER! ${runLabel} @${__time(HMS)}...&quot;}
</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/@all/@all/${microblog.id}/comments</stringProp>
                      <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                      <stringProp name="RestSampler.request_headers">Content-Type : application/json
X-Requested-With : XMLHttpRequest</stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree/>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_3}" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT MICROBLOG&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] BLOGS TEST" enabled="true">
                <stringProp name="IfController.condition">&quot;${blogs.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;START UT BLOGS&quot;);
log.info(&quot;START UT BLOGS&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT BLOGS]  notify - (has notified you about the blog entry)" enabled="true">
                  <stringProp name="TestPlan.comments">has notified you about the blog entry</stringProp>
                </GenericController>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/blogs</stringProp>
                        <stringProp name="Authorization.username">${user_1}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="communityUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">communityUuid</stringProp>
                          <stringProp name="Argument.value">${community.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">communities/service/html/communitystart?communityUuid=${community.id}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">(var dangerousurlnonce = &quot;(.*)&quot;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;security.nonce :: &apos; + vars.get(&quot;security.nonce&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get widget info" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="communityUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">communityUuid</stringProp>
                          <stringProp name="Argument.value">${community.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">communities/widgetInfoPersistence.do?resourceType=community&amp;lang=en_US&amp;resourceId=${community.id}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] add blogs widget to community" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="resourceId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">resourceId</stringProp>
                        </elementProp>
                        <elementProp name="uiLocation" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">col2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uiLocation</stringProp>
                        </elementProp>
                        <elementProp name="unhide" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">unhide</stringProp>
                        </elementProp>
                        <elementProp name="widgetDefId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Blog</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">widgetDefId</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">communities/addWidget.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                      <collectionProp name="CookieManager.cookies">
                        <elementProp name="X-Update-Nonce" elementType="Cookie" testname="X-Update-Nonce">
                          <stringProp name="Cookie.value">${security.nonce}</stringProp>
                          <stringProp name="Cookie.domain"></stringProp>
                          <stringProp name="Cookie.path"></stringProp>
                          <boolProp name="Cookie.secure">false</boolProp>
                          <longProp name="Cookie.expires">0</longProp>
                          <boolProp name="Cookie.path_specified">true</boolProp>
                          <boolProp name="Cookie.domain_specified">true</boolProp>
                        </elementProp>
                      </collectionProp>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] widget.instance.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">widget.instance.id</stringProp>
                      <stringProp name="RegexExtractor.regex">widgetInstanceId=&quot;(.*)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;widget.instance.id : [&apos; + vars.get(&quot;widget.instance.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Add blog entry" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
        &lt;id&gt;&lt;/id&gt;
        &lt;title&gt;${entry.name}&lt;/title&gt;
         &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;entry&quot; label=&quot;Entry&quot; /&gt;
        &lt;content type=&quot;html&quot;&gt;&lt;![CDATA[&lt;div&gt;&lt;p&gt;${entry.description}&lt;/p&gt;&lt;/div&gt;]]&gt;&lt;/content&gt;
    &lt;/entry&gt;
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">blogs/${blog.handle}/api/entries</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    <stringProp name="TestPlan.comments">https://apps.basesandbox30.swg.usma.ibm.com/blogs/roller-ui/authoring/weblog.do?method=create&amp;weblog=a0969ad4-e8a9-4f9f-9b8e-3bdc40e9fa86&amp;lang=en_us</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create entry  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;blog.handle&quot;, vars.get(&quot;community.id&quot;));
vars.put(&quot;entry.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BLOG ENTRY&quot;);
vars.put(&quot;entry.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex] entry.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">entry.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] entry id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">entry.id</stringProp>
                      <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:blogs:entry-(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] entry handle" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">entry.handle</stringProp>
                      <stringProp name="RegexExtractor.regex">blogs/${blog.handle}/feed/entrycomments/(.+?)/atom</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;entry.id1 : [&apos; + vars.get(&quot;entry.id1&quot;) + &apos;]&apos;);
log.info(&apos;entry.id : [&apos; + vars.get(&quot;entry.id&quot;) + &apos;]&apos;);
log.info(&apos;entry.handle : [&apos; + vars.get(&quot;entry.handle&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Add comment to blog entry" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;
&lt;entry xmlns=&apos;http://www.w3.org/2005/Atom&apos; xmlns:thr=&quot;http://purl.org/syndication/thread/1.0&quot;&gt;
  &lt;id&gt;ignored&lt;/id&gt;
  &lt;title type=&apos;text&apos;&gt;ignored&lt;/title&gt;
  &lt;thr:in-reply-to ref=&quot;${entry.id1}&quot;/&gt;
  &lt;content type=&apos;html&apos;&gt;${comment.description}&lt;/content&gt;
&lt;/entry&gt; </stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">blogs/${blog.handle}/api/comments</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create entry  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;comment.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;runLabel1&quot;) + &quot; JMETER TEST BLOG COMMENT&quot;);
vars.put(&quot;comment.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;runLabel1&quot;)  + &quot;~ JMETER comment blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get securitynonce" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${http.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blogs/${blog.handle}/entry/${entry.handle}?lang=en</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="X-Update-Nonce Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">var t = &apos;nonce:\\&apos;(.+?)\\&apos;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;security.nonce : &apos; +vars.get(&quot;security.nonce&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] notify user2 and user3 of blog entry" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="version" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">version</stringProp>
                          <stringProp name="Argument.value">250</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="entry" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">entry</stringProp>
                          <stringProp name="Argument.value">${entry.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="dangerousurlnonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">dangerousurlnonce</stringProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="receivers" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">receivers</stringProp>
                          <stringProp name="Argument.value">&lt;${user_2.id}&gt;, &lt;${user_3.id}&gt;, </stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                          <stringProp name="Argument.value">Hi- I thought you all might be interested in this blog entry.</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="lang" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">en</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">lang</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">blogs/roller-services/json/notify</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA]  Your notifications have been sent" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1362522621">&apos;success&apos;:true</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT BLOGS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] BOOKMARK TESTS" enabled="true">
                <stringProp name="IfController.condition">&quot;${bookmarks.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;START UT BOOKMARKS&quot;);
log.info(&quot;START UT BOOKMARKS&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT BOOKMARKS]  create bookmark" enabled="true"/>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/dogear</stringProp>
                        <stringProp name="Authorization.username">${user_1}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] community bookmark page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/community/bookmarks?communityUuid=${community.id}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get nonce" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">dangerousurlnonce = &quot;(.*)&quot;;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] create bookmark" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="communityUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${community.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">communityUuid</stringProp>
                        </elementProp>
                        <elementProp name="type" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">bookmark</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">type</stringProp>
                        </elementProp>
                        <elementProp name="uri" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.url}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uri</stringProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.description}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                        </elementProp>
                        <elementProp name="homepage" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">homepage</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">homepage</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/bookmarkaddsubmit?returnto=community/bookmarks&amp;dangerousurlnonce=${security.nonce}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create bookmark  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;bookmark.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BOOKMARK&quot;);
vars.put(&quot;bookmark.url&quot;, &quot;http://www.imra.ie?p=&quot; +vars.get(&quot;runLabel&quot;));
vars.put(&quot;bookmark.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">log.info(&quot;END UT1 BOOKMARKS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </BSFSampler>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT BOOKMARKS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FORUMS TESTS" enabled="true">
                <stringProp name="IfController.condition">&quot;${forums.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;START UT FORUMS&quot;);
log.info(&quot;START UT FORUMS&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT FORUMS]  Public Community" enabled="true"/>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user1 create forum" enabled="true"/>
                  <hashTree>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] create forum" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="autoFollow" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">autoFollow</stringProp>
                          </elementProp>
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${forum.description}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">description</stringProp>
                          </elementProp>
                          <elementProp name="forumId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">forumId</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${forum.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createForum</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://${server.name}/communities/service/html/communityoverview?communityUuid=${community.id}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Update-Nonce</stringProp>
                            <stringProp name="Header.value">true</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create community.id - remove!!!!!" enabled="false">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;community.id&quot;,&quot;ef067155-cd07-43bf-9888-67729040db00&quot;);</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create forum  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;forum.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST FORUM&quot;);
vars.put(&quot;forum.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] forum.id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">forum.id</stringProp>
                        <stringProp name="RegexExtractor.regex">id=(.*)&amp;newCreated=true</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;forum.id : [&apos; + vars.get(&quot;forum.id&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user2 follow forum" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/dogear</stringProp>
                          <stringProp name="Authorization.username">${user_3}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_2}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_2.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] follow forum" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="subscribe" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">subscribe</stringProp>
                          </elementProp>
                          <elementProp name="forumId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${forum.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">forumId</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/subscribeForum</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;true&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Operation failed" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="263641398">Operation failed</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">6</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user3 follow forum" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/dogear</stringProp>
                          <stringProp name="Authorization.username">${user_3}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_3.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] follow forum" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="subscribe" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">subscribe</stringProp>
                          </elementProp>
                          <elementProp name="forumId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${forum.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">forumId</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/subscribeForum</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;true&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Operation failed" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="263641398">Operation failed</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">6</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user1 create forum topic" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/forums</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/json/communityview?communityUuid=${community.id}&amp;preventCache=1414681808789&amp;etag=20141021.174638&amp;suppress401=true </stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] security.nonce" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                        <stringProp name="RegexExtractor.regex">&amp;dangerousurlnonce=(.*)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] create topic" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="nodeId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nodeId</stringProp>
                          </elementProp>
                          <elementProp name="editUuid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">editUuid</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${forum.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="isXHR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isXHR</stringProp>
                          </elementProp>
                          <elementProp name="isAnswer" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isAnswer</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${topic.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                          <elementProp name="jsVar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">jsVar</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="insertImages" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">insertImages</stringProp>
                          </elementProp>
                          <elementProp name="joinCommunity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">joinCommunity</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createTopic</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] add nonce cookie " enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

String nonce=vars.get(&quot;security.nonce&quot;);
String server=vars.get(&quot;server.name&quot;);
log.info(&quot;adding X-Update-Nonce to cookies : &quot; + nonce);

cookie = new Cookie(&quot;X-Update-Nonce&quot;, nonce, server, &quot;&quot;, false, 2000000000);
manager.add(cookie);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create topic values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;topic.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST FORUM TOPIC&quot;);
vars.put(&quot;topic.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] topic.id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">topic.id</stringProp>
                        <stringProp name="RegexExtractor.regex">id=(.*)&apos;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;topic.id : [&apos; + vars.get(&quot;topic.id&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user1 reply to forum topic" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/forums</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login user_1" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/json/communityview?communityUuid=${community.id}&amp;preventCache=1414681808789&amp;etag=20141021.174638&amp;suppress401=true </stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] security.nonce" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                        <stringProp name="RegexExtractor.regex">&amp;dangerousurlnonce=(.*)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] reply to topic user_1" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="nodeId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nodeId</stringProp>
                          </elementProp>
                          <elementProp name="editUuid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">editUuid</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${topic.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="isXHR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isXHR</stringProp>
                          </elementProp>
                          <elementProp name="isAnswer" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isAnswer</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                          <elementProp name="jsVar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">jsVar</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="insertImages" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">insertImages</stringProp>
                          </elementProp>
                          <elementProp name="joinCommunity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">joinCommunity</stringProp>
                          </elementProp>
                          <elementProp name="description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.description}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">description</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createReply</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] add nonce cookie " enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

String nonce=vars.get(&quot;security.nonce&quot;);
String server=vars.get(&quot;server.name&quot;);
log.info(&quot;adding X-Update-Nonce to cookies : &quot; + nonce);

cookie = new Cookie(&quot;X-Update-Nonce&quot;, nonce, server, &quot;&quot;, false, 2000000000);
manager.add(cookie);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create reply  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;topic.reply.tag.user1&quot;, &quot;jmeter.topic.reply.tag.user1&quot;);
vars.put(&quot;reply.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;topic.reply.tag.user1&quot;));
vars.put(&quot;reply.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot; + &quot; &quot; + vars.get(&quot;topic.reply.tag.user1&quot;));

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user2 reply to forum topic" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/forums</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login user_2" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_2}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_2.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/json/communityview?communityUuid=${community.id}&amp;preventCache=1414681808789&amp;etag=20141021.174638&amp;suppress401=true </stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] security.nonce" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                        <stringProp name="RegexExtractor.regex">&amp;dangerousurlnonce=(.*)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] reply to topic user_2" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="nodeId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nodeId</stringProp>
                          </elementProp>
                          <elementProp name="editUuid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">editUuid</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${topic.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="isXHR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isXHR</stringProp>
                          </elementProp>
                          <elementProp name="isAnswer" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isAnswer</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                          <elementProp name="jsVar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">jsVar</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="insertImages" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">insertImages</stringProp>
                          </elementProp>
                          <elementProp name="joinCommunity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">joinCommunity</stringProp>
                          </elementProp>
                          <elementProp name="description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.description}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">description</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createReply</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] add nonce cookie " enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

String nonce=vars.get(&quot;security.nonce&quot;);
String server=vars.get(&quot;server.name&quot;);
log.info(&quot;adding X-Update-Nonce to cookies : &quot; + nonce);

cookie = new Cookie(&quot;X-Update-Nonce&quot;, nonce, server, &quot;&quot;, false, 2000000000);
manager.add(cookie);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create reply  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;topic.reply.tag.user2&quot;, &quot;jmeter.topic.reply.tag.user2&quot;);
vars.put(&quot;reply.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;topic.reply.tag.user2&quot;));
vars.put(&quot;reply.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot; + &quot; &quot; + vars.get(&quot;topic.reply.tag.user2&quot;));

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user3 reply to forum topic" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/forums</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login user_3" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_3.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/json/communityview?communityUuid=${community.id}&amp;preventCache=1414681808789&amp;etag=20141021.174638&amp;suppress401=true </stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] security.nonce" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                        <stringProp name="RegexExtractor.regex">&amp;dangerousurlnonce=(.*)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] reply to topic user_3" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="nodeId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nodeId</stringProp>
                          </elementProp>
                          <elementProp name="editUuid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">editUuid</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${topic.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="isXHR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isXHR</stringProp>
                          </elementProp>
                          <elementProp name="isAnswer" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isAnswer</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                          <elementProp name="jsVar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">jsVar</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="insertImages" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">insertImages</stringProp>
                          </elementProp>
                          <elementProp name="joinCommunity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">joinCommunity</stringProp>
                          </elementProp>
                          <elementProp name="description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.description}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">description</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createReply</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] add nonce cookie " enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

String nonce=vars.get(&quot;security.nonce&quot;);
String server=vars.get(&quot;server.name&quot;);
log.info(&quot;adding X-Update-Nonce to cookies : &quot; + nonce);

cookie = new Cookie(&quot;X-Update-Nonce&quot;, nonce, server, &quot;&quot;, false, 2000000000);
manager.add(cookie);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create reply  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;topic.reply.tag.user3&quot;, &quot;jmeter.topic.reply.tag.user3&quot;);
vars.put(&quot;reply.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;topic.reply.tag.user3&quot;));
vars.put(&quot;reply.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot; + &quot; &quot; + vars.get(&quot;topic.reply.tag.user3&quot;));</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT FORUMS]  Restricted Community" enabled="true"/>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user1 create forum" enabled="true"/>
                  <hashTree>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] create forum" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="autoFollow" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">autoFollow</stringProp>
                          </elementProp>
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${forum1.description}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">description</stringProp>
                          </elementProp>
                          <elementProp name="forumId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">forumId</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${forum1.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createForum</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://${server.name}/communities/service/html/communityoverview?communityUuid=${community.id}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Update-Nonce</stringProp>
                            <stringProp name="Header.value">true</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create community.id - remove!!!!!" enabled="false">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;community.id&quot;,&quot;ef067155-cd07-43bf-9888-67729040db00&quot;);</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create forum  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;forum1.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST FORUM RESTRICTED COMMUNITY&quot;);
vars.put(&quot;forum1.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] forum.id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">forum1.id</stringProp>
                        <stringProp name="RegexExtractor.regex">id=(.*)&amp;newCreated=true</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;forum1.id : [&apos; + vars.get(&quot;forum1.id&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user2 follow forum" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/dogear</stringProp>
                          <stringProp name="Authorization.username">${user_3}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_2}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_2.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] follow forum" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="subscribe" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">subscribe</stringProp>
                          </elementProp>
                          <elementProp name="forumId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${forum1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">forumId</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/subscribeForum</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;true&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Operation failed" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="263641398">Operation failed</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">6</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user3 follow forum" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/dogear</stringProp>
                          <stringProp name="Authorization.username">${user_3}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_3.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] follow forum" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="subscribe" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">subscribe</stringProp>
                          </elementProp>
                          <elementProp name="forumId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${forum1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">forumId</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/subscribeForum</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;true&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Operation failed" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="263641398">Operation failed</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">6</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user5 create forum topic" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/forums</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_5}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_5}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_5.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/json/communityview?communityUuid=${community.id}&amp;preventCache=1414681808789&amp;etag=20141021.174638&amp;suppress401=true </stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] security.nonce" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                        <stringProp name="RegexExtractor.regex">&amp;dangerousurlnonce=(.*)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] create topic" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="nodeId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nodeId</stringProp>
                          </elementProp>
                          <elementProp name="editUuid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">editUuid</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${forum1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="isXHR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isXHR</stringProp>
                          </elementProp>
                          <elementProp name="isAnswer" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isAnswer</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${topic1.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                          <elementProp name="jsVar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">jsVar</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="insertImages" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">insertImages</stringProp>
                          </elementProp>
                          <elementProp name="joinCommunity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">joinCommunity</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createTopic</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] add nonce cookie " enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

String nonce=vars.get(&quot;security.nonce&quot;);
String server=vars.get(&quot;server.name&quot;);
log.info(&quot;adding X-Update-Nonce to cookies : &quot; + nonce);

cookie = new Cookie(&quot;X-Update-Nonce&quot;, nonce, server, &quot;&quot;, false, 2000000000);
manager.add(cookie);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create topic values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;topic1.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST FORUM TOPIC RESTRICTED COMM&quot;);
vars.put(&quot;topic1.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] topic.id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">topic1.id</stringProp>
                        <stringProp name="RegexExtractor.regex">id=(.*)&apos;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;topic1.id : [&apos; + vars.get(&quot;topic1.id&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user1 reply to forum topic" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/forums</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login user_1" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/json/communityview?communityUuid=${community.id}&amp;preventCache=1414681808789&amp;etag=20141021.174638&amp;suppress401=true </stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] security.nonce" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                        <stringProp name="RegexExtractor.regex">&amp;dangerousurlnonce=(.*)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] reply to topic user_1" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="nodeId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nodeId</stringProp>
                          </elementProp>
                          <elementProp name="editUuid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">editUuid</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${topic1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="isXHR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isXHR</stringProp>
                          </elementProp>
                          <elementProp name="isAnswer" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isAnswer</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                          <elementProp name="jsVar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">jsVar</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="insertImages" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">insertImages</stringProp>
                          </elementProp>
                          <elementProp name="joinCommunity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">joinCommunity</stringProp>
                          </elementProp>
                          <elementProp name="description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.description}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">description</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createReply</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] add nonce cookie " enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

String nonce=vars.get(&quot;security.nonce&quot;);
String server=vars.get(&quot;server.name&quot;);
log.info(&quot;adding X-Update-Nonce to cookies : &quot; + nonce);

cookie = new Cookie(&quot;X-Update-Nonce&quot;, nonce, server, &quot;&quot;, false, 2000000000);
manager.add(cookie);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create reply  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;topic.reply.tag.user1.res&quot;, &quot;jmeter.topic.reply.tag.user1.res&quot;);
vars.put(&quot;reply.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;topic.reply.tag.user1.res&quot;));
vars.put(&quot;reply.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot; + &quot; &quot; + vars.get(&quot;topic.reply.tag.user1.res&quot;));

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user2 reply to forum topic" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/forums</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login user_2" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_2}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_2.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/json/communityview?communityUuid=${community.id}&amp;preventCache=1414681808789&amp;etag=20141021.174638&amp;suppress401=true </stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] security.nonce" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                        <stringProp name="RegexExtractor.regex">&amp;dangerousurlnonce=(.*)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] reply to topic user_2" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="nodeId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nodeId</stringProp>
                          </elementProp>
                          <elementProp name="editUuid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">editUuid</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${topic1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="isXHR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isXHR</stringProp>
                          </elementProp>
                          <elementProp name="isAnswer" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isAnswer</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                          <elementProp name="jsVar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">jsVar</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="insertImages" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">insertImages</stringProp>
                          </elementProp>
                          <elementProp name="joinCommunity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">joinCommunity</stringProp>
                          </elementProp>
                          <elementProp name="description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.description}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">description</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createReply</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] add nonce cookie " enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

String nonce=vars.get(&quot;security.nonce&quot;);
String server=vars.get(&quot;server.name&quot;);
log.info(&quot;adding X-Update-Nonce to cookies : &quot; + nonce);

cookie = new Cookie(&quot;X-Update-Nonce&quot;, nonce, server, &quot;&quot;, false, 2000000000);
manager.add(cookie);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create reply  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;topic.reply.tag.user2.res&quot;, &quot;jmeter.topic.reply.tag.user2.res&quot;);
vars.put(&quot;reply.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;topic.reply.tag.user2.res&quot;));
vars.put(&quot;reply.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot; + &quot; &quot; + vars.get(&quot;topic.reply.tag.user2.res&quot;));

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user3 reply to forum topic" enabled="true"/>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/forums</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login user_3" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_3.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/json/communityview?communityUuid=${community.id}&amp;preventCache=1414681808789&amp;etag=20141021.174638&amp;suppress401=true </stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] security.nonce" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                        <stringProp name="RegexExtractor.regex">&amp;dangerousurlnonce=(.*)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] reply to topic user_3" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="nodeId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nodeId</stringProp>
                          </elementProp>
                          <elementProp name="editUuid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">editUuid</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${topic1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="isXHR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isXHR</stringProp>
                          </elementProp>
                          <elementProp name="isAnswer" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isAnswer</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                          <elementProp name="jsVar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">jsVar</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="insertImages" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">insertImages</stringProp>
                          </elementProp>
                          <elementProp name="joinCommunity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">joinCommunity</stringProp>
                          </elementProp>
                          <elementProp name="description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.description}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">description</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createReply</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] add nonce cookie " enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

String nonce=vars.get(&quot;security.nonce&quot;);
String server=vars.get(&quot;server.name&quot;);
log.info(&quot;adding X-Update-Nonce to cookies : &quot; + nonce);

cookie = new Cookie(&quot;X-Update-Nonce&quot;, nonce, server, &quot;&quot;, false, 2000000000);
manager.add(cookie);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create reply  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;topic.reply.tag.user3.res&quot;, &quot;jmeter.topic.reply.tag.user3.res&quot;);
vars.put(&quot;reply.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;topic.reply.tag.user3.res&quot;));
vars.put(&quot;reply.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot; + &quot; &quot; + vars.get(&quot;topic.reply.tag.user3.res&quot;));</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] user4 reply to forum topic" enabled="true">
                    <stringProp name="IfController.condition">&quot;${add.guest.user}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/forums</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login user_4" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_4.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/communities/service/json/communityview?communityUuid=${community.id}&amp;preventCache=1414681808789&amp;etag=20141021.174638&amp;suppress401=true </stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] security.nonce" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                        <stringProp name="RegexExtractor.regex">&amp;dangerousurlnonce=(.*)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] reply to topic user_4" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="communityId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${community1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">communityId</stringProp>
                          </elementProp>
                          <elementProp name="nodeId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">nodeId</stringProp>
                          </elementProp>
                          <elementProp name="editUuid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">editUuid</stringProp>
                          </elementProp>
                          <elementProp name="parentId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${topic1.id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">parentId</stringProp>
                          </elementProp>
                          <elementProp name="isXHR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isXHR</stringProp>
                          </elementProp>
                          <elementProp name="isAnswer" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isAnswer</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.name}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="tags" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jmeter</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tags</stringProp>
                          </elementProp>
                          <elementProp name="jsVar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">jsVar</stringProp>
                          </elementProp>
                          <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${security.nonce}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                          </elementProp>
                          <elementProp name="insertImages" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">insertImages</stringProp>
                          </elementProp>
                          <elementProp name="joinCommunity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">joinCommunity</stringProp>
                          </elementProp>
                          <elementProp name="description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${reply.description}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">description</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/forums/ajax/createReply</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] add nonce cookie " enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

String nonce=vars.get(&quot;security.nonce&quot;);
String server=vars.get(&quot;server.name&quot;);
log.info(&quot;adding X-Update-Nonce to cookies : &quot; + nonce);

cookie = new Cookie(&quot;X-Update-Nonce&quot;, nonce, server, &quot;&quot;, false, 2000000000);
manager.add(cookie);

</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create reply  values" enabled="true">
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="script">vars.put(&quot;topic.reply.tag.user4.res&quot;, &quot;jmeter.topic.reply.tag.user4.res&quot;);
vars.put(&quot;reply.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;topic.reply.tag.user4.res&quot;));
vars.put(&quot;reply.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot; + &quot; &quot; + vars.get(&quot;topic.reply.tag.user4.res&quot;));</stringProp>
                      </BeanShellPreProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] user5 reply to forum topic" enabled="true">
                    <stringProp name="IfController.condition">&quot;${use.external.user}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user5 reply to forum topic" enabled="true"/>
                    <hashTree>
                      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                        <collectionProp name="AuthManager.auth_list">
                          <elementProp name="" elementType="Authorization">
                            <stringProp name="Authorization.url">https://${server.name}/forums</stringProp>
                            <stringProp name="Authorization.username">${user_1}</stringProp>
                            <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                            <stringProp name="Authorization.domain"></stringProp>
                            <stringProp name="Authorization.realm"></stringProp>
                          </elementProp>
                        </collectionProp>
                      </AuthManager>
                      <hashTree/>
                      <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login user_5" enabled="true">
                        <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="user.name" elementType="Argument">
                              <stringProp name="Argument.name">user.name</stringProp>
                              <stringProp name="Argument.value">${user_5}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="user.password" elementType="Argument">
                              <stringProp name="Argument.name">user.password</stringProp>
                              <stringProp name="Argument.value">${user_5.password}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                      </kg.apc.jmeter.control.ParameterizedController>
                      <hashTree>
                        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                          <collectionProp name="ModuleController.node_path">
                            <stringProp name="-1227702913">WorkBench</stringProp>
                            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                            <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                          </collectionProp>
                        </ModuleController>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                        <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/communities/service/json/communityview?communityUuid=${community.id}&amp;preventCache=1414681808789&amp;etag=20141021.174638&amp;suppress401=true </stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] security.nonce" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                          <stringProp name="RegexExtractor.regex">&amp;dangerousurlnonce=(.*)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">-1</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                          <stringProp name="scriptLanguage">javascript</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                        </BSFPostProcessor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] reply to topic user_5" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="communityId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${community1.id}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">communityId</stringProp>
                            </elementProp>
                            <elementProp name="nodeId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">nodeId</stringProp>
                            </elementProp>
                            <elementProp name="editUuid" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">editUuid</stringProp>
                            </elementProp>
                            <elementProp name="parentId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${topic1.id}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">parentId</stringProp>
                            </elementProp>
                            <elementProp name="isXHR" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">1</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">isXHR</stringProp>
                            </elementProp>
                            <elementProp name="isAnswer" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">isAnswer</stringProp>
                            </elementProp>
                            <elementProp name="name" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${reply.name}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">name</stringProp>
                            </elementProp>
                            <elementProp name="tags" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">jmeter</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">tags</stringProp>
                            </elementProp>
                            <elementProp name="jsVar" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">jsVar</stringProp>
                            </elementProp>
                            <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${security.nonce}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                            </elementProp>
                            <elementProp name="insertImages" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">insertImages</stringProp>
                            </elementProp>
                            <elementProp name="joinCommunity" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">joinCommunity</stringProp>
                            </elementProp>
                            <elementProp name="description" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${reply.description}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">description</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                        <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/forums/ajax/createReply</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] add nonce cookie " enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

String nonce=vars.get(&quot;security.nonce&quot;);
String server=vars.get(&quot;server.name&quot;);
log.info(&quot;adding X-Update-Nonce to cookies : &quot; + nonce);

cookie = new Cookie(&quot;X-Update-Nonce&quot;, nonce, server, &quot;&quot;, false, 2000000000);
manager.add(cookie);

</stringProp>
                        </BeanShellPreProcessor>
                        <hashTree/>
                        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create reply  values" enabled="true">
                          <stringProp name="filename"></stringProp>
                          <stringProp name="parameters"></stringProp>
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="script">vars.put(&quot;topic.reply.tag.user5.res&quot;, &quot;jmeter.topic.reply.tag.user5.res&quot;);
vars.put(&quot;reply.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;topic.reply.tag.user5.res&quot;));
vars.put(&quot;reply.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ blah blah blah ....&quot; + &quot; &quot; + vars.get(&quot;topic.reply.tag.user5.res&quot;));</stringProp>
                        </BeanShellPreProcessor>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-795477064">[SC] Logout</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT FORUMS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] PROFILES TEST" enabled="true">
                <stringProp name="IfController.condition">&quot;${profiles.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;START UT PROFILES&quot;);
log.info(&quot;START UT PROFILES&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT PROFILES] make network invitation" enabled="true"/>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] get user profile keys" enabled="true"/>
                  <hashTree>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_2}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_2.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_1.id}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body"></stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_1.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers"></stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user1.profile.key" enabled="true">
                        <stringProp name="HtmlExtractor.refname">user1.profile.key</stringProp>
                        <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                        <stringProp name="HtmlExtractor.attribute"></stringProp>
                        <stringProp name="HtmlExtractor.default">-1</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;user1.profile.key : [&apos; + vars.get(&quot;user1.profile.key&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                    <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                      <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="user.name" elementType="Argument">
                            <stringProp name="Argument.name">user.name</stringProp>
                            <stringProp name="Argument.value">${user_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="user.password" elementType="Argument">
                            <stringProp name="Argument.name">user.password</stringProp>
                            <stringProp name="Argument.value">${user_1.password}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                    </kg.apc.jmeter.control.ParameterizedController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_2.id}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body"></stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_2.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers"></stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user2.profile.key" enabled="true">
                        <stringProp name="HtmlExtractor.refname">user2.profile.key</stringProp>
                        <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                        <stringProp name="HtmlExtractor.attribute"></stringProp>
                        <stringProp name="HtmlExtractor.default">-1</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;user2.profile.key : [&apos; + vars.get(&quot;user2.profile.key&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_3.id}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="RestSampler.request_body"></stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                      <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_3.id}</stringProp>
                      <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                      <stringProp name="RestSampler.request_headers"></stringProp>
                    </com.atlantbh.jmeter.plugins.rest.RestSampler>
                    <hashTree>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user3.profile.key" enabled="true">
                        <stringProp name="HtmlExtractor.refname">user3.profile.key</stringProp>
                        <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                        <stringProp name="HtmlExtractor.attribute"></stringProp>
                        <stringProp name="HtmlExtractor.default">-1</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;user3.profile.key : [&apos; + vars.get(&quot;user3.profile.key&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-795477064">[SC] Logout</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] if using external user 5" enabled="true">
                      <stringProp name="IfController.condition">&quot;${use.external.user}&quot; == &quot;true&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_5}" enabled="true">
                        <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="user.name" elementType="Argument">
                              <stringProp name="Argument.name">user.name</stringProp>
                              <stringProp name="Argument.value">${user_5}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="user.password" elementType="Argument">
                              <stringProp name="Argument.name">user.password</stringProp>
                              <stringProp name="Argument.value">${user_5.password}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                      </kg.apc.jmeter.control.ParameterizedController>
                      <hashTree>
                        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                          <collectionProp name="ModuleController.node_path">
                            <stringProp name="-1005793739">[IFC] WIKIS</stringProp>
                            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                            <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                          </collectionProp>
                        </ModuleController>
                        <hashTree/>
                      </hashTree>
                      <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_5.id}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="RestSampler.request_body"></stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                        <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                        <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_5.id}</stringProp>
                        <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                        <stringProp name="RestSampler.request_headers"></stringProp>
                      </com.atlantbh.jmeter.plugins.rest.RestSampler>
                      <hashTree>
                        <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                        <hashTree/>
                        <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user5.profile.key" enabled="true">
                          <stringProp name="HtmlExtractor.refname">user5.profile.key</stringProp>
                          <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                          <stringProp name="HtmlExtractor.attribute"></stringProp>
                          <stringProp name="HtmlExtractor.default">-1</stringProp>
                          <stringProp name="HtmlExtractor.match_number">1</stringProp>
                          <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                        </HtmlExtractor>
                        <hashTree/>
                        <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                          <stringProp name="scriptLanguage">javascript</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">log.info(&apos;user5.profile.key : [&apos; + vars.get(&quot;user5.profile.key&quot;) + &apos;]&apos;);</stringProp>
                        </BSFPostProcessor>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1005793739">[IFC] WIKIS</stringProp>
                          <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                          <stringProp name="-795477064">[SC] Logout</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] follow user 2" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="targetKey" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${user2.profile.key}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">targetKey</stringProp>
                        </elementProp>
                        <elementProp name="sourceKey" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${user1.profile.key}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">sourceKey</stringProp>
                        </elementProp>
                        <elementProp name="action" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">follow</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">action</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/profiles/html/following.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] see connections" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/com.ibm.sc.server/api/contacts/?count=24&amp;startIndex=0&amp;sortOrder=descending&amp;filterOp=contains&amp;filterBy=search&amp;filterValue=&amp;type=all&amp;includeConnectToStatus=true&amp;includeConnectToOrg=true&amp;fields=id%2Cname%2CdisplayName%2CphotoUrl%2Cupdated%2CjobTitle%2Ccompany%2Cprimaryemail%2Cnetwork%2CconnectTo&amp;allFields=0</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">vars.put(&quot;user.has.connections&quot;,&quot;NULL&quot;)</stringProp>
                    </BSFPreProcessor>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="false"/>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON Ex] user.has.connections" enabled="true">
                      <stringProp name="VAR">user.has.connections</stringProp>
                      <stringProp name="JSONPATH">entry[0].id</stringProp>
                      <stringProp name="DEFAULT"></stringProp>
                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user.has.connections : [&apos; + vars.get(&quot;user.has.connections&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] delete connection if exists" enabled="true">
                    <stringProp name="IfController.condition">&quot;${user.has.connections}&quot; != &quot;NULL&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get user3 profile" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/profiles/atom/profile.do?userid=${user_3.id}&amp;dojo.preventCache=1415186867816</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get user3/user1 connection details" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                      <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/profiles/atom/connection.do?connectionType=colleague&amp;targetUserid=${user_3.id}&amp;sourceUserid=${user_1.id}&amp;dojo.preventCache=1415186868264</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get connection id" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">old.connection.id</stringProp>
                        <stringProp name="RegexExtractor.regex">(tag:profiles.ibm.com,2006:entry(.*)&lt;)</stringProp>
                        <stringProp name="RegexExtractor.template">$2$</stringProp>
                        <stringProp name="RegexExtractor.default">-1</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">log.info(&apos;old.connection.id : [&apos; + vars.get(&quot;old.connection.id&quot;) + &apos;]&apos;);</stringProp>
                      </BSFPostProcessor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] " enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="331517166">404|200</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.scope">all</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC]" enabled="true">
                      <stringProp name="IfController.condition">&quot;${old.connection.id}&quot; != &quot;-1&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] delete connection" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                        <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/profiles/atom/connection.do?inclMessage=true&amp;connectionId=${old.connection.id}</stringProp>
                        <stringProp name="HTTPSampler.method">DELETE</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] invite internal user3 to n/w" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/profiles/atom2/forms/friendrequest?targetKey=${user3.profile.key}&amp;lastMod=1415182564920</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[UT PROFILES] accept network invitation." enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] see invitations" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/profiles/atom/connections.do?connectionType=colleague&amp;status=pending&amp;inclMessage=true&amp;userid=${user_3.id}&amp;dojo.preventCache=1415183214469</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get connection id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">new.connection.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(tag:profiles.ibm.com,2006:entry(.*)&lt;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;new.connection.id : [&apos; + vars.get(&quot;new.connection.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] accept invite" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;&#xd;
 &lt;title type=&quot;text&quot;&gt;${user_3.displayName}&lt;/title&gt;&#xd;
 &lt;category term=&quot;connection&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;&#xd;
 &lt;category term=&quot;colleague&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/connection/type&quot;&gt;&lt;/category&gt;&#xd;
 &lt;category term=&quot;accepted&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/status&quot;&gt;&lt;/category&gt;&#xd;
 &lt;content type=&quot;html&quot;&gt;${invite.accept.comment}&lt;/content&gt;&#xd;
&lt;/entry&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/profiles/atom/connection.do?inclMessage=true&amp;connectionId=${new.connection.id}</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create community values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;invite.accept.comment&quot;, vars.get(&quot;runLabel&quot;) + &quot; blah&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_3}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END UT PROFILES&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] STD GET, SAVE AND CHECK EMAIL" enabled="true">
              <stringProp name="IfController.condition">&quot;${std.tests.run}&quot; == &quot;true&quot; &amp;&amp; &quot;${tests.mailchecks.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="[TA] Pause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${email.read.delay.ms}</stringProp>
              </TestAction>
              <hashTree>
                <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="[BSG] Log" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&quot;Pause for &quot; + vars.get(&quot;email.read.delay.ms&quot;) + &quot; ms, prior to email check&quot;);</stringProp>
                </BSFPreProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] INVITE GUEST CHECK" enabled="true"/>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;INVITE GUEST MAIL CHECK&quot;);
log.info(&quot;START INVITE GUEST MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${guest.fname}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${guest.email}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">${sc.invite.guest.subject}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${sc.invite.guest.subject}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">guest.invite</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.invite.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">A new account is ready for you</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END ACTIVITIES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] ACTIVITIES MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${activites.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;ACTIVITIES MAIL CHECK&quot;);
log.info(&quot;START ACTIVITIES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have created a new activity</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${activity.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.activity.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been added to:</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${activity.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.activity.memberAdd</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">has added you to an activity,Open Your Activity Dashboard,You can bookmark the URL below to find this activity again in the future</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">assigned you a to</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.activity.todo.assigned</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail external user5" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_5}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_5.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_5.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been added to</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.activity.memberAdd.external</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail external user5" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_5}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_5.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_5.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">assigned you a to</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.activity.todo.assigned.external</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] check mail guest user4" enabled="true">
                  <stringProp name="IfController.condition">&quot;${add.guest.user}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail guest user4" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${guest.email}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${guest.email}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_4.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">You have been added to</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.activity.memberAdd.guest</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail guest user4" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${guest.email}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${guest.email}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_4.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">assigned you a to</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.activity.todo.assigned.guest</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END ACTIVITIES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] COMMUNITIES MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${communities.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;COMMUNITIES MAIL CHECK&quot;);
log.info(&quot;START COMMUNITIES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3 (has added you to a community)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been added to:</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${community.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.communities.memberAdd</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] check mails user4 (has added you to a community)" enabled="true">
                  <stringProp name="IfController.condition">&quot;${add.guest.user}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user4 (has added you to a community)" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${guest.email}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${guest.email}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_4.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">You have been added to:</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${community1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.communities.memberAdd.guest</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="0"></stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user5 (has added you to a community)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_5}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_5.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_5.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been added to:</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${community1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.communities.memberAdd.external</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been removed from:</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${community.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.communities.memberRemove.eml</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END COMMUNITIES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FILES MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${files.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;FILES MAIL CHECK&quot;);
log.info(&quot;START FILES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1 (commented on your file)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">commented on your file</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${community.file.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.files.commentAdd</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2 (added file)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">has added</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.files.uploadedFile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2 (has shared the folder)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">has shared the folder</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.files.sharedFolder</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END FILES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] MICROBLOG TEST MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${microblog.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;MICROBLOG MAIL CHECK&quot;);
log.info(&quot;START MICROBLOG MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1 (liked your message)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">liked the message</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">liked the message</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.microblog.like</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1 (commented on your message)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">commented on a message posted to you</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">commented on a message posted to you</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.microblog.comment</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3 (mentions)" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">mentioned</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">you in a message</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.microblog.mentions</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">JMETER!</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END MICROBLOG MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] BLOGS MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${blogs.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;START BLOGS MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check user2 mailbox for blog entry notification email" enabled="false">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">${entry.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${entry.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.blog.entry.notify</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${user.mail.news.admin}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END BLOGS MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FORUMS MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${forums.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;FORUMS MAIL CHECK&quot;);
log.info(&quot;START FORUMS MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Public Community" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_2.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic.reply_fromUser2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_3.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic.reply_fromUser3</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_2.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_1.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic._fromUser1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_2.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_3.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic.reply_fromUser3</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_3.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_1.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic.reply_fromUser1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_3.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_2.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic.reply_fromUser2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Restricted Community i.e. one that allows guest and external " enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_2.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic1.reply_fromUser2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_3.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic1.reply_fromUser3</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_2.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_1.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic1._fromUser1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_2.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_3.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic1.reply_fromUser3</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_3.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_1.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic1.reply_fromUser1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_3.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_2.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic1.reply_fromUser2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user5 - ext.email" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_5}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_5.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_5.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_1.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic1.reply_fromUser1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user5 - ext.email" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_5}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_5.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_5.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_2.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic1.reply_fromUser2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user5 - ext.email" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_5}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_5.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_5.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_3.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic1.reply_fromUser3</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user5 - ext.email" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_5}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_5.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_5.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">${topic1.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${guest.display.name} replied to the</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.comm.forum.topic1.reply_fromUser4</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${topic.reply.tag.user4}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END FORUMS MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] PROFILES MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${profiles.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;PROFILES MAIL CHECK&quot;);
log.info(&quot;START PROFILES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user1" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">accepted your network invitation</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">Profiles</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.profiles.invite.accept</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user2 - followed you" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">followed you</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">Profiles</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.profiles.followedYou</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mails user3" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You are invited to join my network</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">Profiles</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.profiles.invite</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END PROFILES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FVT TEST" enabled="true">
              <stringProp name="IfController.condition">&quot;${fvt.tests.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">SampleResult.setSampleLabel(&quot;START FVT TESTS&quot;);
log.info(&quot;START FVT TESTS&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] SETUP FOLLOWING" enabled="true"/>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var title=&quot;START SETUP FOLLOWING&quot;;
SampleResult.setSampleLabel(title);
log.info(title);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] get user profile keys" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_1.id}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_1.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user1.profile.key" enabled="true">
                      <stringProp name="HtmlExtractor.refname">user1.profile.key</stringProp>
                      <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">-1</stringProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user1.profile.key : [&apos; + vars.get(&quot;user1.profile.key&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_1.id}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_1.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user1.profile.key" enabled="true">
                      <stringProp name="HtmlExtractor.refname">user1.profile.key</stringProp>
                      <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">-1</stringProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user1.profile.key : [&apos; + vars.get(&quot;user1.profile.key&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_2.id}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_2.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user2.profile.key" enabled="true">
                      <stringProp name="HtmlExtractor.refname">user2.profile.key</stringProp>
                      <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">-1</stringProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user2.profile.key : [&apos; + vars.get(&quot;user2.profile.key&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] profiles/atom/profile.do?userid=\${user_3.id}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">profiles/atom/profile.do?userid=${user_3.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="[CSS Ex] user3.profile.key" enabled="true">
                      <stringProp name="HtmlExtractor.refname">user3.profile.key</stringProp>
                      <stringProp name="HtmlExtractor.expr">div.x-profile-key</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">-1</stringProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;user3.profile.key : [&apos; + vars.get(&quot;user3.profile.key&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] User 1 follow User 2" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] follow user 2" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="targetKey" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${user2.profile.key}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">targetKey</stringProp>
                        </elementProp>
                        <elementProp name="sourceKey" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${user1.profile.key}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">sourceKey</stringProp>
                        </elementProp>
                        <elementProp name="action" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">follow</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">action</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/profiles/html/following.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">https://apps.acdev.swg.usma.ibm.com/profiles/html/following.do?targetKey=6b06c72d-c34b-4640-8a75-968b14512e01&amp;sourceKey=3d4ec3b5-07f2-4517-82ee-a1f1bae1b17b&amp;action=follow</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] User 2 follow User 1" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] follow user 1" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="targetKey" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${user1.profile.key}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">targetKey</stringProp>
                        </elementProp>
                        <elementProp name="sourceKey" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${user2.profile.key}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">sourceKey</stringProp>
                        </elementProp>
                        <elementProp name="action" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">follow</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">action</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/profiles/html/following.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] User 3 follow User 1" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] follow user 1" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="targetKey" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${user1.profile.key}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">targetKey</stringProp>
                        </elementProp>
                        <elementProp name="sourceKey" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${user3.profile.key}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">sourceKey</stringProp>
                        </elementProp>
                        <elementProp name="action" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">follow</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">action</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/profiles/html/following.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] SETUP COMMUNITIES" enabled="true"/>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var title=&quot;START SETUP COMMUNITIES&quot;;
SampleResult.setSampleLabel(title);
log.info(title);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] add communities and members" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] communitycreate - get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communitycreate</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get nonce" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">(var dangerousurlnonce = &quot;(.*)&quot;;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;security.nonce :: &quot; + vars.get(&quot;security.nonce&quot;));

 </stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] add public community (only internal members allowed)" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="members" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">members</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="memberemails" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">memberemails</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owneremails" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owneremails</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                          <stringProp name="Argument.value">${commPub01.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="publicAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">publicAccess</stringProp>
                          <stringProp name="Argument.value">public</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="externalAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">externalAccess</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                          <stringProp name="Argument.value">&lt;p dir=&quot;ltr&quot;&gt;${community.content}&lt;/p&gt;&#xd; </stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                          <stringProp name="Argument.value">jmeter_${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_P" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_P</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_P" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_P</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_PE" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_PE</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_PE" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_PE</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_G" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_G</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_G" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_G</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_C" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_C</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_C" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_C</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="bhc_PeopleTypeAhead" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">bhc_PeopleTypeAhead</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="submit" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">submit</stringProp>
                          <stringProp name="Argument.value">Save</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communityaddsubmit?X-Update-Nonce=${security.nonce}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create community values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;community.content&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ fvt blah blah blah ....&quot;);
vars.put(&quot;community.comment.text&quot;, &quot;Test comment &quot; + vars.get(&quot;runLabel&quot;) + &quot;. \nIts a beautiful day!&quot;);

vars.put(&quot;commPub01.name&quot;,vars.get(&quot;runLabel&quot;) + &quot;_commPub01&quot;);
vars.put(&quot;commMod01.name&quot;,vars.get(&quot;runLabel&quot;) + &quot;_commMod01&quot;);
vars.put(&quot;commPriv01.name&quot;,vars.get(&quot;runLabel&quot;) + &quot;_commPriv01&quot;);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get community id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">commPub01.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(resourceId=(.*)&quot;;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;commPub01.id :: &apos; + vars.get(&quot;commPub01.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] communitycreate - get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communitycreate</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get nonce" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">(var dangerousurlnonce = &quot;(.*)&quot;;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;security.nonce :: &quot; + vars.get(&quot;security.nonce&quot;));

 </stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] add restricted community" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="members" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">members</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="memberemails" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">memberemails</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owneremails" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owneremails</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                          <stringProp name="Argument.value">${commPriv01.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="publicAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">publicAccess</stringProp>
                          <stringProp name="Argument.value">privateAccess</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="externalAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">externalAccess</stringProp>
                          <stringProp name="Argument.value">allowExternal</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                          <stringProp name="Argument.value">&lt;p dir=&quot;ltr&quot;&gt;${community.content}&lt;/p&gt;&#xd; </stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                          <stringProp name="Argument.value">jmeter_${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_P" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_P</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_P" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_P</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_PE" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_PE</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_PE" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_PE</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_G" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_G</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_G" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_G</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_C" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_C</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_C" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_C</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="bhc_PeopleTypeAhead" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">bhc_PeopleTypeAhead</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="submit" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">submit</stringProp>
                          <stringProp name="Argument.value">Save</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communityaddsubmit?X-Update-Nonce=${security.nonce}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get community id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">commPriv01.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(resourceId=(.*)&quot;;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;commPriv01.id :: &apos; + vars.get(&quot;commPriv01.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] communitycreate - get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communitycreate</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get nonce" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">(var dangerousurlnonce = &quot;(.*)&quot;;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;security.nonce :: &quot; + vars.get(&quot;security.nonce&quot;));

 </stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] add moderated community" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="members" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">members</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="memberemails" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">memberemails</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owneremails" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owneremails</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                          <stringProp name="Argument.value">${commMod01.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="publicAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">publicAccess</stringProp>
                          <stringProp name="Argument.value">publicInviteOnlyAccess</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="externalAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">externalAccess</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                          <stringProp name="Argument.value">&lt;p dir=&quot;ltr&quot;&gt;${community.content}&lt;/p&gt;&#xd; </stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                          <stringProp name="Argument.value">jmeter_${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_P" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_P</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_P" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_P</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_PE" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_PE</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_PE" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_PE</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_G" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_G</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_G" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_G</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="owners_C" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">owners_C</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="authors_C" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">authors_C</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="bhc_PeopleTypeAhead" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">bhc_PeopleTypeAhead</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="submit" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">submit</stringProp>
                          <stringProp name="Argument.value">Save</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communityaddsubmit?X-Update-Nonce=${security.nonce}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get community id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">commMod01.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(resourceId=(.*)&quot;;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;commMod01.id :: &apos; + vars.get(&quot;commMod01.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] commPub01 add member ${user_2}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_2}&lt;/email&gt;
        &lt;snx:userid&gt;${user_2.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${commPub01.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] commMod01 add member ${user_2}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_2}&lt;/email&gt;
        &lt;snx:userid&gt;${user_2.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${commMod01.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] commPriv01 add member ${user_2}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_2}&lt;/email&gt;
        &lt;snx:userid&gt;${user_2.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${commPriv01.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] ACTIVITIES" enabled="true">
                <stringProp name="IfController.condition">&quot;${activites.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var title=&quot;START FVT ACTIVITIES&quot;;
SampleResult.setSampleLabel(title);
log.info(title);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 1 create activity and todo" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] add activites widget to commPub01" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="resourceId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">resourceId</stringProp>
                        </elementProp>
                        <elementProp name="uiLocation" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">col2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uiLocation</stringProp>
                        </elementProp>
                        <elementProp name="unhide" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">unhide</stringProp>
                        </elementProp>
                        <elementProp name="widgetDefId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Activities</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">widgetDefId</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">communities/addWidget.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                      <collectionProp name="CookieManager.cookies">
                        <elementProp name="X-Update-Nonce" elementType="Cookie" testname="X-Update-Nonce">
                          <stringProp name="Cookie.value">${security.nonce}</stringProp>
                          <stringProp name="Cookie.domain"></stringProp>
                          <stringProp name="Cookie.path"></stringProp>
                          <boolProp name="Cookie.secure">false</boolProp>
                          <longProp name="Cookie.expires">0</longProp>
                          <boolProp name="Cookie.path_specified">true</boolProp>
                          <boolProp name="Cookie.domain_specified">true</boolProp>
                        </elementProp>
                      </collectionProp>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] widget.instance.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">widget.instance.id</stringProp>
                      <stringProp name="RegexExtractor.regex">widgetInstanceId=&quot;(.*)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;widget.instance.id : [&apos; + vars.get(&quot;widget.instance.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] create activity in commPub01" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="activityUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">activityUuid</stringProp>
                        </elementProp>
                        <elementProp name="commUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">commUuid</stringProp>
                        </elementProp>
                        <elementProp name="uuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uuid</stringProp>
                        </elementProp>
                        <elementProp name="pattern" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">pattern</stringProp>
                        </elementProp>
                        <elementProp name="dangerousurlnonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">dangerousurlnonce</stringProp>
                        </elementProp>
                        <elementProp name="title" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Activity ${runLabel} ${runLabel1} </stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">title</stringProp>
                        </elementProp>
                        <elementProp name="intent" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">external</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">intent</stringProp>
                        </elementProp>
                        <elementProp name="externalAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">external</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">externalAccess</stringProp>
                        </elementProp>
                        <elementProp name="tagz" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tagz</stringProp>
                        </elementProp>
                        <elementProp name="explicit" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">allMembers-member</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">explicit</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                        </elementProp>
                        <elementProp name="ddDate" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">2018-01-05 23:59:59 +0000</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">ddDate</stringProp>
                        </elementProp>
                        <elementProp name="startpage" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">outline</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">startpage</stringProp>
                        </elementProp>
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">activities/service/html/post/activity</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                      <collectionProp name="CookieManager.cookies">
                        <elementProp name="X-Update-Nonce" elementType="Cookie" testname="X-Update-Nonce">
                          <stringProp name="Cookie.value">${security.nonce}</stringProp>
                          <stringProp name="Cookie.domain"></stringProp>
                          <stringProp name="Cookie.path"></stringProp>
                          <boolProp name="Cookie.secure">false</boolProp>
                          <longProp name="Cookie.expires">0</longProp>
                          <boolProp name="Cookie.path_specified">true</boolProp>
                          <boolProp name="Cookie.domain_specified">true</boolProp>
                        </elementProp>
                      </collectionProp>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] activity.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">activity.id</stringProp>
                      <stringProp name="RegexExtractor.regex">activity&gt;(.*)&lt;/snx:activity</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;activity.id : [&apos; + vars.get(&quot;activity.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] create todo in activity in commPub01" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="activityUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${activity.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">activityUuid</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                        </elementProp>
                        <elementProp name="entryTypeUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">entryTypeUuid</stringProp>
                        </elementProp>
                        <elementProp name="_nodeType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">activities/task</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">_nodeType</stringProp>
                        </elementProp>
                        <elementProp name="uuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uuid</stringProp>
                        </elementProp>
                        <elementProp name="parentUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${activity.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">parentUuid</stringProp>
                        </elementProp>
                        <elementProp name="completedState" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">completedState</stringProp>
                        </elementProp>
                        <elementProp name="tagz" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tagz</stringProp>
                        </elementProp>
                        <elementProp name="dangerousurlnonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">dangerousurlnonce</stringProp>
                        </elementProp>
                        <elementProp name="title" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TODO_${commPub01.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">title</stringProp>
                        </elementProp>
                        <elementProp name="ddDate" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">2017-01-05 23:59:59 +0000</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">ddDate</stringProp>
                        </elementProp>
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">activities/service/html/post/activitynode</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                      <collectionProp name="CookieManager.cookies">
                        <elementProp name="X-Update-Nonce" elementType="Cookie" testname="X-Update-Nonce">
                          <stringProp name="Cookie.value">${security.nonce}</stringProp>
                          <stringProp name="Cookie.domain"></stringProp>
                          <stringProp name="Cookie.path"></stringProp>
                          <boolProp name="Cookie.secure">false</boolProp>
                          <longProp name="Cookie.expires">0</longProp>
                          <boolProp name="Cookie.path_specified">true</boolProp>
                          <boolProp name="Cookie.domain_specified">true</boolProp>
                        </elementProp>
                      </collectionProp>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] activity.todo.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">activity.todo.id</stringProp>
                      <stringProp name="RegexExtractor.regex">id&gt;urn:lsid:ibm.com:oa:(.*)&lt;/id</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;activity.todo.id : [&apos; + vars.get(&quot;activity.todo.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] toggle todo completion in activity in commPub01" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">activities/service/html/post/togglecomplete?activityNodeUuid=${activity.todo.id}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/atom+xml</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

//cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;&quot;, &quot;${server.name}&quot;, &quot;/activities&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] toggle todo completion in activity in commPub01" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">activities/service/html/post/togglecomplete?activityNodeUuid=${activity.todo.id}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/atom+xml</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

//cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;&quot;, &quot;${server.name}&quot;, &quot;/activities&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 2 complete todo" enabled="false"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">communities/service/html/communityoverview?communityUuid=${commPub01.id}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get nonce" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">(var dangerousurlnonce = &quot;(.*)&quot;;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;security.nonce :: &quot; + vars.get(&quot;security.nonce&quot;));

 </stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] toggle todo completion in activity in commPub01" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">activities/service/html/post/togglecomplete?activityNodeUuid=${activity.todo.id}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">https://apps.stmsandbox19.swg.usma.ibm.com/activities/service/html/post/togglecomplete?activityNodeUuid=c37f3499-254d-4a69-8d1a-edb00890969b</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

//cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;&quot;, &quot;${server.name}&quot;, &quot;/activities&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] toggle todo completion in activity in commPub01" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">activities/service/html/post/togglecomplete?activityNodeUuid=${activity.todo.id}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">accept</stringProp>
                          <stringProp name="Header.value">application/atom+xml</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

//cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;&quot;, &quot;${server.name}&quot;, &quot;/activities&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] BLOGS" enabled="true">
                <stringProp name="IfController.condition">&quot;${blogs.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var title=&quot;START FVT BLOGS&quot;;
SampleResult.setSampleLabel(title);
log.info(title);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user1 add blog" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] add blogs widget to community" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="resourceId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">resourceId</stringProp>
                        </elementProp>
                        <elementProp name="uiLocation" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">col2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uiLocation</stringProp>
                        </elementProp>
                        <elementProp name="unhide" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">unhide</stringProp>
                        </elementProp>
                        <elementProp name="widgetDefId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Blog</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">widgetDefId</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">communities/addWidget.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                      <collectionProp name="CookieManager.cookies">
                        <elementProp name="X-Update-Nonce" elementType="Cookie" testname="X-Update-Nonce">
                          <stringProp name="Cookie.value">${security.nonce}</stringProp>
                          <stringProp name="Cookie.domain"></stringProp>
                          <stringProp name="Cookie.path"></stringProp>
                          <boolProp name="Cookie.secure">false</boolProp>
                          <longProp name="Cookie.expires">0</longProp>
                          <boolProp name="Cookie.path_specified">true</boolProp>
                          <boolProp name="Cookie.domain_specified">true</boolProp>
                        </elementProp>
                      </collectionProp>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] widget.instance.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">widget.instance.id</stringProp>
                      <stringProp name="RegexExtractor.regex">widgetInstanceId=&quot;(.*)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;widget.instance.id : [&apos; + vars.get(&quot;widget.instance.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Add blog entry" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
        &lt;id&gt;&lt;/id&gt;
        &lt;title&gt;${blog.entry.name}&lt;/title&gt;
         &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;entry&quot; label=&quot;Entry&quot; /&gt;
        &lt;content type=&quot;html&quot;&gt;&lt;![CDATA[&lt;div&gt;&lt;p&gt;${blog.entry.description}&lt;/p&gt;&lt;/div&gt;]]&gt;&lt;/content&gt;
    &lt;/entry&gt;
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">blogs/${blog.handle}/api/entries</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                    <stringProp name="TestPlan.comments">https://apps.basesandbox30.swg.usma.ibm.com/blogs/roller-ui/authoring/weblog.do?method=create&amp;weblog=a0969ad4-e8a9-4f9f-9b8e-3bdc40e9fa86&amp;lang=en_us</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create entry  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;blog.handle&quot;, vars.get(&quot;commPub01.id&quot;));
vars.put(&quot;blog.entry.name&quot;, vars.get(&quot;runLabel1&quot;) + &quot; JMETER TEST BLOG&quot;);
vars.put(&quot;blog.entry.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel1&quot;) + &quot; &quot; + vars.get(&quot;runLabel2&quot;) +  &quot;~ blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex] entry.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">blog.entry.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] entry id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">blog.entry.id</stringProp>
                      <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:blogs:entry-(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] entry handle" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">blog.entry.handle</stringProp>
                      <stringProp name="RegexExtractor.regex">blogs/${blog.handle}/feed/entrycomments/(.+?)/atom</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;blog.entry.id1 : [&apos; + vars.get(&quot;blog.entry.id1&quot;) + &apos;]&apos;);
log.info(&apos;blog.entry.id : [&apos; + vars.get(&quot;blog.entry.id&quot;) + &apos;]&apos;);
log.info(&apos;blog.entry.handle : [&apos; + vars.get(&quot;blog.entry.handle&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user2 comment on blog entry" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] Add comment to blog entry" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;
&lt;entry xmlns=&apos;http://www.w3.org/2005/Atom&apos; xmlns:thr=&quot;http://purl.org/syndication/thread/1.0&quot;&gt;
  &lt;id&gt;ignored&lt;/id&gt;
  &lt;title type=&apos;text&apos;&gt;ignored&lt;/title&gt;
  &lt;thr:in-reply-to ref=&quot;${blog.entry.id1}&quot;/&gt;
  &lt;content type=&apos;html&apos;&gt;${comment.description}&lt;/content&gt;
&lt;/entry&gt; </stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">blogs/${blog.handle}/api/comments</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create entry  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;comment.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER TEST BLOG COMMENT&quot;);
vars.put(&quot;comment.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot;~ JMETER comment blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XP Ex] comment.id1" enabled="true">
                      <stringProp name="XPathExtractor.default">-1</stringProp>
                      <stringProp name="XPathExtractor.refname">comment.id1</stringProp>
                      <stringProp name="XPathExtractor.xpathQuery">/:entry/:id</stringProp>
                      <boolProp name="XPathExtractor.validate">false</boolProp>
                      <boolProp name="XPathExtractor.tolerant">false</boolProp>
                      <boolProp name="XPathExtractor.namespace">true</boolProp>
                    </XPathExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] comment id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">comment.id</stringProp>
                      <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:blogs:comment-(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;comment.id : [&apos; + vars.get(&quot;comment.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] Reply to comment" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="content" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${runLabel} ${runLabel1}  blah blah blah</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">content</stringProp>
                        </elementProp>
                        <elementProp name="commentid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${comment.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">commentid</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blogs/roller-services/json/comment</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                      <collectionProp name="CookieManager.cookies">
                        <elementProp name="X-Update-Nonce" elementType="Cookie" testname="X-Update-Nonce">
                          <stringProp name="Cookie.value">${security.nonce}</stringProp>
                          <stringProp name="Cookie.domain"></stringProp>
                          <stringProp name="Cookie.path"></stringProp>
                          <boolProp name="Cookie.secure">false</boolProp>
                          <longProp name="Cookie.expires">0</longProp>
                          <boolProp name="Cookie.path_specified">true</boolProp>
                          <boolProp name="Cookie.domain_specified">true</boolProp>
                        </elementProp>
                      </collectionProp>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] comment reply id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">comment.reply.id</stringProp>
                      <stringProp name="RegexExtractor.regex">id:&apos;(.*?)&apos;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;comment.reply.id : [&apos; + vars.get(&quot;comment.reply.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user1 like comment" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] like comment" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="action" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">add</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">action</stringProp>
                        </elementProp>
                        <elementProp name="commentid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${comment.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">commentid</stringProp>
                        </elementProp>
                        <elementProp name="version" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">400</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">version</stringProp>
                        </elementProp>
                        <elementProp name="rating" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">5</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">rating</stringProp>
                        </elementProp>
                        <elementProp name="dangerousurlnonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">dangerousurlnonce</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blogs/roller-services/json/rating</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                      <collectionProp name="CookieManager.cookies">
                        <elementProp name="X-Update-Nonce" elementType="Cookie" testname="X-Update-Nonce">
                          <stringProp name="Cookie.value">${security.nonce}</stringProp>
                          <stringProp name="Cookie.domain"></stringProp>
                          <stringProp name="Cookie.path"></stringProp>
                          <boolProp name="Cookie.secure">false</boolProp>
                          <longProp name="Cookie.expires">0</longProp>
                          <boolProp name="Cookie.path_specified">true</boolProp>
                          <boolProp name="Cookie.domain_specified">true</boolProp>
                        </elementProp>
                      </collectionProp>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] like comment reply" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="action" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">add</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">action</stringProp>
                        </elementProp>
                        <elementProp name="commentid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${comment.reply.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">commentid</stringProp>
                        </elementProp>
                        <elementProp name="version" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">400</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">version</stringProp>
                        </elementProp>
                        <elementProp name="rating" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">5</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">rating</stringProp>
                        </elementProp>
                        <elementProp name="dangerousurlnonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">dangerousurlnonce</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blogs/roller-services/json/rating</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                      <collectionProp name="CookieManager.cookies">
                        <elementProp name="X-Update-Nonce" elementType="Cookie" testname="X-Update-Nonce">
                          <stringProp name="Cookie.value">${security.nonce}</stringProp>
                          <stringProp name="Cookie.domain"></stringProp>
                          <stringProp name="Cookie.path"></stringProp>
                          <boolProp name="Cookie.secure">false</boolProp>
                          <longProp name="Cookie.expires">0</longProp>
                          <boolProp name="Cookie.path_specified">true</boolProp>
                          <boolProp name="Cookie.domain_specified">true</boolProp>
                        </elementProp>
                      </collectionProp>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] COMMUNITIES" enabled="true">
                <stringProp name="IfController.condition">&quot;${communities.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var title=&quot;START FVT COMMUNITIES&quot;;
SampleResult.setSampleLabel(title);
log.info(title);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user1 add bookmark" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] community bookmark page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/community/bookmarks?communityUuid=${commPub01.id}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get nonce" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">dangerousurlnonce = &quot;(.*)&quot;;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;security.nonce : [&apos; + vars.get(&quot;security.nonce&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] create bookmark" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="communityUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">communityUuid</stringProp>
                        </elementProp>
                        <elementProp name="type" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">bookmark</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">type</stringProp>
                        </elementProp>
                        <elementProp name="uri" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.fvt.url}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uri</stringProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.fvt.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.fvt.description}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                        </elementProp>
                        <elementProp name="homepage" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">homepage</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">homepage</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/bookmarkaddsubmit?returnto=community/bookmarks&amp;dangerousurlnonce=${security.nonce}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create bookmark  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;bookmark.fvt.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;runLabel1&quot;) + &quot; JMETER TEST BOOKMARK&quot;);
vars.put(&quot;bookmark.fvt.url&quot;, &quot;http://www.imra.ie?p=&quot; +vars.get(&quot;runLabel1&quot;));
vars.put(&quot;bookmark.fvt.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;runLabel1&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user1 add event" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] add events widget to community" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="resourceId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">resourceId</stringProp>
                        </elementProp>
                        <elementProp name="uiLocation" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">col3</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uiLocation</stringProp>
                        </elementProp>
                        <elementProp name="unhide" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">unhide</stringProp>
                        </elementProp>
                        <elementProp name="widgetDefId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Calendar</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">widgetDefId</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">communities/addWidget.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                      <collectionProp name="CookieManager.cookies">
                        <elementProp name="X-Update-Nonce" elementType="Cookie" testname="X-Update-Nonce">
                          <stringProp name="Cookie.value">${security.nonce}</stringProp>
                          <stringProp name="Cookie.domain"></stringProp>
                          <stringProp name="Cookie.path"></stringProp>
                          <boolProp name="Cookie.secure">false</boolProp>
                          <longProp name="Cookie.expires">0</longProp>
                          <boolProp name="Cookie.path_specified">true</boolProp>
                          <boolProp name="Cookie.domain_specified">true</boolProp>
                        </elementProp>
                      </collectionProp>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] widget.instance.id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">widget.instance.id</stringProp>
                      <stringProp name="RegexExtractor.regex">widgetInstanceId=&quot;(.*)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;widget.instance.id : [&apos; + vars.get(&quot;widget.instance.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] communitycreate - get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communitycreate</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get nonce" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">(var dangerousurlnonce = &quot;(.*)&quot;;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;security.nonce :: &quot; + vars.get(&quot;security.nonce&quot;));

 </stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] add event community calendar" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;entry xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot; xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot; xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;&#xd;
&lt;title type=&quot;text&quot;&gt;${event.name}&lt;/title&gt;&#xd;
&lt;content type=&quot;html&quot;&gt;&amp;lt;p dir=&amp;quot;ltr&amp;quot;&gt;eeeee&amp;lt;/p&gt;&#xd;
&lt;/content&gt;&#xd;
&lt;snx:imageUrl&gt;&lt;/snx:imageUrl&gt;&#xd;
&lt;snx:location&gt;Office&lt;/snx:location&gt;&#xd;
&lt;snx:allday&gt;1&lt;/snx:allday&gt;&#xd;
&lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;event&quot;&gt;&lt;/category&gt;&#xd;
&lt;snx:recurrence custom=&quot;yes&quot;&gt;&#xd;
	&lt;snx:period&gt;&#xd;
		&lt;snx:startDate&gt;2018-01-30T16:00:00+00:00&lt;/snx:startDate&gt;&#xd;
		&lt;snx:endDate&gt;2018-01-30T17:00:00+00:00&lt;/snx:endDate&gt;&#xd;
	&lt;/snx:period&gt;&#xd;
	&lt;snx:daylight&gt;2015-03-29T11:10:56+01:00/2015-10-25T10:10:56+00:00&lt;/snx:daylight&gt;&#xd;
&lt;/snx:recurrence&gt;&#xd;
&lt;/entry&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/calendar/atom_form/calendar/event?calendarUuid=${commPub01.id}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="X-CALENDAR-MEMBERSHIP" elementType="Header">
                          <stringProp name="Header.name">X-CALENDAR-MEMBERSHIP</stringProp>
                          <stringProp name="Header.value">OWNER</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${server.name}/communities/service/html/communityoverview?communityUuid=${commPub01.id}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/atom+xml</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create event values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;event.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; JMETER EVENT&quot;);
vars.put(&quot;event.text&quot;, &quot;Test comment &quot; + vars.get(&quot;runLabel&quot;) + &quot;. \nIts a beautiful day!&quot;);</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] user 1 - post microblog to community" enabled="true">
                  <stringProp name="IfController.condition">&quot;${microblog.tests.run}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/connections</stringProp>
                        <stringProp name="Authorization.username">${user_1}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] post microblog" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">{&quot;content&quot;:&quot; ... JMETER POST ${runLabel}  ${runLabel1}&quot;}
</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">connections/opensocial/rest/ublog/urn:lsid:lconn.ibm.com:communities.community:${commPub01.id}/@all</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type : application/json</stringProp>
                    <stringProp name="TestPlan.comments">connections/opensocial/rest/ublog/${user_4.id}/@all</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get microblog id" enabled="true">
                      <stringProp name="VAR">microblog.id</stringProp>
                      <stringProp name="JSONPATH">entry.id</stringProp>
                      <stringProp name="DEFAULT"></stringProp>
                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;microblog.id is &quot; + vars.get(&quot;microblog.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 1 change commPub to private, add bookmark, change back" enabled="true"/>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/connections</stringProp>
                        <stringProp name="Authorization.username">${user_1}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] communitycreate - get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communitycreate</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get nonce" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">(var dangerousurlnonce = &quot;(.*)&quot;;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;security.nonce :: &quot; + vars.get(&quot;security.nonce&quot;));

securityNonce=vars.get(&quot;security.nonce&quot;)
if (securityNonce == -1){
	prev.setSuccessful(false);
	errmsg=&quot;Could not get security noce from request.&quot;
	prev.setResponseMessage(errmsg);
	log.info(errmsg);
	//prev.setStopTest(true);
}</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] change community to private" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="uuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uuid</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="publicAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">privateAccess</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">publicAccess</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="externalAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">externalAccess</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">&lt;p dir=&quot;ltr&quot;&gt;${community.content}&lt;/p&gt;&#xd; </stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                          <stringProp name="Argument.desc">true</stringProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">jmeter_${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="submit" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Save</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">submit</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communityupdatesubmit?X-Update-Nonce=${security.nonce}&amp;returnto=communityedit</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] create bookmark" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="communityUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">communityUuid</stringProp>
                        </elementProp>
                        <elementProp name="type" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">bookmark</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">type</stringProp>
                        </elementProp>
                        <elementProp name="uri" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.url}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uri</stringProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.description}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                        </elementProp>
                        <elementProp name="homepage" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">homepage</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">homepage</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/bookmarkaddsubmit?returnto=community/bookmarks&amp;dangerousurlnonce=${security.nonce}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create bookmark  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;bookmark.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;runLabel2&quot;) + &quot; JMETER TEST BOOKMARK&quot;);
vars.put(&quot;bookmark.url&quot;, &quot;http://www.imra.ie?p=&quot; +vars.get(&quot;runLabel2&quot;));
vars.put(&quot;bookmark.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;runLabel2&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] commPub01 (now private) - remove member ${user_2}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">DELETE</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${commPub01.id}&amp;userid=${user_2.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] create bookmark" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="communityUuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">communityUuid</stringProp>
                        </elementProp>
                        <elementProp name="type" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">bookmark</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">type</stringProp>
                        </elementProp>
                        <elementProp name="uri" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.url}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uri</stringProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${bookmark.description}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                        </elementProp>
                        <elementProp name="homepage" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">homepage</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">homepage</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/bookmarkaddsubmit?returnto=community/bookmarks&amp;dangerousurlnonce=${security.nonce}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create bookmark  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;bookmark.name&quot;, vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;runLabel3&quot;) + &quot; JMETER TEST BOOKMARK&quot;);
vars.put(&quot;bookmark.url&quot;, &quot;http://www.imra.ie?p=&quot; +vars.get(&quot;runLabel3&quot;));
vars.put(&quot;bookmark.description&quot;, &quot;~&quot; + vars.get(&quot;runLabel&quot;) + &quot; &quot; + vars.get(&quot;runLabel3&quot;) + &quot;~ blah blah blah ....&quot;);

</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] change community back to public" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="uuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uuid</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="publicAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">publicAccess</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">publicAccess</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="externalAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">externalAccess</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">&lt;p dir=&quot;ltr&quot;&gt;${community.content}&lt;/p&gt;&#xd; </stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                          <stringProp name="Argument.desc">true</stringProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">jmeter_${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="submit" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Save</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">submit</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communityupdatesubmit?X-Update-Nonce=${security.nonce}&amp;returnto=communityedit</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] commPub01 add member ${user_2}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
    &lt;contributor&gt;
        &lt;email&gt;${user_2}&lt;/email&gt;
        &lt;snx:userid&gt;${user_2.id}&lt;/snx:userid&gt;
    &lt;/contributor&gt;
    &lt;category scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot; term=&quot;person&quot;/&gt;
    &lt;snx:role component=&quot;http://www.ibm.com/xmlns/prod/sn/communities&quot;&gt;member&lt;/snx:role&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${commPub01.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] WIKIS" enabled="true">
                <stringProp name="IfController.condition">&quot;${wikis.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var title=&quot;START FVT WIKIS&quot;;
SampleResult.setSampleLabel(title);
log.info(title);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user1 add wiki page" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get community wiki" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/wikis/communitywiki?communityUuid=${commPub01.id}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get wiki handle" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">wiki.handle</stringProp>
                      <stringProp name="RegexExtractor.regex">window.location.replace...wikis.home.lang.en.us...wiki.(.*)&quot;.;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;wiki.handle : [&apos; + vars.get(&quot;wiki.handle&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] add wiki page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
&lt;title type=&quot;text&quot;&gt;${runLabel} ${runLabel1} JMETER WIKI PAGE&lt;/title&gt;
&lt;content type=&quot;text&quot;&gt;&lt;p&gt;${runLabel} ${runLabel1} JMETER WIKI.&lt;/p&gt;
&lt;/content&gt;
&lt;category term=&quot;${runLabel}&quot; /&gt;
&lt;category term=&quot;${runLabel1}&quot; /&gt;
&lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;page&quot; label=&quot;page&quot; /&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/wikis/basic/api/wiki/${wiki.handle}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get page id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">wiki.page.id</stringProp>
                      <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:td:(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;wiki.page.id : [&apos; + vars.get(&quot;wiki.page.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user2 like wiki page" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like wiki page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
&lt;category term=&quot;recommendation&quot; label=&quot;recommendation&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;/&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/wikis/form/api/wiki/${wiki.handle}/page/${wiki.page.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user3 comments on wiki page" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] comment on wiki page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
&lt;category term=&quot;comment&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot; label=&quot;comment&quot;/&gt;
&lt;content type=&quot;html&quot;&gt;${runLabel} ${runLabel1} Wiki Comment&lt;/content&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/wikis/form/api/wiki/${wiki.handle}/page/${wiki.page.id}/feed?sK=published&amp;sO=asc&amp;ps=10&amp;contentFormat=html</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 1 change commPub to private, add wiki page, change back" enabled="true"/>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/connections</stringProp>
                        <stringProp name="Authorization.username">${user_1}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] communitycreate - get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communitycreate</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get nonce" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">security.nonce</stringProp>
                      <stringProp name="RegexExtractor.regex">(var dangerousurlnonce = &quot;(.*)&quot;;)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;security.nonce :: &quot; + vars.get(&quot;security.nonce&quot;));

securityNonce=vars.get(&quot;security.nonce&quot;)
if (securityNonce == -1){
	prev.setSuccessful(false);
	errmsg=&quot;Could not get security noce from request.&quot;
	prev.setResponseMessage(errmsg);
	log.info(errmsg);
	//prev.setStopTest(true);
}</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] change community to private" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="uuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uuid</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="publicAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">privateAccess</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">publicAccess</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="externalAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">externalAccess</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">&lt;p dir=&quot;ltr&quot;&gt;${community.content}&lt;/p&gt;&#xd; </stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                          <stringProp name="Argument.desc">true</stringProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">jmeter_${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="submit" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Save</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">submit</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communityupdatesubmit?X-Update-Nonce=${security.nonce}&amp;returnto=communityedit</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] add wiki page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
&lt;title type=&quot;text&quot;&gt;${runLabel} ${runLabel2} JMETER WIKI PAGE&lt;/title&gt;
&lt;content type=&quot;text&quot;&gt;&lt;p&gt;${runLabel} ${runLabel2} JMETER WIKI.&lt;/p&gt;
&lt;/content&gt;
&lt;category term=&quot;${runLabel}&quot; /&gt;
&lt;category term=&quot;${runLabel2}&quot; /&gt;
&lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;page&quot; label=&quot;page&quot; /&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/wikis/basic/api/wiki/${wiki.handle}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get page id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">wiki.page.id</stringProp>
                      <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:td:(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;wiki.page.id : [&apos; + vars.get(&quot;wiki.page.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] commPub01 (now private) - remove member ${user_2}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body"></stringProp>
                    <stringProp name="HTTPSampler.method">DELETE</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">communities/service/atom/community/members?communityUuid=${commPub01.id}&amp;userid=${user_2.id}</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers"></stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] add wiki page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
&lt;title type=&quot;text&quot;&gt;${runLabel} ${runLabel3} JMETER WIKI PAGE&lt;/title&gt;
&lt;content type=&quot;text&quot;&gt;&lt;p&gt;${runLabel} ${runLabel3} JMETER WIKI.&lt;/p&gt;
&lt;/content&gt;
&lt;category term=&quot;${runLabel}&quot; /&gt;
&lt;category term=&quot;${runLabel3}&quot; /&gt;
&lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;page&quot; label=&quot;page&quot; /&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/wikis/basic/api/wiki/${wiki.handle}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get page id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">wiki.page.id</stringProp>
                      <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:td:(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;wiki.page.id : [&apos; + vars.get(&quot;wiki.page.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] change community back to public" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="uuid" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">uuid</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="name" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${commPub01.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">name</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="publicAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">publicAccess</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">publicAccess</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="externalAccess" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">externalAccess</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">&lt;p dir=&quot;ltr&quot;&gt;${community.content}&lt;/p&gt;&#xd; </stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">description</stringProp>
                          <stringProp name="Argument.desc">true</stringProp>
                        </elementProp>
                        <elementProp name="tagsList" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">jmeter_${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tagsList</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="submit" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Save</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">submit</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/communities/service/html/communityupdatesubmit?X-Update-Nonce=${security.nonce}&amp;returnto=communityedit</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout ${user_1}" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FILES" enabled="true">
                <stringProp name="IfController.condition">&quot;${files.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var title=&quot;START FVT FILES&quot;;
SampleResult.setSampleLabel(title);
log.info(title);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user1 uploads public file" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_1}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_1.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] upload file to community" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">html</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">format</stringProp>
                        </elementProp>
                        <elementProp name="opId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">upload,${file.name},1420647779725</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">opId</stringProp>
                        </elementProp>
                        <elementProp name="nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">nonce</stringProp>
                        </elementProp>
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                        <elementProp name="propagate" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">propagate</stringProp>
                        </elementProp>
                        <elementProp name="notification" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">on</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">notification</stringProp>
                        </elementProp>
                        <elementProp name="label" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${file.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">label</stringProp>
                        </elementProp>
                        <elementProp name="tag" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tag</stringProp>
                        </elementProp>
                        <elementProp name="visibility" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">public</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">visibility</stringProp>
                        </elementProp>
                        <elementProp name="shareSummary" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">shareSummary</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/files/form/api/communitylibrary/${commPub01.id}/feed</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                      <collectionProp name="HTTPFileArgs.files">
                        <elementProp name="${files.upload.file.path}" elementType="HTTPFileArg">
                          <stringProp name="File.path">${files.upload.file.path}</stringProp>
                          <stringProp name="File.paramname">file</stringProp>
                          <stringProp name="File.mimetype"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Update-Nonce</stringProp>
                          <stringProp name="Header.value">${security.nonce}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create file  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;file.name&quot;, &quot;${runLabel1}&quot; + &quot;_2_&quot; + &quot;${files.upload.file.name}&quot; );</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Item Exists" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-698589841">ItemExists</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">file.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(urn:lsid:ibm.com:td:(.*?)&amp;quot)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file library id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">file.library.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(files/form/api/library/(.*?)/document)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;file.id is &quot; + vars.get(&quot;file.id&quot;));
log.info(&quot;file.library.id is &quot; + vars.get(&quot;file.library.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] add folder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
 &lt;category term=&quot;collection&quot; label=&quot;collection&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;/&gt;
 &lt;label xmlns=&quot;urn:ibm.com/td&quot; makeUnique=&quot;true&quot;&gt;f1&lt;/label&gt; 
 &lt;title&gt;${runLabel} FOLDER&lt;/title&gt;
 &lt;summary type=&quot;text&quot;&gt;${runLabel} FOLDER&lt;/summary&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/files/form/api/communitycollection/${commPub01.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="jp@gc - XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get folder id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">folder.id</stringProp>
                      <stringProp name="RegexExtractor.regex">urn:lsid:ibm.com:td:(.*)&lt;/id&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49587">201</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&apos;folder.id : [&apos; + vars.get(&quot;folder.id&quot;) + &apos;]&apos;);</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] move file to folder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;feed xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
&lt;entry&gt;
 &lt;category term=&quot;collection&quot; label=&quot;collection&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot;/&gt;
 &lt;itemId xmlns=&quot;urn:ibm.com/td&quot;&gt;${folder.id}&lt;/itemId&gt;
&lt;/entry&gt;
&lt;/feed&gt;

</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/files/form/api/communitylibrary/${commPub01.id}/document/${file.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] share file with user 2" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:app=&quot;http://www.w3.org/2007/app&quot; xmlns:td=&quot;urn:ibm.com/td&quot; xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;
  &lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;share&quot; label=&quot;share&quot;/&gt;
  &lt;td:sharedWhat&gt;${file.id}&lt;/td:sharedWhat&gt;
  &lt;td:sharedWith&gt;&lt;td:user&gt;&lt;snx:userid&gt;${user2.id}&lt;/snx:userid&gt;&lt;/td:user&gt;&lt;/td:sharedWith&gt;
  &lt;title type=&quot;text&quot;&gt;Share1&lt;/title&gt;
&lt;/entry&gt;

</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">/files/basic/api/shares/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] upload new version of file to community" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="filename" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${file.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">filename</stringProp>
                        </elementProp>
                        <elementProp name="format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">html</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">format</stringProp>
                        </elementProp>
                        <elementProp name="opId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">replace,${file.id},1420723151857</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">opId</stringProp>
                        </elementProp>
                        <elementProp name="nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">nonce</stringProp>
                        </elementProp>
                        <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${security.nonce}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">X-Update-Nonce</stringProp>
                        </elementProp>
                        <elementProp name="createVersion" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">createVersion</stringProp>
                        </elementProp>
                        <elementProp name="sendNotification" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">sendNotification</stringProp>
                        </elementProp>
                        <elementProp name="label" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${file.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">label</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                        <elementProp name="tag" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">tag</stringProp>
                          <stringProp name="Argument.desc">false</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/files/form/api/library/${file.library.id}/document/${file.id}/entry</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                      <collectionProp name="HTTPFileArgs.files">
                        <elementProp name="${files.upload.file.path}" elementType="HTTPFileArg">
                          <stringProp name="File.path">${files.upload.file.path}</stringProp>
                          <stringProp name="File.paramname">file</stringProp>
                          <stringProp name="File.mimetype"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Update-Nonce</stringProp>
                          <stringProp name="Header.value">${security.nonce}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] reset some cookie values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

CookieManager manager = sampler.getCookieManager();

for(int i = 0;i&lt;manager.getCookieCount();i++){
        Cookie cookie = manager.get(i); name = cookie.getName();
        if(name.equalsIgnoreCase(&quot;X-Update-Nonce&quot;)){
                manager.remove(i);
                i--;
        }
}

cookie = new Cookie(&quot;X-Update-Nonce&quot;, &quot;${security.nonce}&quot;, &quot;${server.name}&quot;, &quot;/&quot;, false, 2000000000);
manager.add(cookie);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create file  values" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">vars.put(&quot;file.name&quot;, &quot;${runLabel1}&quot; + &quot;_2_&quot; + &quot;${files.upload.file.name}&quot; );</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] Item Exists" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-698589841">ItemExists</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">file.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(urn:lsid:ibm.com:td:(.*?)&amp;quot)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get file library id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">file.library.id</stringProp>
                      <stringProp name="RegexExtractor.regex">(files/form/api/library/(.*?)/document)</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;file.id is &quot; + vars.get(&quot;file.id&quot;));
log.info(&quot;file.library.id is &quot; + vars.get(&quot;file.library.id&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] like file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;
  &lt;category term=&quot;recommendation&quot; label=&quot;recommendation&quot; scheme=&quot;tag:ibm.com,2006:td/type&quot; /&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">http://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/form/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${http.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml;type=entry;charset=UTF-8</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                      <collectionProp name="AuthManager.auth_list">
                        <elementProp name="" elementType="Authorization">
                          <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                          <stringProp name="Authorization.username">${user_1}</stringProp>
                          <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                          <stringProp name="Authorization.domain"></stringProp>
                          <stringProp name="Authorization.realm"></stringProp>
                        </elementProp>
                      </collectionProp>
                    </AuthManager>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] user 3 follow file" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_3}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] get nonce" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="self" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">self</stringProp>
                        </elementProp>
                        <elementProp name="format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">json</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">format</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/files/form/api/people/feed</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="JSON Format Post Processor" enabled="true"/>
                    <hashTree/>
                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="[JSON] get nonce" enabled="true">
                      <stringProp name="VAR">security.nonce</stringProp>
                      <stringProp name="JSONPATH">items[0].nonce</stringProp>
                      <stringProp name="DEFAULT"></stringProp>
                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF] log" enabled="true">
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">log.info(&quot;security.nonce is &quot; + vars.get(&quot;security.nonce&quot;));</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] user3/C follow file" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot;&gt;&#xd;
 &lt;notifications xmlns=&quot;urn:ibm.com/td&quot;&gt;&#xd;
  &lt;comment&gt;on&lt;/comment&gt;&#xd;
  &lt;media&gt;on&lt;/media&gt;&#xd;
 &lt;/notifications&gt;&#xd;
&lt;/entry&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
                    <stringProp name="HTTPSampler.port">${https.port}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/files/form/api/library/${file.library.id}/document/${file.id}/entry</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Update-Nonce</stringProp>
                          <stringProp name="Header.value">${security.nonce}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user 2 comments on file" enabled="true"/>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                        <stringProp name="Authorization.username">${user_3}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_2}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] comment on  file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:td=&quot;urn:ibm.com/td&quot;&gt;
    &lt;id&gt;${community.file.urn}&lt;/id&gt;
    &lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;comment&quot; label=&quot;comment&quot;/&gt;
    &lt;title type=&quot;text&quot;&gt;${file.name}&lt;/title&gt;
    &lt;content type=&apos;text&apos;&gt;${runLabel} ${runLabel1} jmeter comment&lt;/content&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/basic/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC]  user 0 (D) comments on file" enabled="true"/>
                <hashTree>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url">https://${server.name}/files</stringProp>
                        <stringProp name="Authorization.username">${user_3}</stringProp>
                        <stringProp name="Authorization.password">Pa88w0rd</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                  </AuthManager>
                  <hashTree/>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] Login ${user_0}" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.name" elementType="Argument">
                          <stringProp name="Argument.name">user.name</stringProp>
                          <stringProp name="Argument.value">${user_0}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.password" elementType="Argument">
                          <stringProp name="Argument.name">user.password</stringProp>
                          <stringProp name="Argument.value">${user_0.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] comment on  file" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="RestSampler.request_body">&lt;entry xmlns=&quot;http://www.w3.org/2005/Atom&quot; xmlns:td=&quot;urn:ibm.com/td&quot;&gt;
    &lt;id&gt;${community.file.urn}&lt;/id&gt;
    &lt;category scheme=&quot;tag:ibm.com,2006:td/type&quot; term=&quot;comment&quot; label=&quot;comment&quot;/&gt;
    &lt;title type=&quot;text&quot;&gt;${file.name}&lt;/title&gt;
    &lt;content type=&apos;text&apos;&gt;${runLabel} ${runLabel2} jmeter comment&lt;/content&gt;
&lt;/entry&gt;</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
                    <stringProp name="RestSampler.resource">files/basic/api/library/${file.library.id}/document/${file.id}/feed</stringProp>
                    <stringProp name="RestSampler.port_number">${https.port}</stringProp>
                    <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
                  </com.atlantbh.jmeter.plugins.rest.RestSampler>
                  <hashTree>
                    <com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor guiclass="com.atlantbh.jmeter.plugins.xmlformatter.gui.XMLFormatPostProcessorGui" testclass="com.atlantbh.jmeter.plugins.xmlformatter.XMLFormatPostProcessor" testname="XML Format Post Processor" enabled="true"/>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-795477064">[SC] Logout</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;END FVT TESTS&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FVT GET,SAVE AND CHECK EMAIL" enabled="true">
              <stringProp name="IfController.condition">&quot;${fvt.tests.run}&quot; == &quot;true&quot;  &amp;&amp; &quot;${tests.mailchecks.run}&quot; == &quot;true&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="[TA] Pause" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">${email.read.delay.ms}</stringProp>
              </TestAction>
              <hashTree>
                <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="[BSG] Log" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&quot;Pause for &quot; + vars.get(&quot;email.read.delay.ms&quot;) + &quot; ms, prior to email check&quot;);</stringProp>
                </BSFPreProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] SETUP MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">1 == 1</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var title=&quot;FVT SETUP MAIL CHECK&quot;;
SampleResult.setSampleLabel(title);
log.info(title);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user1 - user 3 folllowed you" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">followed you</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_3.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.followed.you.user3</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user1 - user 2 folllowed you" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">followed you</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_2.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.followed.you.user2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - added to priv community" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been added to</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${commPriv01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.community.priv.added</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - added to mod community" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been added to</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${commMod01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.community.mod.added</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - added to pub community" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been added to</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.community.pub.added</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] ACTIVITIES MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${activites.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;FVT ACTIVITIES MAIL CHECK&quot;);
log.info(&quot;START FVT ACTIVITIES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user1 - activity created" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have created a new activity</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user1 activity created" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created an activity</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.created.user2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - user1 activity created" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created an activity</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.created.user3</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - todo created" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created a to-do item</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">TODO_${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.todo.created.user2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - todo created" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created a to-do item</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">TODO_${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.todo.created.user3</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check no mail user1 - todo created" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created a to-do item</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">TODO_${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.todo.created.user2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user1 reopened the todo" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">reopened the</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">TODO_${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.todo.reopened</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user1 completed todo" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">completed the</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">TODO_${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.todo.completed</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - user1 reopened the todo" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">reopened the</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">TODO_${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.todo.reopened</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - user1 completed todo" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">completed the</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">TODO_${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.todo.completed</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check no mail user1 - user1 completed todo" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">completed the</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">TODO_${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.todo.completed</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check no mail user1 - user1 reopened the todo" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">reopened the</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">TODO_${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.activity.todo.reopened</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] BLOGS MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${blogs.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;FVT BLOGS MAIL CHECK&quot;);
log.info(&quot;START FVT BLOGS MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user1 creates blog" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created a blog entry</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.blog.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="TestPlan.comments">Will rujhqA created a blog entry named XOMJIFAT JMETER TEST BLOG in the </stringProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - user1 creates blog" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created a blog entry</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.blog.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="TestPlan.comments">Will rujhqA created a blog entry named XOMJIFAT JMETER TEST BLOG in the </stringProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check no mail user0 - user1 creates blog" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_0}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_0.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_0.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created a blog entry</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.blog.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="TestPlan.comments">Will rujhqA created a blog entry named XOMJIFAT JMETER TEST BLOG in the </stringProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user1 - user2 commented on blog" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">commented on your</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${blog.entry.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_2.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.blog.commented.on</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="TestPlan.comments"> Will rujhqB commented on your 151112 JMETER TEST BLOG ENTRY blog entry in the 151112_commPub01 blog.</stringProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check no mail user3 - user2 commented on blog" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">commented on your</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${blog.entry.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_2.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.blog.commented.on</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="TestPlan.comments"> Will rujhqB commented on your 151112 JMETER TEST BLOG ENTRY blog entry in the 151112_commPub01 blog.</stringProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check no mail user2 - user2 commented on blog" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">commented on</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${blog.entry.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.blog.commented.on</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="TestPlan.comments"> Will rujhqB commented on your 151112 JMETER TEST BLOG ENTRY blog entry in the 151112_commPub01 blog.</stringProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user1 liked comment" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">liked your comment</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${blog.entry.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.blog.comment.like</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check no mail user3 - user1 liked comment" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">liked comment</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${blog.entry.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_2.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.blog.comment.like</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check no mail user1 - user1 liked comment" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">liked comment</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${blog.entry.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_2.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.blog.comment.like</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">${runLabel2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END BLOGS MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] COMMUNITIES MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">1 == 1</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;FVT COMMUNITIES MAIL CHECK&quot;);
log.info(&quot;START FVT COMMUNITIES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - added to community" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been added to</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.community.user2.added.to</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">added you to a community</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - removed from community" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">You have been removed from</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${commPub01.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.community.user2.removed.from</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value">has removed you from this community</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user1 added bookmark" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">bookmark</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.community.bookmark.added</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - user1 added bookmark" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">bookmark</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.community.bookmark.added</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user1 created event" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created the event</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.community.event.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - user1 created event" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created the event</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${runLabel}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.community.event.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] microblog msg posted to community" enabled="true">
                  <stringProp name="IfController.condition">&quot;${microblog.tests.run}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user1 posted message" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_2.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_2.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">posted a message</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text3" elementType="Argument">
                          <stringProp name="Argument.name">ra_text3</stringProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.fvt.community.msg.posted</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="email.test.positive" elementType="Argument">
                          <stringProp name="Argument.name">email.test.positive</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - user1 posted message" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="user.mail.id" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.id</stringProp>
                          <stringProp name="Argument.value">${user_3}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.name" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.name</stringProp>
                          <stringProp name="Argument.value">${user_3.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.pwd" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.pwd</stringProp>
                          <stringProp name="Argument.value">${user_3.password}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text1" elementType="Argument">
                          <stringProp name="Argument.name">ra_text1</stringProp>
                          <stringProp name="Argument.value">posted a message</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text2" elementType="Argument">
                          <stringProp name="Argument.name">ra_text2</stringProp>
                          <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ra_text3" elementType="Argument">
                          <stringProp name="Argument.name">ra_text3</stringProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="eml.file" elementType="Argument">
                          <stringProp name="Argument.name">eml.file</stringProp>
                          <stringProp name="Argument.value">notify.fvt.community.msg.posted</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.from" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.from</stringProp>
                          <stringProp name="Argument.value">${mail.general.from}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                          <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                          <stringProp name="Argument.value">${runLabel}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="email.test.positive" elementType="Argument">
                          <stringProp name="Argument.name">email.test.positive</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                        <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END COMMUNITIES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] WIKIS MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${wikis.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;FVT WIKIS MAIL CHECK&quot;);
log.info(&quot;START FVT WIKIS MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user1 - wiki like" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">liked the wiki page</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.wiki.like</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user1 - wiki commented on" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">commented on the wiki page</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.wiki.commented.on</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user 1 created wiki" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created a wiki page</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.wiki.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - user 1 created wiki" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">created a wiki page</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.wiki.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check no mail user1 - user 1 created wiki" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">wiki page</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.wiki.created</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END MICROBLOG MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] FILES MAIL CHECKS" enabled="true">
                <stringProp name="IfController.condition">&quot;${files.tests.run}&quot; == &quot;true&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log start" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">SampleResult.setSampleLabel(&quot;FVT FILES MAIL CHECK&quot;);
log.info(&quot;START FVT FILES MAIL CHECK&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user1 - userB/2 file commented on" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">commented on your file</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_2.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.file.userB.commented.on</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user1 - userD/0 file commented on" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_1.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_1.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">commented on your file</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_0.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.file.userD.commented.on</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user 1 shared file" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">shared the file</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.file.shared.user1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - user 1 shared file" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">shared the file</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.file.shared.user1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user2 - user 1 moved  file to folder" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_2.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_2.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">to the folder</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.file.folder.user1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="[PC] check mail user3 - user 1 moved  file to folder" enabled="true">
                  <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="user.mail.id" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.id</stringProp>
                        <stringProp name="Argument.value">${user_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.name" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.name</stringProp>
                        <stringProp name="Argument.value">${user_3.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.pwd" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.pwd</stringProp>
                        <stringProp name="Argument.value">${user_3.password}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text1" elementType="Argument">
                        <stringProp name="Argument.name">ra_text1</stringProp>
                        <stringProp name="Argument.value">to the folder</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text2" elementType="Argument">
                        <stringProp name="Argument.name">ra_text2</stringProp>
                        <stringProp name="Argument.value">${runLabel1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="ra_text3" elementType="Argument">
                        <stringProp name="Argument.name">ra_text3</stringProp>
                        <stringProp name="Argument.value">${user_1.display.name}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eml.file" elementType="Argument">
                        <stringProp name="Argument.name">eml.file</stringProp>
                        <stringProp name="Argument.value">notify.fvt.file.folder.user1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.from" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.from</stringProp>
                        <stringProp name="Argument.value">${mail.general.from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="user.mail.body.csv.strings" elementType="Argument">
                        <stringProp name="Argument.name">user.mail.body.csv.strings</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="email.test.positive" elementType="Argument">
                        <stringProp name="Argument.name">email.test.positive</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] check mails" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-548048992">[WorkBench] Modules</stringProp>
                      <stringProp name="-1789253415">[SC] check user mailbox for notification email</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log end" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">log.info(&quot;END FILES MAIL CHECK&quot;);
log.info(&quot;=============================================================&quot;);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="[BSF] log run info" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">log.info(&quot;END ALL NOTIFICATION TESTS&quot;);
log.info(&quot;=============================================================&quot;);

OUT.println(&quot;END ALL NOTIFICATION TESTS&quot;);
OUT.println(&quot;=============================================================&quot;);</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </BSFSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="[LOG] RAW - Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="[LOG] Assertion Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>false</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <url>true</url>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${responses.dir}/assertions.txt</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="[LOG] Save Responses to a file" enabled="true">
        <stringProp name="FileSaver.filename">${responses.dir}/notify.failed.response</stringProp>
        <boolProp name="FileSaver.errorsonly">true</boolProp>
        <boolProp name="FileSaver.skipautonumber">false</boolProp>
        <boolProp name="FileSaver.skipsuffix">false</boolProp>
        <boolProp name="FileSaver.successonly">false</boolProp>
        <boolProp name="FileSaver.addTimstamp">true</boolProp>
      </ResultSaver>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="[WorkBench] Modules" enabled="true">
      <stringProp name="TestPlan.comments">Place to temporarily store test elements while not in use, for copy/paste purposes, or any other purpose you desire</stringProp>
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Login user.name/user.password" enabled="true">
        <stringProp name="TestPlan.comments">Expected Input: ${user.name} and ${user.password}</stringProp>
      </GenericController>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Host</stringProp>
              <stringProp name="Header.value">${server.name}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Referer</stringProp>
              <stringProp name="Header.value">https://${server.name}/homepage/</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="[BSF PP] log login" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">log.info(&quot;Logging in &quot; + vars.get(&quot;user.name&quot;) + &quot; \\ Password [&quot; + vars.get(&quot;user.password&quot;) + &quot;]&quot;);
</stringProp>
        </BSFPreProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] is onprem" enabled="true">
          <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;onprem&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[LOGIN] onprem ${user.name}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${user.name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                </elementProp>
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${user.password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                </elementProp>
                <elementProp name="secure" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">secure</stringProp>
                </elementProp>
                <elementProp name="fragment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fragment</stringProp>
                </elementProp>
                <elementProp name="service.name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">service.name</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
            <stringProp name="HTTPSampler.port">${https.port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/homepage/j_security_check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Login Error 1" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-902230277">.*error=true.*</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">5</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Login Error 2" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1361788923">Your user name and/or password does not match any existing accounts</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="[BS Ass] stop if login fails" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (ResponseCode != null &amp;&amp; ResponseCode.equals (&quot;200&quot;) == false ){
	log.info(&quot;login failed, stopping thread&quot;);
	SampleResult.setStopThread(true);
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] is cloud" enabled="true">
          <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;cloud&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[LOGIN] cloud ${user.name}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="login-form-type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">pwd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">login-form-type</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${user.password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${user.name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
            <stringProp name="HTTPSampler.port">${https.port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pkmslogin.form</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] check login" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">login.fail.token</stringProp>
              <stringProp name="RegexExtractor.regex">(Please check your login credentials and (try again))</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Login Error 1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-553610344">Please check your login credentials and try again</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP]  stop if login fails" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">token=vars.get(&quot;login.fail.token&quot;);

if (token == &quot;try again&quot;){
	prev.setSuccessful(false);
	errmsg=&quot;Login failed, stopping tests&quot;;
	prev.setResponseMessage(errmsg);
	log.info(errmsg);
	prev.setStopTest(true);
}

 </stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Logout" enabled="true">
        <stringProp name="TestPlan.comments">Expected Input (for logging only): ${user.name} and ${user.password}</stringProp>
      </GenericController>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] logout onprem" enabled="true">
          <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;onprem&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[LOGOUT] ${user.name}/${user.password}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="logoutExitPage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">logoutExitPage</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
            <stringProp name="HTTPSampler.port">${https.port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/homepage/ibm_security_logout</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">${http.header.accept.login}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${server.name}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${server.name}/${app.login.context}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP} log logout" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Logged out &quot; + vars.get(&quot;user.name&quot;) + &quot; \\ Password [&quot; + vars.get(&quot;user.password&quot;) + &quot;]&quot;);</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] logout cloud" enabled="true">
          <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;cloud&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">${http.header.accept.login}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${server.name}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${server.name}/${app.login.context}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP} log logout" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Logged out &quot; + vars.get(&quot;user.name&quot;) + &quot; \\ Password [&quot; + vars.get(&quot;user.password&quot;) + &quot;]&quot;);</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[LOGOUT] ${user.name}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
            <stringProp name="HTTPSampler.port">${https.port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pkmslogout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Set Notification Preferences" enabled="true"/>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Login" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="0"></stringProp>
            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
            <stringProp name="-121917896">[SC] Login user.name/user.password</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP]  Request to get Preferences page to get nonce" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
          <stringProp name="HTTPSampler.port">${http.port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/news/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="X-Update-Nonce Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">email.prefs.update.nonce</stringProp>
            <stringProp name="RegexExtractor.regex">(nonceValue=&quot;(.*)&quot;)</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">-1</stringProp>
            <stringProp name="RegexExtractor.match_number">2</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Setting prefs for ${user.name}, nonce is &quot; + vars.get(&quot;email.prefs.update.nonce&quot;) + &quot; ,frequency is &quot; + vars.get(&quot;email.notify.pref.frequency&quot;));</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP]  Save Email Notifications Preferences" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.prefs.update.nonce}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">X-Update-Nonce</stringProp>
              </elementProp>
              <elementProp name="directNotifications" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${direct.notifications}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">directNotifications</stringProp>
              </elementProp>
              <elementProp name="language" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">xx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">language</stringProp>
              </elementProp>
              <elementProp name="activitiesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">activitiesFrequency</stringProp>
              </elementProp>
              <elementProp name="blogsFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">blogsFrequency</stringProp>
              </elementProp>
              <elementProp name="bookmarksFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">bookmarksFrequency</stringProp>
              </elementProp>
              <elementProp name="communitiesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">communitiesFrequency</stringProp>
              </elementProp>
              <elementProp name="filesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filesFrequency</stringProp>
              </elementProp>
              <elementProp name="forumsFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">forumsFrequency</stringProp>
              </elementProp>
              <elementProp name="mentionsFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">mentionsFrequency</stringProp>
              </elementProp>
              <elementProp name="profilesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">profilesFrequency</stringProp>
              </elementProp>
              <elementProp name="responsesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">responsesFrequency</stringProp>
              </elementProp>
              <elementProp name="tagsFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tagsFrequency</stringProp>
              </elementProp>
              <elementProp name="wikisFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">wikisFrequency</stringProp>
              </elementProp>
              <elementProp name="ecm_filesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.notify.pref.frequency}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ecm_filesFrequency</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
          <stringProp name="HTTPSampler.port">${http.port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/news/web/updateEmailDigestSettings.action</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">moment setting all to individual</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Add X-Update-Nonce Cookie" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.util.*;
import java.lang.Math;
import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

manager = sampler.getCookieManager();
cookie = new Cookie(&quot;X-Update-Nonce&quot;, vars.get(&quot;email.prefs.update.nonce&quot;), &quot;${server.name}&quot;, &quot;/news&quot;, false, 2000000000);
manager.add(cookie);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="[BSF Assertion] check json for success = true" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var resp = &apos; + prev.getResponseDataAsString());

if (!resp.success || resp.success != &quot;true&quot;){
  AssertionResult.setFailure(true);
  AssertionResult.setFailureMessage(&quot;ERROR: response does not contain true for success&quot;);
}
</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] Logout" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="0"></stringProp>
            <stringProp name="-548048992">[WorkBench] Modules</stringProp>
            <stringProp name="-795477064">[SC] Logout</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Reset Notification Preferences" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP]  Request to get Preferences page to get nonce" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
          <stringProp name="HTTPSampler.port">${http.port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/news/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="X-Update-Nonce Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">email.prefs.update.nonce</stringProp>
            <stringProp name="RegexExtractor.regex">(nonceValue=&quot;(.*)&quot;)</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">-1</stringProp>
            <stringProp name="RegexExtractor.match_number">2</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&apos;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&apos;);
log.info(&apos;email.prefs.update.nonce&apos;);
log.info( vars.get(&quot;email.prefs.update.nonce&quot;));
log.info(&apos;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&apos;);</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] Restore Default Email Notifications Preferences" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="X-Update-Nonce" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${email.prefs.update.nonce}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">X-Update-Nonce</stringProp>
              </elementProp>
              <elementProp name="directNotifications" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">directNotifications</stringProp>
              </elementProp>
              <elementProp name="language" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">xx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">language</stringProp>
              </elementProp>
              <elementProp name="activitiesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">daily</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">activitiesFrequency</stringProp>
              </elementProp>
              <elementProp name="blogsFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">daily</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">blogsFrequency</stringProp>
              </elementProp>
              <elementProp name="bookmarksFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">weekly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">bookmarksFrequency</stringProp>
              </elementProp>
              <elementProp name="communitiesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">daily</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">communitiesFrequency</stringProp>
              </elementProp>
              <elementProp name="filesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">individual</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filesFrequency</stringProp>
              </elementProp>
              <elementProp name="forumsFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">daily</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">forumsFrequency</stringProp>
              </elementProp>
              <elementProp name="mentionsFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">individual</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">mentionsFrequency</stringProp>
              </elementProp>
              <elementProp name="profilesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">daily</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">profilesFrequency</stringProp>
              </elementProp>
              <elementProp name="responsesFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">individual</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">responsesFrequency</stringProp>
              </elementProp>
              <elementProp name="tagsFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">weekly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tagsFrequency</stringProp>
              </elementProp>
              <elementProp name="wikisFrequency" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">weekly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">wikisFrequency</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
          <stringProp name="HTTPSampler.port">${http.port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/news/web/resetEmailDigestSettings.action</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">moment setting all to individual</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Add X-Update-Nonce Cookie" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.util.*;
import java.lang.Math;
import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;

manager = sampler.getCookieManager();
cookie = new Cookie(&quot;X-Update-Nonce&quot;, vars.get(&quot;email.prefs.update.nonce&quot;), &quot;${server.name}&quot;, &quot;/news&quot;, false, 2000000000);
manager.add(cookie);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="[BSF Assertion] check json for success = true" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var resp = &apos; + prev.getResponseDataAsString());

if (!resp.success || resp.success != &quot;true&quot;){
  AssertionResult.setFailure(true);
  AssertionResult.setFailureMessage(&quot;ERROR: response does not contain true for success&quot;);
}
</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Add community" enabled="true"/>
      <hashTree>
        <com.atlantbh.jmeter.plugins.rest.RestSampler guiclass="com.atlantbh.jmeter.plugins.rest.gui.RestGui" testclass="com.atlantbh.jmeter.plugins.rest.RestSampler" testname="[REST] add community" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="RestSampler.request_body">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;entry
        xmlns=&quot;http://www.w3.org/2005/Atom&quot;
        xmlns:app=&quot;http://www.w3.org/2007/app&quot;
        xmlns:snx=&quot;http://www.ibm.com/xmlns/prod/sn&quot;&gt;

    &lt;id&gt;ignored&lt;/id&gt;
    &lt;title type=&quot;text&quot;&gt;${community.name}&lt;/title&gt;
    &lt;summary type=&quot;text&quot;&gt;ignored&lt;/summary&gt;
    &lt;content type=&quot;html&quot;&gt;${community.content}&lt;/content&gt;
    &lt;published&gt;ignored&lt;/published&gt;

    &lt;author&gt;
        &lt;name&gt;${user1.displayName}&lt;/name&gt;
        &lt;email&gt;${user1.email}&lt;/email&gt;
        &lt;snx:userid&gt;${user1.id}&lt;/snx:userid&gt;
        &lt;snx:userState&gt;active&lt;/snx:userState&gt;
    &lt;/author&gt;

    &lt;updated&gt;ignored&lt;/updated&gt;

    &lt;contributor&gt;
        &lt;name&gt;${user1.displayName}&lt;/name&gt;
        &lt;email&gt;${user1.email}&lt;/email&gt;
        &lt;snx:userid&gt;${user1.id}&lt;/snx:userid&gt;
        &lt;snx:userState&gt;active&lt;/snx:userState&gt;
    &lt;/contributor&gt;

    &lt;category term=&quot;community&quot; scheme=&quot;http://www.ibm.com/xmlns/prod/sn/type&quot;&gt;&lt;/category&gt;
    &lt;snx:membercount&gt;ignored&lt;/snx:membercount&gt;
    &lt;snx:communityType&gt;public&lt;/snx:communityType&gt;
&lt;/entry&gt;

</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <stringProp name="RestSampler.base_host">https://${server.name}</stringProp>
          <stringProp name="RestSampler.resource">communities/service/atom/communities/my</stringProp>
          <stringProp name="RestSampler.port_number">${https.port}</stringProp>
          <stringProp name="RestSampler.request_headers">Content-Type: application/atom+xml</stringProp>
        </com.atlantbh.jmeter.plugins.rest.RestSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="[BS PP] create community values" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.util.*;
import java.lang.Math;
r = new Random();
max = 10000;
random_number = r.nextInt(max) + 1;
vars.put(&quot;community.name&quot;, &quot;#&quot; + random_number.toString() + &quot;# JMETER TEST COMMUNITY&quot;);
vars.put(&quot;community.content&quot;, &quot;~&quot; + random_number.toString() + &quot;~ blah blah blah ....&quot;);
vars.put(&quot;community.file.name&quot;, &quot;TestFile&quot; + random_number.toString() + &quot;.txt&quot;);
vars.put(&quot;community.comment.text&quot;, &quot;Test comment &quot; + random_number.toString() + &quot;. \nIts a beautiful day!&quot;);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] code 201" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] not code 409" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51517">409</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">conflict</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get community id" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">community.id</stringProp>
            <stringProp name="RegexExtractor.regex">(communityUuid=(.*))</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">-1</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[RegEx] get edit location" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">community.edit.path</stringProp>
            <stringProp name="RegexExtractor.regex">(Location: (.*)${https.port}/(.*))</stringProp>
            <stringProp name="RegexExtractor.template">$3$</stringProp>
            <stringProp name="RegexExtractor.default">-1</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&apos;community.id :: &apos; + vars.get(&quot;community.id&quot;));
log.info(&apos;community.edit.path :: &apos; + vars.get(&quot;community.edit.path&quot;));
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="[ForEach] Search Users" enabled="true">
        <stringProp name="ForeachController.inputVal">user</stringProp>
        <stringProp name="ForeachController.returnVal">user</stringProp>
        <boolProp name="ForeachController.useSeparator">true</boolProp>
        <stringProp name="ForeachController.startIndex">-1</stringProp>
        <stringProp name="ForeachController.endIndex">3</stringProp>
      </ForeachController>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end">10</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">idx</stringProp>
          <stringProp name="CounterConfig.format">0</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] search onprem" enabled="true">
          <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;onprem&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] search user ${user}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="social" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">{&quot;type&quot;:&quot;personEmail&quot;,&quot;id&quot;:&quot;${user}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">social</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
            <stringProp name="HTTPSampler.port">${http.port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/search/atomfba/mysearch</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="[RA] 0 search results" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-927293849">&lt;openSearch:totalResults&gt;0&lt;/openSearch:totalResults&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="[XPath] get user id" enabled="true">
              <stringProp name="XPathExtractor.default">-1</stringProp>
              <stringProp name="XPathExtractor.refname">user_${idx}.id</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/:feed/:entry/:author/snx:userid</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get profile key" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">user_${idx}.profile.key</stringProp>
              <stringProp name="RegexExtractor.regex">(profileView.do\?key=(.*?)&quot;)</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(vars.get(&quot;user_${idx}&quot;) + &apos; [ user_${idx}.id :: &apos; + vars.get(&quot;user_${idx}.id&quot;) + &apos;]&apos;);
log.info(vars.get(&quot;user_${idx}&quot;) + &apos; [ user_${idx}.profile.key :: &apos; + vars.get(&quot;user_${idx}.profile.key&quot;) + &apos;]&apos;);</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="[IFC] search cloud" enabled="true">
          <stringProp name="IfController.condition">&quot;${test.type}&quot; == &quot;cloud&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HTTP] search user ${user}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageNum" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pageNum</stringProp>
                </elementProp>
                <elementProp name="pageSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pageSize</stringProp>
                </elementProp>
                <elementProp name="queryField" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">custsubscribers.byEmail</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">queryField</stringProp>
                </elementProp>
                <elementProp name="queryValue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${user}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">queryValue</stringProp>
                </elementProp>
                <elementProp name="queryValueText" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${user}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">queryValueText</stringProp>
                </elementProp>
                <elementProp name="sortAttribute" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">subscriber.person.displayName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sortAttribute</stringProp>
                </elementProp>
                <elementProp name="sortDirection" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">DESC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sortDirection</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
            <stringProp name="HTTPSampler.port">${https.port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/manage/subscribers/companyList/input</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get user id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">user_${idx}.id</stringProp>
              <stringProp name="RegexExtractor.regex">(SubscriberId=(.*)&apos;)</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="[Reg Ex] get user name" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">user_${idx}.display.name</stringProp>
              <stringProp name="RegexExtractor.regex">(SubscriberId=(.*)&apos;\);&quot;&gt;(.*)&lt;/a&gt;)</stringProp>
              <stringProp name="RegexExtractor.template">$3$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="[BSF PP] log response" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(vars.get(&quot;user_${idx}&quot;) + &apos; [ user_${idx}.id :: &apos; + vars.get(&quot;user_${idx}.id&quot;) + &apos;]&apos;);
log.info(vars.get(&quot;user_${idx}&quot;) + &apos; [ user_${idx}.display.name :: &apos; + vars.get(&quot;user_${idx}.display.name&quot;) + &apos;]&apos;);

userIdentifier=vars.get(&quot;user_${idx}.id&quot;)
if (userIdentifier == -1){
	prev.setSuccessful(false);
	errmsg=&quot;Could not find users id, stopping tests as need users id for execution&quot;
	prev.setResponseMessage(errmsg);
	log.info(errmsg);
	prev.setStopTest(true);
}

 </stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] check user mailbox for notification email" enabled="true"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[SC] Check Mail" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[mail check]" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server.name}</stringProp>
            <stringProp name="HTTPSampler.port">${https.port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pkmslogout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">jython</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import urllib2
import json
import re

class logx:
    @classmethod
    def info(self,msg):
        print msg
        log.info(msg)

class CheckBluebox:
    def __init__(self,userEmail):
        try:
            #self.userEmail=userEmail.split(&apos;@&apos;)[0].lower()
            self.userEmail=userEmail.lower()
            logx.info(&quot;checking email for &quot; + self.userEmail)
            self.inboxJson={}
            self.blueboxHost=&quot;bluebox.lotus.com&quot;
            self.blueboxInbox = &apos;http://&apos; + self.blueboxHost + &apos;/bluebox/rest/json/inbox/&apos; + self.userEmail + &quot;/0/&quot;
            self.blueboxMessage = &apos;http://&apos; + self.blueboxHost + &apos;/bluebox/rest/json/inbox/detail/&apos;
            logx.info(&quot;-&gt; getting ~&quot; + self.blueboxInbox)
            headers = {&apos;Host&apos; : self.blueboxHost,&apos;content-type&apos; : &apos;application/json&apos;, &apos;X-Requested-With&apos;: &apos;XMLHttpRequest&apos;,&apos;Range&apos;: &apos;items=0-24&apos;}
            rq = urllib2.Request(self.blueboxInbox, None, headers)
            req = urllib2.urlopen(rq)
            data=req.read()
            self.inboxJson=json.loads(data, strict=False)
        except Exception as e:
            logx.info(&quot;ERR: &quot; + e.message)
        finally:
            try:
                req.close()
            except Exception as e:
                logx.info(&quot;ERR:: &quot; + e.message)

    def __getMessageId(self,fromAddress=None,subjectPattern1=None,subjectPattern2=None,subjectPattern3=None):
        infoMsg = &quot;message for &quot; + self.userEmail + &quot; from &quot; + fromAddress + &quot; with matches for [&quot; + subjectPattern1 + &quot;]&quot; + &quot; [&quot; + subjectPattern2 + &quot;]&quot;
        messages = []

        try:
            for msg in self.inboxJson:
                if msg[&quot;Sender&quot;][0].find(fromAddress) != -1:
                    if re.search(subjectPattern1, msg[&quot;Subject&quot;]) is not None and re.search(subjectPattern2,msg[&quot;Subject&quot;]) is not None:
                        if subjectPattern3 is None:
                            messages.append(msg)
                        elif subjectPattern3 is not None and re.search(subjectPattern3, msg[&quot;Subject&quot;]) is not None:
                            messages.append(msg)

            if (len(messages) == 1):
                logx.info(&quot;got &quot; + infoMsg)
                return messages[0][&quot;Uid&quot;]
            elif (len(messages) &gt; 1):  # return newest email
                #messages=messages[::-1]
                log.info(&quot;got newest &quot; + infoMsg)
                return messages[0][&quot;Uid&quot;]
            else:
                logx.info(&quot;no &quot; + infoMsg)
        except Exception as e:
            logx.info(&quot;ERR# &quot; + e.message)

        return None


    def getMessage(self,fromAddress=None,subjectPattern1=None,subjectPattern2=None):
        msgId = self.__getMessageId(fromAddress,subjectPattern1,subjectPattern2)
        if msgId is None:
            return
        else:
            logx.info(&quot;msgId returned : &quot; + msgId + &quot; [from:&quot; + fromAddress + &quot;]&quot;)

        try:
            url = self.blueboxMessage + msgId
            logx.info(&quot;-&gt; getting ~&quot; + url)
            req1 = urllib2.urlopen(url)
            data=req1.read().decode(&apos;utf-8&apos;)
            msgJson=json.loads(data, strict=False)

            messagePlain=msgJson[&quot;TextBody&quot;]
            messageHtml=msgJson[&quot;HtmlBody&quot;]
            self.messageContent=messageHtml
            return self.messageContent
        except Exception as e:
            logx.info(&quot;ERR; &quot; + e.message)
        finally:
            try:
                req1.close()
            except Exception as e:
                logx.info(&quot;ERR;; &quot; + e.message)

        return

    def testMessageForStrings(self, csvStrings):
        if (len(csvStrings) == 0):
            return True

        strings=csvStrings.split(&quot;,&quot;)
        for string in strings:
            logx.info(&quot;looking for [&quot; + string + &quot;] in message&quot;)
            if not string.find(self.messageContent):
                log.info(&quot;can not find [&quot; + string + &quot;] in message&quot;)
                return False
            else:
                logx.info(&quot;found [&quot; + string + &quot;] in message&quot;)
        return True

#end of class
########################################################################################################################

class CheckMailinator:
    def __init__(self,userEmail):
        try:
            logx.info(&quot;checking email for &quot; + userEmail)
            self.inboxJson={}
            self.userEmail=userEmail
            self.mailinatorToken=&apos;0e09a9096e8340a7927e31d7b26fe220&apos;
            self.mailinatorInbox=&apos;http://api.mailinator.com/api/inbox?token=&apos; + self.mailinatorToken + &apos;&amp;to=&apos; + userEmail
            self.mailinatorMessage=&apos;http://api.mailinator.com/api/email?token=&apos; + self.mailinatorToken + &apos;&amp;msgid=&apos;
            log.info(&quot;-&gt; getting ~&quot; + self.mailinatorInbox)
            req = urllib2.urlopen(self.mailinatorInbox)
            data=req.read()
            self.inboxJson=json.loads(data, strict=False)
        except Exception as e:
            logx.info(&quot;ERR: &quot; + e.message)
        finally:
            try:
                req.close()
            except Exception as e:
                logx.info(&quot;ERR:: &quot; + e.message)

    def __getMessageId(self,fromAddress=None,subjectPattern1=None,subjectPattern2=None,subjectPattern3=None):
        infoMsg = &quot;message for &quot; + self.userEmail + &quot; from &quot; + fromAddress + &quot; with matches for [&quot; + subjectPattern1 + &quot;]&quot; + &quot; [&quot; + subjectPattern2 + &quot;]&quot;
        messages = []

        try:
            for msg in self.inboxJson[&quot;messages&quot;]:
                if msg[&quot;fromfull&quot;] == fromAddress:
                    if re.search(subjectPattern1, msg[&quot;subject&quot;]) is not None and re.search(subjectPattern2,msg[&quot;subject&quot;]) is not None:
                        if subjectPattern3 is None:
                            messages.append(msg)
                        elif subjectPattern3 is not None and re.search(subjectPattern3, msg[&quot;Subject&quot;]) is not None:
                            messages.append(msg)

            if (len(messages) == 1):
                logx.info(&quot;got &quot; + infoMsg)
                return messages[0][&quot;id&quot;]
            elif (len(messages) &gt; 1):  # return newest email
                msgs = sorted(messages, key=lambda k: k[&apos;seconds_ago&apos;], reverse=False)
                logx.info(&quot;got newest &quot; + infoMsg)
                return msgs[0][&quot;id&quot;]
            else:
                logx.info(&quot;no &quot; + infoMsg)
        except Exception as e:
            logx.info(&quot;ERR# &quot; + e.message)

        return None


    def getMessage(self,fromAddress=None,subjectPattern1=None,subjectPattern2=None):
        msgId = self.__getMessageId(fromAddress,subjectPattern1,subjectPattern2)
        if msgId is None:
            return
        else:
            print &quot;msgId returned : &quot; + msgId + &quot; [from:&quot; + fromAddress + &quot;]&quot;
            logx.info(&quot;msgId returned : &quot; + msgId + &quot; [from:&quot; + fromAddress + &quot;]&quot;)

        try:
            url = self.mailinatorMessage + msgId
            logx.info(&quot;-&gt; getting ~&quot; + url)
            req1 = urllib2.urlopen(url)
            data=req1.read()
            msgJson=json.loads(data, strict=False)

            for part in msgJson[&quot;data&quot;][&quot;parts&quot;]:
                contentType=part[&quot;headers&quot;][&quot;content-type&quot;]
                body=part[&quot;body&quot;]

                if &quot;text/html&quot; in contentType:
                    messageHtml=body

            self.messageContent=messageHtml
            return messageHtml
        except Exception as e:
            logx.info(&quot;ERR; &quot; + repr(e) + &quot; - &quot; + e.message)
        finally:
            try:
                req1.close()
            except Exception as e:
                logx.info(&quot;ERR;; &quot; + e.message)

        return

    def testMessageForStrings(self, csvStrings):
        if (len(csvStrings) == 0):
            return True

        strings=csvStrings.split(&quot;,&quot;)
        for string in strings:
            logx.info(&quot;looking for [&quot; + string + &quot;] in message&quot;)
            if not string.find(self.messageContent):
                logx.info(&quot;can not find [&quot; + string + &quot;] in message&quot;)
                return False
            else:
                logx.info(&quot;found [&quot; + string + &quot;] in message&quot;)
        return True

#end of class
########################################################################################################################

def saveMessage(messageText,filename):
    try:
        file = open(filename, &quot;w&quot;)
        file.write(messageText.encode(&apos;UTF-16&apos;))
        file.close()
        logx.info(filename + &quot; saved&quot;)
    except Exception as e:
        logx.info(e.message)

def main():
    if &quot;bluebox&quot; in l_user:
        mailBox = CheckBluebox(l_user)
    else:
        mailBox = CheckMailinator(l_user)

    msg = mailBox.getMessage(l_from, l_mailSubject1, l_mailSubject2)
    if msg is None:
        if l_testPositive is not None and l_testPositive == &quot;false&quot;:
            prev.setSuccessful(True);
            errmsg = &quot;Could not find email notification, successful test&quot;
            prev.setResponseMessage(errmsg);
            logx.info(errmsg);
        else:
            prev.setSuccessful(False);
            errmsg = &quot;Could not find email notification, failing test&quot;
            prev.setResponseMessage(errmsg);
            logx.info(errmsg);
    else:
        if l_testPositive is not None and l_testPositive == &quot;false&quot;:
            saveMessage(msg, l_saveFolder + &quot;/ERR_&quot; + l_mailFileName )
            prev.setSuccessful(False);
            errmsg = &quot;Found email notification, failed test&quot;
            prev.setResponseMessage(errmsg);
            logx.info(errmsg);
        else:
            saveMessage(msg, l_saveFolder + &quot;/&quot; + l_mailFileName)
            mailBox.testMessageForStrings(l_csvMailBodyStringsToLookFor)

########################################################################################################################
l_user = &quot;${user.mail.name}&quot;;
l_username = l_user.split(&quot;@&quot;)[0];
l_saveFolder=&quot;${responses.dir}&quot;;
l_mailFile = l_username + &quot;.&quot; + &quot;${eml.file}&quot;;
l_mailFileName = l_mailFile + &quot;.${runLabel}.html&quot;;
l_mailSubject1 = &quot;${ra_text1}&quot;;
l_mailSubject2 = &quot;${ra_text2}&quot;;
l_mailSubject3 = &quot;${ra_text3}&quot;;
l_user = &quot;${user.mail.name}&quot;;
l_type = &quot;${user.mail.type}&quot;;
l_from = &quot;${user.mail.from}&quot;;
l_csvMailBodyStringsToLookFor = &quot;${user.mail.body.csv.strings}&quot;;
l_testPositive = &quot;${email.test.positive}&quot;;

logx.info(&quot;l_testPositive is &quot; + l_testPositive);
if l_testPositive is not None and l_testPositive == &quot;false&quot;:
    prev.setSampleLabel(&quot;check no mail: &quot; + l_mailFile + &quot;,subject:&quot; + l_mailSubject1)
else:
    prev.setSampleLabel(&quot;check mail: &quot; + l_mailFile + &quot;,subject:&quot; + l_mailSubject1)

main()
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="true">
        <stringProp name="ProxyControlGui.port">9090</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="-1330403993">.*\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff)</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
      </ProxyControl>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/generate_204" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.gstatic.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/generate_204</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/service/html/communitycreate" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/service/html/communitycreate</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/ownedcommunities</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/navbar/banner/communities/ocsBanner" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="oneui" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oneui</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">9b875286b8e584138ad333aef95b596a</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cre" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cre</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="helpURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">helpURL</stringProp>
                  <stringProp name="Argument.value">https%3A%2F%2Fapps.basesandbox09.swg.usma.ibm.com%2Fhelp%2Findex.jsp</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/navbar/banner/communities/ocsBanner</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitycreate</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/connections/opensocial/common/tokenRefresh" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">container</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u</stringProp>
                  <stringProp name="Argument.value">DA39A3EE5E6B4B0D3255BFEF95601890AFD80709</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/connections/opensocial/common/tokenRefresh</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="X-Update-Nonce" elementType="Header">
                  <stringProp name="Header.name">X-Update-Nonce</stringProp>
                  <stringProp name="Header.value">check</stringProp>
                </elementProp>
                <elementProp name="X-IC-CRE-Request-Origin" elementType="Header">
                  <stringProp name="Header.name">X-IC-CRE-Request-Origin</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitycreate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitycreate</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/manage/navbar/footer/communities" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="oneui" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oneui</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="elemId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">elemId</stringProp>
                  <stringProp name="Argument.value">footer</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="footerLocale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">footerLocale</stringProp>
                  <stringProp name="Argument.value">en-us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/manage/navbar/footer/communities</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitycreate</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/navbar/proxy" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">service</stringProp>
                  <stringProp name="Argument.value">communities</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">navbar_dyn_communities</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="parentMenu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">parentMenu</stringProp>
                  <stringProp name="Argument.value">communitiesMenu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callback</stringProp>
                  <stringProp name="Argument.value">navigation_replace_dyn_link_placeholder</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/navbar/proxy</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitycreate</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/service/html/autoCompleteTags.do" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="format" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">format</stringProp>
                  <stringProp name="Argument.value">v2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tag" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tag</stringProp>
                  <stringProp name="Argument.value">fre</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/service/html/autoCompleteTags.do</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitycreate</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/service/html/communityaddsubmit?X-Update-Nonce=9b875286b8e584138ad333aef95b596a" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="members" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">members</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="owners" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owners</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="memberemails" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">memberemails</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="owneremails" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owneremails</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">fre</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="publicAccess" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">publicAccess</stringProp>
                  <stringProp name="Argument.value">privateAccess</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="externalAccess" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">externalAccess</stringProp>
                  <stringProp name="Argument.value">allowExternal</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="description" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">description</stringProp>
                  <stringProp name="Argument.value">&lt;p dir=&quot;ltr&quot;&gt;fre&lt;/p&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tagsList" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tagsList</stringProp>
                  <stringProp name="Argument.value">fre</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="owners_P" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owners_P</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="authors_P" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">authors_P</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="owners_PE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owners_PE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="authors_PE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">authors_PE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="owners_G" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owners_G</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="authors_G" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">authors_G</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="owners_C" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owners_C</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="authors_C" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">authors_C</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bhc_PeopleTypeAhead" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bhc_PeopleTypeAhead</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">submit</stringProp>
                  <stringProp name="Argument.value">Save</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/service/html/communityaddsubmit?X-Update-Nonce=9b875286b8e584138ad333aef95b596a</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitycreate</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/service/html/communityaddsubmit?X-Update-Nonce=9b875286b8e584138ad333aef95b596a" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="members" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">members</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="owners" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owners</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="memberemails" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">memberemails</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="owneremails" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owneremails</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">fre</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="publicAccess" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">publicAccess</stringProp>
                  <stringProp name="Argument.value">privateAccess</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="externalAccess" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">externalAccess</stringProp>
                  <stringProp name="Argument.value">allowExternal</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="description" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">description</stringProp>
                  <stringProp name="Argument.value">&lt;p dir=&quot;ltr&quot;&gt;fre&lt;/p&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tagsList" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tagsList</stringProp>
                  <stringProp name="Argument.value">fre</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="owners_P" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owners_P</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="authors_P" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">authors_P</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="owners_PE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owners_PE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="authors_PE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">authors_PE</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="owners_G" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owners_G</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="authors_G" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">authors_G</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="owners_C" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">owners_C</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="authors_C" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">authors_C</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bhc_PeopleTypeAhead" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bhc_PeopleTypeAhead</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">submit</stringProp>
                  <stringProp name="Argument.value">Save</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/service/html/communityaddsubmit?X-Update-Nonce=9b875286b8e584138ad333aef95b596a</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitycreate</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/service/html/communitystart" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="communityUuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">communityUuid</stringProp>
                  <stringProp name="Argument.value">a4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ftHelpTip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ftHelpTip</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/service/html/communitystart</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitycreate</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/navbar/banner/communities/ocsBanner" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="oneui" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oneui</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">9b875286b8e584138ad333aef95b596a</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cre" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cre</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="helpURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">helpURL</stringProp>
                  <stringProp name="Argument.value">https%3A%2F%2Fapps.basesandbox09.swg.usma.ibm.com%2Fhelp%2Findex.jsp</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/navbar/banner/communities/ocsBanner</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/service/html/image" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="communityUuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">communityUuid</stringProp>
                  <stringProp name="Argument.value">a4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lastMod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lastMod</stringProp>
                  <stringProp name="Argument.value">1418317724492</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="showDefaultForNoPermissions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">showDefaultForNoPermissions</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/service/html/image</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/widgetInfoPersistence.do" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="resourceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">resourceType</stringProp>
                  <stringProp name="Argument.value">community</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lang</stringProp>
                  <stringProp name="Argument.value">en_US</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="resourceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">resourceId</stringProp>
                  <stringProp name="Argument.value">a4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="appStartupDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">appStartupDate</stringProp>
                  <stringProp name="Argument.value">1418069476416</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lastMod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lastMod</stringProp>
                  <stringProp name="Argument.value">1418317725084</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/widgetInfoPersistence.do</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/manage/navbar/footer/communities" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="oneui" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oneui</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="elemId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">elemId</stringProp>
                  <stringProp name="Argument.value">footer</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="footerLocale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">footerLocale</stringProp>
                  <stringProp name="Argument.value">en-us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/manage/navbar/footer/communities</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/navbar/proxy" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">service</stringProp>
                  <stringProp name="Argument.value">communities</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                  <stringProp name="Argument.value">navbar_dyn_communities</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="parentMenu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">parentMenu</stringProp>
                  <stringProp name="Argument.value">communitiesMenu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callback</stringProp>
                  <stringProp name="Argument.value">navigation_replace_dyn_link_placeholder</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">ISO-8859-1</stringProp>
            <stringProp name="HTTPSampler.path">/navbar/proxy</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/connections/opensocial/common/tokenRefresh" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">container</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u</stringProp>
                  <stringProp name="Argument.value">52B5367352CE7DD85A63F82961698BB71772692B</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/connections/opensocial/common/tokenRefresh</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-Update-Nonce" elementType="Header">
                  <stringProp name="Header.name">X-Update-Nonce</stringProp>
                  <stringProp name="Header.value">check</stringProp>
                </elementProp>
                <elementProp name="X-IC-CRE-Request-Origin" elementType="Header">
                  <stringProp name="Header.name">X-IC-CRE-Request-Origin</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/widgetProcess.do" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="resourceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">resourceType</stringProp>
                  <stringProp name="Argument.value">community</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="resourceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">resourceId</stringProp>
                  <stringProp name="Argument.value">a4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">communityOverview</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/widgetProcess.do</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="X-Shindig-ST" elementType="Header">
                  <stringProp name="Header.name">X-Shindig-ST</stringProp>
                  <stringProp name="Header.value">default:PjSbxoHIj5i4L5GJM9bHGN7qNPyehs9L03HDQ5JwgybO9CWH5Sn2897tyYROO5xYu_i80du2fgASGuEMaZqd4s9zhNQY8IIdvXjdbBytlrsoNqV4Ik2yaA_8xLrm4raF_zSqtVs8IxctCSzi-Z6gxSNjsXpSkmqXF6ga1vR6DVU</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/connections/opensocial/common/resources" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="resources" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">resources</stringProp>
                  <stringProp name="Argument.value">U0lic0U1YWZjSThsb2tpNXFPZU5NTTI1Y0V2SVRxQU5SU0lDMjV3d0hBb0IycFM1VXpQa0tBSTdwSEFTTE1LN19xTkp3alZmLWF5al9mMG03ZTZyTnF1Vjd4WlBuTV90ZHFDSU5EVGpDUmJCNXBTdjRKdDlBVzM5OGkwU2hRc3RrOXVUYmRFUU13ZWFzV2xzWnpzZkIwa1F3UXl4MzA5MUJHU01lYXF4QVEyMjBSQUJwTnVFWVZaWjBwaExaRFRQZHJtMUFiUGZHdU5xejBQWWhZYTlycmJQUnRCNEJRQXF6Q1FzSUJqOWhRSGQzN0ZuWnlGM2tEUml4NnAxZHh6clBZUWpjdnlVYUdjeWFUSVZ6emR4cElxbk1kWGM3dnk1enJaellHa3JjUHpzTmtJcThCWkxEYjVNTlpyR2JBY2FCSENKdHJMOFBmXy1iQ2JDRXVhZUo2b3k4QWdyOVo1RGdWMUpJTkE2eEVLRWhBR1U0eXppd0k2aUVPWDVPVk01cTh3QWVHbVRicHRoTUNYUko0LWNDOTI2M3JkcFRUVzVJT2haNmVVbGNlNjBWVGNQQnh0X3pMdnl6YW52YzFReGoyRHhzanBHV3d0aVJGYkxZalIzdTI5SDhtQUEyeG1WeFlrUmNOM1VMQUR2dl80ZzdnLXQ3ZXhwQzlLU3kxT1B6Z05faDhJbklBNUhvYjdncmlRYlpna2RDZlUwYTlzTUNOVkx5cGd4MkRsZ0VYcFd0QlFXYmRlMVRCM1VtVTZzd2IxYUhxTDZzbC16NmRuZ3J2aWtZVXN2WlpLbWdJUUExUGQtdHJlS1VEUjREcjY1YWhtU1NNaDBBdzRjdnhEbmpHZjZxTzdCUGszNEUzTHc3aWswaW9sZGQydlFBV1RweXZJZjNIWkQ5bUJGNGxhRWZpZHNmQjBjcEhFSUJKaXFwY0tTVXc%3D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mimeType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">mimeType</stringProp>
                  <stringProp name="Argument.value">text/javascript</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isClientInjection" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isClientInjection</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/connections/opensocial/common/resources</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Client-Loaded-Features" elementType="Header">
                  <stringProp name="Header.name">Client-Loaded-Features</stringProp>
                  <stringProp name="Header.value">actions::com.ibm.connections.ee::com.ibm.connections.sharedialog::container::container.nongadget::core::cre.iruntime::cre.iwidget::cre.iwidget.event::cre.iwidget.itemset::cre.messages.en::cre.osgadget::cre.service.event::cre.service.people::cre.wire::embedded-experiences::ibm.connections.ee::ibm.connections.sharedialog::open-views::pubsub-2::rpc::selection::shared-script-frame::shindig.sha1::views</stringProp>
                </elementProp>
                <elementProp name="X-Shindig-ST" elementType="Header">
                  <stringProp name="Header.name">X-Shindig-ST</stringProp>
                  <stringProp name="Header.value">default:PjSbxoHIj5i4L5GJM9bHGN7qNPyehs9L03HDQ5JwgybO9CWH5Sn2897tyYROO5xYu_i80du2fgASGuEMaZqd4s9zhNQY8IIdvXjdbBytlrsoNqV4Ik2yaA_8xLrm4raF_zSqtVs8IxctCSzi-Z6gxSNjsXpSkmqXF6ga1vR6DVU</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/service/atom/forms/community/bookmarks" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="communityUuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">communityUuid</stringProp>
                  <stringProp name="Argument.value">a4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="onlyImportant" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">onlyImportant</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sortOrder" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sortOrder</stringProp>
                  <stringProp name="Argument.value">asc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sortBy" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sortBy</stringProp>
                  <stringProp name="Argument.value">title</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ps" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ps</stringProp>
                  <stringProp name="Argument.value">-1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/service/atom/forms/community/bookmarks</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/service/atom/community/instance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="communityUuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">communityUuid</stringProp>
                  <stringProp name="Argument.value">a4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/service/atom/community/instance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/service/atom/forms/community/bookmarks" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="communityUuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">communityUuid</stringProp>
                  <stringProp name="Argument.value">a4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ps" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ps</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lastMod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lastMod</stringProp>
                  <stringProp name="Argument.value">1418317724492</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/service/atom/forms/community/bookmarks</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/search/atom/mysearch/facets/tags" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fieldvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldvalue</stringProp>
                  <stringProp name="Argument.value">community_id%3aa4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="component" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">component</stringProp>
                  <stringProp name="Argument.value">communities%3acontent</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ps" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ps</stringProp>
                  <stringProp name="Argument.value">75</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="communityUuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">communityUuid</stringProp>
                  <stringProp name="Argument.value">a4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search/atom/mysearch/facets/tags</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communities/service/atom/forms/community/members" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="communityUuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">communityUuid</stringProp>
                  <stringProp name="Argument.value">a4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sortBy" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sortBy</stringProp>
                  <stringProp name="Argument.value">created</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">desc</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ps" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ps</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pagingtype" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pagingtype</stringProp>
                  <stringProp name="Argument.value">offsets</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lastMod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lastMod</stringProp>
                  <stringProp name="Argument.value">1418317724517</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/communities/service/atom/forms/community/members</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/wikis/form/api/communitywiki/a4e65fb4-2eae-41fd-bea7-2f7b5e322c31/feed" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageSize</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="includeTags" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">includeTags</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sK" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sK</stringProp>
                  <stringProp name="Argument.value">modified</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sO" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sO</stringProp>
                  <stringProp name="Argument.value">desc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="format" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">format</stringProp>
                  <stringProp name="Argument.value">xml</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="acls" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">acls</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="libraryAcls" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">libraryAcls</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/wikis/form/api/communitywiki/a4e65fb4-2eae-41fd-bea7-2f7b5e322c31/feed</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/forums/atom/forms/topics" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="overview" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">overview</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="communityUuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">communityUuid</stringProp>
                  <stringProp name="Argument.value">a4e65fb4-2eae-41fd-bea7-2f7b5e322c31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sortOrder" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sortOrder</stringProp>
                  <stringProp name="Argument.value">desc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ps" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ps</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="display" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">display</stringProp>
                  <stringProp name="Argument.value">topics</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isMember" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isMember</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/forums/atom/forms/topics</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/files/form/api/communitycollection/a4e65fb4-2eae-41fd-bea7-2f7b5e322c31/feed" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pageSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pageSize</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="acls" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">acls</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="collectionAcls" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">collectionAcls</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sK" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sK</stringProp>
                  <stringProp name="Argument.value">modified</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sO" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sO</stringProp>
                  <stringProp name="Argument.value">dsc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sC" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sC</stringProp>
                  <stringProp name="Argument.value">document</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apps.basesandbox09.swg.usma.ibm.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/files/form/api/communitycollection/a4e65fb4-2eae-41fd-bea7-2f7b5e322c31/feed</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">WWW-Authenticate=XHR</stringProp>
                </elementProp>
                <elementProp name="X-Update-Nonce" elementType="Header">
                  <stringProp name="Header.name">X-Update-Nonce</stringProp>
                  <stringProp name="Header.value">9b875286b8e584138ad333aef95b596a</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://apps.basesandbox09.swg.usma.ibm.com/communities/service/html/communitystart?communityUuid=a4e65fb4-2eae-41fd-bea7-2f7b5e322c31&amp;ftHelpTip=true</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
