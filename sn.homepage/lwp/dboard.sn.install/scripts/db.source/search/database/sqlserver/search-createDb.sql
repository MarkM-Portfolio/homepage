-- ***************************************************************** 
--                                                                   
-- IBM Confidential                                                  
--                                                                   
-- OCO Source Materials                                              
--                                                                   
-- Copyright IBM Corp. 2007, 2016                                    
--                                                                   
-- The source code for this program is not published or otherwise    
-- divested of its trade secrets, irrespective of what has been      
-- deposited with the U.S. Copyright Office.                         
--                                                                   
-- ***************************************************************** 

-- {COPYRIGHT}

------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
-- START THE DEFINITION FOR THE SEARCH DATABASE
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------
-- SEARCH -  CREATE THE TABLES
----------------------------------------------------------------------------


----------------------------------------
--  SR_TASKDEF
----------------------------------------


CREATE TABLE HOMEPAGE.SR_TASKDEF (
	TASK_ID NVARCHAR(36) NOT NULL,
	TASK_NAME NVARCHAR(256) NOT NULL,
	STARTBY NVARCHAR(256),
	INTERVAL NVARCHAR(256),
	TASK_TYPE NVARCHAR(36) NOT NULL,
	ENABLED NUMERIC(5,0) DEFAULT 1 NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_TASKDEF
	 ADD CONSTRAINT PK_TASK_ID PRIMARY KEY (TASK_ID)
GO	 

ALTER TABLE HOMEPAGE.SR_TASKDEF
    ADD CONSTRAINT UNIQUE_TASK_NAME UNIQUE (TASK_NAME)
GO    

ALTER TABLE HOMEPAGE.SR_TASKDEF
    ADD CONSTRAINT CHECK_SR_TASKDEF
    CHECK ( (STARTBY IS NOT NULL AND INTERVAL IS NOT NULL) OR (STARTBY IS NULL AND INTERVAL IS NULL) );
GO


----------------------------------------
--  SR_INDEXINGTASKDEF
----------------------------------------

CREATE TABLE HOMEPAGE.SR_INDEXINGTASKDEF (
	INDEXING_TASK_ID NVARCHAR(36) NOT NULL,
	TASK_ID NVARCHAR(36) NOT NULL,
	INDEXING_TASK_SERVICES NVARCHAR(256) NOT NULL,
	INDEXING_TASK_OPTIMIZE NUMERIC(5,0) NOT NULL	
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_INDEXINGTASKDEF
	ADD CONSTRAINT PK_INDEX_TASK_ID PRIMARY KEY (INDEXING_TASK_ID)
GO	

ALTER TABLE HOMEPAGE.SR_INDEXINGTASKDEF
	ADD CONSTRAINT UNIQUE_TASK_ID_IND UNIQUE (TASK_ID)
GO	

ALTER TABLE HOMEPAGE.SR_INDEXINGTASKDEF
	ADD CONSTRAINT FK_INDEX_TASK_ID FOREIGN KEY (TASK_ID) 
	REFERENCES HOMEPAGE.SR_TASKDEF(TASK_ID) ON DELETE CASCADE
GO	

----------------------------------------
--  SR_OPTIMIZETASKDEF
----------------------------------------

CREATE TABLE HOMEPAGE.SR_OPTIMIZETASKDEF (
	OPTIMIZE_TASK_ID NVARCHAR(36) NOT NULL,	
	TASK_ID NVARCHAR(36) NOT NULL	
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_OPTIMIZETASKDEF
	ADD CONSTRAINT PK_OPT_TASK_ID PRIMARY KEY (OPTIMIZE_TASK_ID)
GO
ALTER TABLE HOMEPAGE.SR_OPTIMIZETASKDEF
	ADD CONSTRAINT FK_OPT_TASK_ID FOREIGN KEY (TASK_ID) 
	REFERENCES  HOMEPAGE.SR_TASKDEF(TASK_ID) ON DELETE CASCADE
GO	

ALTER TABLE HOMEPAGE.SR_OPTIMIZETASKDEF
	ADD CONSTRAINT UNIQUE_TASK_ID_OPT UNIQUE (TASK_ID)
GO


----------------------------------------
--  SR_FILECONTENTTASKDEF
----------------------------------------

CREATE TABLE HOMEPAGE.SR_FILECONTENTTASKDEF (
	FILECONTENT_TASK_ID NVARCHAR(36) NOT NULL,	
	TASK_ID NVARCHAR(36) NOT NULL,
	FILE_CONTENT_TASK_SERVICES NVARCHAR(256) NOT NULL,
	CONTENT_FAILURES_ONLY NUMERIC(5,0) NOT NULL	
) ON [PRIMARY]
GO


ALTER TABLE HOMEPAGE.SR_FILECONTENTTASKDEF
	ADD CONSTRAINT PK_FC_TASK_ID PRIMARY KEY (FILECONTENT_TASK_ID)
GO	
ALTER TABLE HOMEPAGE.SR_FILECONTENTTASKDEF
	ADD CONSTRAINT UNIQUE_TASK_ID_FC UNIQUE (TASK_ID)
GO
ALTER TABLE HOMEPAGE.SR_FILECONTENTTASKDEF
	ADD CONSTRAINT FK_FC_TASK_ID FOREIGN KEY (TASK_ID) 
	REFERENCES  HOMEPAGE.SR_TASKDEF(TASK_ID) ON DELETE CASCADE

----------------------------------------
--  SR_BACKUPTASKDEF
----------------------------------------

CREATE TABLE HOMEPAGE.SR_BACKUPTASKDEF (
	BACKUP_TASK_ID NVARCHAR(36) NOT NULL,	
	TASK_ID NVARCHAR(36) NOT NULL,
	TYPE NVARCHAR(36) NOT NULL,
	SCRIPT NVARCHAR(256)
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_BACKUPTASKDEF
	ADD CONSTRAINT PK_BKUP_TASK_ID PRIMARY KEY (BACKUP_TASK_ID)	
GO	

ALTER TABLE HOMEPAGE.SR_BACKUPTASKDEF
	ADD CONSTRAINT UNIQUE_TASK_ID_BKP UNIQUE (TASK_ID)
GO

ALTER TABLE HOMEPAGE.SR_BACKUPTASKDEF
	ADD CONSTRAINT FK_BKUP_TASK_ID FOREIGN KEY (TASK_ID) 
	REFERENCES  HOMEPAGE.SR_TASKDEF(TASK_ID) ON DELETE CASCADE;
GO

----------------------------------------
--  SR_SANDTASKDEF
----------------------------------------

CREATE TABLE HOMEPAGE.SR_SANDTASKDEF (
	SAND_TASK_ID NVARCHAR(36) NOT NULL,
	TASK_ID NVARCHAR(36) NOT NULL,
	SAND_TASK_SERVICES NVARCHAR(256) NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_SANDTASKDEF
	ADD CONSTRAINT PK_ST_TASK_ID PRIMARY KEY (SAND_TASK_ID)
GO

ALTER TABLE HOMEPAGE.SR_SANDTASKDEF
	ADD CONSTRAINT UNIQUE_TASK_ID_ST UNIQUE (TASK_ID)
GO
	
ALTER TABLE HOMEPAGE.SR_SANDTASKDEF
	ADD CONSTRAINT FK_ST_TASK_ID FOREIGN KEY (TASK_ID) 
	REFERENCES  HOMEPAGE.SR_TASKDEF(TASK_ID) ON DELETE CASCADE
GO

----------------------------------------
--  SR_ALLTASKSDEF
----------------------------------------


CREATE VIEW HOMEPAGE.SR_ALLTASKSDEF AS
(
	SELECT 	T1.TASK_ID  		AS	PARENT_TASK_ID,
	T1.TASK_NAME 				AS	PARENT_TASK_NAME,
	T1.INTERVAL 				AS	PARENT_TASK_INTERVAL,
	T1.STARTBY	 				AS	PARENT_TASK_STARTBY,
	T1.TASK_TYPE 				AS	PARENT_TASK_TYPE,
	T1.ENABLED					AS  PARENT_TASK_ENABLED,
	T2.INDEXING_TASK_SERVICES	AS	INDEXING_TASK_SERVICES,
	T2.INDEXING_TASK_OPTIMIZE	AS	INDEXING_TASK_OPTIMIZE,
	T2.INDEXING_TASK_ID			AS	INDEXING_TASK_ID,
	''							AS	OPTIMIZE_TASK_ID,
	'' 							AS 	FILECONTENT_TASK_ID,
	''							AS	FILE_CONTENT_TASK_SERVICES,
	0							AS 	CONTENT_FAILURES_ONLY,
        ''                  	AS  SAND_TASK_ID,
	''							AS	SAND_TASK_SERVICES,
	'' 							AS 	BACKUP_TASK_ID,
	''							AS	BACKUP_TASK_TYPE,
	''							AS	BACKUP_TASK_SCRIPT,
	T2.INDEXING_TASK_ID			AS	CHILDTASK_PK	
	FROM    HOMEPAGE.SR_TASKDEF T1,HOMEPAGE.SR_INDEXINGTASKDEF T2 
	WHERE T1.TASK_ID=T2.TASK_ID
) 
UNION 
(
	SELECT T3.TASK_ID		AS 	PARENT_TASK_ID,
	T3.TASK_NAME 			AS 	PARENT_TASK_NAME,
	T3.INTERVAL				AS 	PARENT_TASK_INTERVAL,
	T3.STARTBY 				AS	PARENT_TASK_STARTBY,
	T3.TASK_TYPE 			AS 	PARENT_TASK_TYPE,
 	T3.ENABLED 				AS 	PARENT_TASK_ENABLED,
	''						AS 	INDEXING_TASK_SERVICES,
	0						AS	INDEXING_TASK_OPTIMIZE,
	''						AS	INDEXING_TASK_ID,
	T4.OPTIMIZE_TASK_ID 	AS	OPTIMIZE_TASK_ID,
	'' 						AS 	FILECONTENT_TASK_ID,
	''						AS	FILE_CONTENT_TASK_SERVICES,
	0						AS	CONTENT_FAILURES_ONLY,
        ''                 	AS  SAND_TASK_ID,
	''                      AS  SAND_TASK_SERVICES,
	'' 						AS 	BACKUP_TASK_ID,
	''						AS	BACKUP_TASK_TYPE,
	''						AS	BACKUP_TASK_SCRIPT,
	T4.OPTIMIZE_TASK_ID		AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T3,HOMEPAGE.SR_OPTIMIZETASKDEF T4
	WHERE  T3.TASK_ID=T4.TASK_ID
)
UNION 
(
	SELECT T5.TASK_ID				AS	PARENT_TASK_ID,
	T5.TASK_NAME 					AS	PARENT_TASK_NAME,
	T5.INTERVAL						AS	PARENT_TASK_INTERVAL,
	T5.STARTBY 						AS	PARENT_TASK_STARTBY,
	T5.TASK_TYPE 					AS	PARENT_TASK_TYPE,
 	T5.ENABLED 						AS	PARENT_TASK_ENABLED,
	''								AS	INDEXING_TASK_SERVICES,
	0								AS	INDEXING_TASK_OPTIMIZE,
	''								AS	INDEXING_TASK_ID,
	''								AS	OPTIMIZE_TASK_ID,
	T6.FILECONTENT_TASK_ID 			AS	FILECONTENT_TASK_ID,
	T6.FILE_CONTENT_TASK_SERVICES	AS	FILE_CONTENT_TASK_SERVICES,
	T6.CONTENT_FAILURES_ONLY		AS	CONTENT_FAILURES_ONLY,
        ''                  		AS  SAND_TASK_ID,
	''                      		AS  SAND_TASK_SERVICES,
	'' 								AS  BACKUP_TASK_ID,
	''								AS	BACKUP_TASK_TYPE,
	''								AS	BACKUP_TASK_SCRIPT,
	T6.FILECONTENT_TASK_ID			AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T5,HOMEPAGE.SR_FILECONTENTTASKDEF T6
	WHERE  T5.TASK_ID=T6.TASK_ID
)
UNION 
(
	SELECT T7.TASK_ID		AS 	PARENT_TASK_ID,
	T7.TASK_NAME 			AS 	PARENT_TASK_NAME,
	T7.INTERVAL				AS 	PARENT_TASK_INTERVAL,
	T7.STARTBY 				AS	PARENT_TASK_STARTBY,
	T7.TASK_TYPE 			AS 	PARENT_TASK_TYPE,
 	T7.ENABLED 				AS	PARENT_TASK_ENABLED,
	''						AS 	INDEXING_TASK_SERVICES,
	0						AS	INDEXING_TASK_OPTIMIZE,
	''						AS	INDEXING_TASK_ID,
	''						AS	OPTIMIZE_TASK_ID,
	''		 				AS 	FILECONTENT_TASK_ID,
	''						AS	FILE_CONTENT_TASK_SERVICES,
	0						AS	CONTENT_FAILURES_ONLY,
	''                  	AS  SAND_TASK_ID,
	''                      AS  SAND_TASK_SERVICES,
	T8.BACKUP_TASK_ID		AS 	BACKUP_TASK_ID,
	T8.TYPE					AS	BACKUP_TASK_TYPE,
	T8.SCRIPT				AS	BACKUP_TASK_SCRIPT,
	T8.BACKUP_TASK_ID		AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T7,HOMEPAGE.SR_BACKUPTASKDEF T8
	WHERE  T7.TASK_ID=T8.TASK_ID
)
UNION
(
        SELECT T9.TASK_ID              AS   PARENT_TASK_ID,
        T9.TASK_NAME                   AS   PARENT_TASK_NAME,
        T9.INTERVAL                    AS   PARENT_TASK_INTERVAL,
        T9.STARTBY                     AS   PARENT_TASK_STARTBY,
        T9.TASK_TYPE                   AS   PARENT_TASK_TYPE,
        T9.ENABLED                     AS   PARENT_TASK_ENABLED,
        ''                             AS   INDEXING_TASK_SERVICES,
        0                              AS   INDEXING_TASK_OPTIMIZE,
        ''                             AS   INDEXING_TASK_ID,
        ''                             AS   OPTIMIZE_TASK_ID,
        ''                             AS   FILECONTENT_TASK_ID,
        ''                             AS   FILE_CONTENT_TASK_SERVICES,
        0                              AS   CONTENT_FAILURES_ONLY,
        T10.SAND_TASK_ID               AS   SAND_TASK_ID,
		T10.SAND_TASK_SERVICES		   AS	SAND_TASK_SERVICES,
        ''                             AS   BACKUP_TASK_ID,
        ''                             AS   BACKUP_TASK_TYPE,
        ''                             AS   BACKUP_TASK_SCRIPT,
        T10.SAND_TASK_ID               AS   CHILDTASK_PK
        FROM   HOMEPAGE.SR_TASKDEF T9,HOMEPAGE.SR_SANDTASKDEF T10
        WHERE  T9.TASK_ID=T10.TASK_ID
)
GO

----------------------------------------
--  SR_FILESCONTENT
----------------------------------------

CREATE TABLE HOMEPAGE.SR_FILESCONTENT (
	FILESCONTENT_ID NVARCHAR(36) NOT NULL,
	URL NVARCHAR(256) NOT NULL,
	COMPONENT_UUID NVARCHAR(36) NOT NULL,
	COMPONENT NVARCHAR(36) NOT NULL,
	CREATION_DATE DATETIME NOT NULL,
	LAST_MODIFIED_DATE DATETIME NOT NULL,
	LAST_ACCESSED_DATE DATETIME NOT NULL,
	STATUS NUMERIC(5,0) NOT NULL,
	FILE_SIZE NUMERIC(19,0) NOT NULL,
	CONTENT_SIZE NUMERIC(19,0) NOT NULL,
	INPUT_MIME_TYPE NVARCHAR(256) NOT NULL,
	CLAIMED NUMERIC(5,0) DEFAULT 0 NOT NULL,
	CLAIMED_TIME DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
 	FS_LOCAL_PATH NVARCHAR(256) NOT NULL,
	PROCESSOR NVARCHAR(36),
	PROCESSOR_STATE VARBINARY(MAX),
	CONTENT_LOCATION NVARCHAR(256) NOT NULL,
	IS_READY NUMERIC(5,0) NOT NULL,
	VERSION NVARCHAR(36)
)  ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_FILESCONTENT
	ADD CONSTRAINT PK_FILESCONTENT_ID PRIMARY KEY (FILESCONTENT_ID)
GO

ALTER TABLE HOMEPAGE.SR_FILESCONTENT
	ADD CONSTRAINT UNIQUE_COMP_UUID UNIQUE (COMPONENT_UUID,COMPONENT)
GO

CREATE INDEX SR_FILESCONTENT_STATUS_IDX 
	ON HOMEPAGE.SR_FILESCONTENT(STATUS);
GO

CREATE INDEX SR_FILESCONTENT_VERSION_IDX 
	ON HOMEPAGE.SR_FILESCONTENT(VERSION);
GO

----------------------------------------
--  SR_MIGTASKDEFINFO
----------------------------------------

CREATE TABLE HOMEPAGE.SR_MIGTASKDEFINFO (
	MIGTASKDEFINFO_ID NVARCHAR(36) NOT NULL,
	NUM_TASKS_MIG NUMERIC(10,0) DEFAULT 1 NOT NULL  
)  ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_MIGTASKDEFINFO
	ADD CONSTRAINT PK_MIGTASKDEF_ID PRIMARY KEY(MIGTASKDEFINFO_ID)
GO

----------------------------------------
--  SR_INDEX_MANAGEMENT
----------------------------------------

CREATE TABLE HOMEPAGE.SR_INDEX_MANAGEMENT (
	NODE_ID NVARCHAR(256) NOT NULL,
	LAST_CRAWLING_VERSION NUMERIC(19,0) NOT NULL,
	OUT_OF_DATE NUMERIC(5,0) DEFAULT 0  NOT NULL,
	OUT_OF_SYNC NUMERIC(5,0) DEFAULT 0 NOT NULL,
	INDEXER  NUMERIC(5,0)  DEFAULT 1 NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_INDEX_MANAGEMENT
	ADD CONSTRAINT PK_INDEX_MGMT_ID PRIMARY KEY (NODE_ID)
GO	


----------------------------------------
--  SR_RESUME_TOKENS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_RESUME_TOKENS (
	TOKEN_ID NVARCHAR(36) NOT NULL,
	NODE_ID NVARCHAR(256) NOT NULL,
	TOKEN NVARCHAR(256),
	SERVICE NVARCHAR(36) NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_RESUME_TOKENS
	ADD CONSTRAINT PK_TOKEN_ID PRIMARY KEY (TOKEN_ID)
GO	

ALTER TABLE HOMEPAGE.SR_RESUME_TOKENS
	ADD CONSTRAINT FK_RT_IDX_MGMT_ID FOREIGN KEY (NODE_ID)
	REFERENCES HOMEPAGE.SR_INDEX_MANAGEMENT(NODE_ID) ON DELETE CASCADE
GO	

----------------------------------------
--  SR_INDEX_DOCS
----------------------------------------
CREATE TABLE HOMEPAGE.SR_INDEX_DOCS(
	DOCUMENT_ID NVARCHAR(36) NOT NULL,
	DOCUMENT VARBINARY(MAX) NOT NULL,
	CRAWLING_VERSION NUMERIC(19,0) NOT NULL,
	ACTION NUMERIC(5,0) NOT NULL,
	UPDATE_TIME  DATETIME NOT NULL,
	RESUME_POINT NVARCHAR(256),
	SERVICE NVARCHAR(36) NOT NULL,
	FILES_REF_ID NVARCHAR(36),
	ATOM_ID  NVARCHAR(256)
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_INDEX_DOCS
	ADD CONSTRAINT PK_INDEX_DOCS_ID PRIMARY KEY (DOCUMENT_ID)
GO	

CREATE INDEX SR_INDEX_CRAWL_SRV_ACT_IDX 
	ON HOMEPAGE.SR_INDEX_DOCS (CRAWLING_VERSION, SERVICE, ACTION)
GO

CREATE INDEX SR_INDEX_DOCS_RPS_IDX
    ON HOMEPAGE.SR_INDEX_DOCS (RESUME_POINT,SERVICE)
GO

CREATE INDEX SR_INDEX_DOCS_ACT_IDX
	ON HOMEPAGE.SR_INDEX_DOCS(ACTION)
GO

CREATE INDEX SR_INDEX_DOCS_ACS_IDX
	ON HOMEPAGE.SR_INDEX_DOCS(SERVICE,ATOM_ID,CRAWLING_VERSION)
GO

CREATE INDEX SR_INDEX_DOCS_FRID_IDX 
	ON  HOMEPAGE.SR_INDEX_DOCS(FILES_REF_ID ASC, SERVICE ASC, UPDATE_TIME DESC)
GO

CREATE INDEX SR_INDEX_DOCS_LLT4_IDX ON HOMEPAGE.SR_INDEX_DOCS(UPDATE_TIME ASC, ACTION DESC, CRAWLING_VERSION, SERVICE)
GO

-- Defect 77766: Search slow query
CREATE INDEX SR_INDEX_DOCS_SU_IDX 
	ON  HOMEPAGE.SR_INDEX_DOCS(SERVICE,UPDATE_TIME)
GO 

-- SmartCloud Defect 96370
CREATE INDEX SR_INDEX_DOCS_TAW_IDX 
	ON  HOMEPAGE.SR_INDEX_DOCS(UPDATE_TIME ASC,DOCUMENT_ID ASC,CRAWLING_VERSION ASC)
GO

-- On-premise defect 99580
CREATE INDEX SR_INDEX_DOCS_SUDCRA_IDX
	ON HOMEPAGE.SR_INDEX_DOCS (SERVICE ASC, UPDATE_TIME ASC, DOCUMENT_ID ASC, CRAWLING_VERSION ASC, RESUME_POINT ASC, ACTION ASC)
GO

ALTER TABLE HOMEPAGE.SR_INDEX_DOCS 
	ADD CONSTRAINT ID_ACT_CHECK
	CHECK (ACTION >= 0 AND ACTION < 4)
GO

ALTER TABLE HOMEPAGE.SR_INDEX_DOCS 
	ADD CONSTRAINT IGNORE_ACT_CHECK
	CHECK (ACTION <> 3 OR RESUME_POINT IS NULL) 
GO

----------------------------------------
--  SR_FEEDBACK
----------------------------------------

CREATE TABLE HOMEPAGE.SR_FEEDBACK (
	ID NVARCHAR(36) NOT NULL,
	PERSON_ID  NVARCHAR(36) NOT NULL,
	CLIENT_ID NVARCHAR(256) NOT NULL,
	ACTION NVARCHAR(256) NOT NULL,
	FEEDBACK_TIME DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
	ITEM_ID  NVARCHAR(256) NOT NULL 
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_FEEDBACK
	ADD CONSTRAINT PK_FEEDBACK_ID PRIMARY KEY (ID)
GO	
	
ALTER TABLE HOMEPAGE.SR_FEEDBACK
	ADD CONSTRAINT FK_SRFB_PERSON_ID FOREIGN KEY (PERSON_ID)
	REFERENCES HOMEPAGE.PERSON(PERSON_ID)
GO	
	

CREATE INDEX SR_FEEDBACK_CLIENT_IDX
		ON HOMEPAGE.SR_FEEDBACK (CLIENT_ID)
GO

CREATE INDEX SR_FEEDBACK_PERSON_ID_IDX 
	ON HOMEPAGE.SR_FEEDBACK(PERSON_ID)
GO

----------------------------------------
--  SR_FEEDBACK_CONTEXT
----------------------------------------

CREATE TABLE HOMEPAGE.SR_FEEDBACK_CONTEXT (
	CONTEXT_ID NVARCHAR(36) NOT NULL,
	ID NVARCHAR(36) NOT NULL,
	TYPE  NVARCHAR(256) NOT NULL,
	TYPE_VALUE NVARCHAR(256) NOT NULL,
	WEIGHT NVARCHAR(256) NOT NULL
) ON [PRIMARY]
GO


ALTER TABLE HOMEPAGE.SR_FEEDBACK_CONTEXT
	ADD CONSTRAINT PK_FBK_CTXT_ID PRIMARY KEY (CONTEXT_ID)
GO	

ALTER TABLE HOMEPAGE.SR_FEEDBACK_CONTEXT
	ADD CONSTRAINT FK_FBK_CTXT_ID FOREIGN KEY (ID)
	REFERENCES HOMEPAGE.SR_FEEDBACK(ID) ON DELETE CASCADE
GO	


----------------------------------------
--  SR_FEEDBACK_PARAMETERS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_FEEDBACK_PARAMETERS (
	PARAMETERS_ID NVARCHAR(36) NOT NULL,
	ID NVARCHAR(36) NOT NULL,
	PARAM  NVARCHAR(256) NOT NULL,
	PARAM_VALUE NVARCHAR(256) NOT NULL
) ON [PRIMARY]
GO
	
ALTER TABLE HOMEPAGE.SR_FEEDBACK_PARAMETERS
	ADD CONSTRAINT PK_FBK_PARAMS_ID PRIMARY KEY (PARAMETERS_ID)
GO	
	
ALTER TABLE HOMEPAGE.SR_FEEDBACK_PARAMETERS
	ADD CONSTRAINT FK_FBK_PARAMS_ID FOREIGN KEY (ID)
	REFERENCES HOMEPAGE.SR_FEEDBACK(ID) ON DELETE CASCADE
GO	

----------------------------------------
--  SR_STATS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_STATS(
	STAT_ID		NVARCHAR(36) NOT NULL,
	STAT_KEY 	NVARCHAR(256) NOT NULL,
	STAT_TYPE	NUMERIC(5,0) NOT NULL,
	UPDATED		DATETIME NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_STATS
	ADD CONSTRAINT PK_SR_STAT_ID PRIMARY KEY (STAT_ID)
GO	

ALTER TABLE HOMEPAGE.SR_STATS
	ADD CONSTRAINT UNIQUE_STAT_KEY UNIQUE (STAT_KEY)
GO	


----------------------------------------
--  SR_STRING_STATS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_STRING_STATS(
	STRING_STAT_ID		NVARCHAR(36) NOT NULL,
	STAT_ID				NVARCHAR(36) NOT NULL,
	STAT_VALUE			NVARCHAR(256)  NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_STRING_STATS
	ADD CONSTRAINT PK_STR_STAT_ID PRIMARY KEY (STRING_STAT_ID)
GO	

ALTER TABLE HOMEPAGE.SR_STRING_STATS
	ADD CONSTRAINT FK_STR_STAT_ID FOREIGN KEY (STAT_ID)
	REFERENCES HOMEPAGE.SR_STATS(STAT_ID);
GO

CREATE INDEX SR_STRING_STAT_IDX ON HOMEPAGE.SR_STRING_STATS(STAT_ID);
GO

----------------------------------------
--  SR_NUMBER_STATS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_NUMBER_STATS(
	NUMBER_STAT_ID		NVARCHAR(36) NOT NULL,
	STAT_ID				NVARCHAR(36) NOT NULL,
	STAT_VALUE			NUMERIC(19,0) NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_NUMBER_STATS
	ADD CONSTRAINT PK_NUM_STAT_ID PRIMARY KEY (NUMBER_STAT_ID)
GO	


ALTER TABLE HOMEPAGE.SR_NUMBER_STATS
	ADD CONSTRAINT FK_NUM_STAT_ID FOREIGN KEY (STAT_ID)
	REFERENCES HOMEPAGE.SR_STATS(STAT_ID)
GO	

CREATE INDEX SR_NUMBER_STAT_IDX ON HOMEPAGE.SR_NUMBER_STATS(STAT_ID);

----------------------------------------
--  SR_TIMER_STATS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_TIMER_STATS(
	TIMER_STAT_ID		NVARCHAR(36) NOT NULL,
	STAT_ID				NVARCHAR(36) NOT NULL,
	AVERAGE				NUMERIC(19,0) NOT NULL,
	MINIMUM				NUMERIC(19,0) NOT NULL,
	MAXIMUM				NUMERIC(19,0) NOT NULL,
	COUNTER				NUMERIC(10,0) NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_TIMER_STATS
	ADD CONSTRAINT PK_TMR_STAT_ID PRIMARY KEY (TIMER_STAT_ID)
GO	
	
ALTER TABLE HOMEPAGE.SR_TIMER_STATS
	ADD CONSTRAINT FK_TMR_STAT_ID FOREIGN KEY (STAT_ID)
	REFERENCES HOMEPAGE.SR_STATS(STAT_ID)
GO	

CREATE INDEX SR_TIMER_STAT_IDX ON HOMEPAGE.SR_TIMER_STATS(STAT_ID);

--START 38374: DAO Layer Changes for Dynamic Global Properties for SAND 

----------------------------------------
--  SR_GLOBAL_SAND_PROPS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_GLOBAL_SAND_PROPS(
	GSP_ID			NVARCHAR(36) NOT NULL,
	GSP_NAME		NVARCHAR(36) NOT NULL,
	GSP_VALUE		NVARCHAR(36) NOT NULL,
	GSP_TYPE        NUMERIC(5,0) NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_GLOBAL_SAND_PROPS
	ADD CONSTRAINT PK_GSP_ID PRIMARY KEY (GSP_ID)
GO

ALTER TABLE HOMEPAGE.SR_GLOBAL_SAND_PROPS
	ADD CONSTRAINT UNIQUE_GSP_NAME UNIQUE (GSP_NAME)
GO
	
ALTER TABLE HOMEPAGE.SR_GLOBAL_SAND_PROPS		
	ADD CONSTRAINT GSP_TYPE_CHECK
	CHECK (GSP_TYPE >=0 AND GSP_TYPE < 4);
GO


--END 38374: DAO Layer Changes for Dynamic Global Properties for SAND 

--START 74517: Create script that creates DB table that hold document type labels

----------------------------------------
-- SR_ECM_DOCUMENT_TYPE_LABELS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_ECM_DOCUMENT_TYPE_LABELS(
        LABEL_ID NVARCHAR(36) NOT NULL,
        LABEL_NAME NVARCHAR(256) NOT NULL,
        DOCUMENT_TYPES  NVARCHAR(MAX) NOT NULL,
        UPDATE_TIME  DATETIME NOT NULL
)
ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_ECM_DOCUMENT_TYPE_LABELS
         ADD CONSTRAINT PK_LABEL_ID PRIMARY KEY (LABEL_ID)
GO

ALTER TABLE HOMEPAGE.SR_ECM_DOCUMENT_TYPE_LABELS
    ADD CONSTRAINT UNIQUE_LABEL_NAME UNIQUE (LABEL_NAME)
GO

--END 74517: Create script that creates DB table that hold document type labels

--START Task 78083 Prepare DB table for storing post filtering service.

----------------------------------------
-- SR_POST_FILTERING_SERVICE
----------------------------------------

CREATE TABLE HOMEPAGE.SR_POST_FILTERING_SERVICE(
    PFS_ID NVARCHAR(36) NOT NULL,
    SERVICE_NAME NVARCHAR(36) NOT NULL,
    URL NVARCHAR(2048) NOT NULL
)
ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_POST_FILTERING_SERVICE
   ADD CONSTRAINT PFS_ID PRIMARY KEY (PFS_ID)
GO


ALTER TABLE HOMEPAGE.SR_POST_FILTERING_SERVICE
    ADD CONSTRAINT UNIQUE_SERVICE_NAME UNIQUE (SERVICE_NAME);
GO

--END Task 78083 Prepare DB table for storing post filtering service.


--START 74517: Create script that creates DB table that hold document type labels

----------------------------------------
-- SR_ECM_DOCUMENT_TYPE_LABELS
----------------------------------------


CREATE TABLE HOMEPAGE.SR_ECM_DOCUMENT_TYPE_PROPS(
        PROPERTIES_ID NVARCHAR(36) NOT NULL,
        DOCUMENT_TYPE_ID  NVARCHAR(256) NOT NULL,
        LOCALE NVARCHAR(10) NOT NULL,
        PROPERTIES NVARCHAR(MAX) NOT NULL
)
ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_ECM_DOCUMENT_TYPE_PROPS
    ADD CONSTRAINT PK_PROPERTIES_ID PRIMARY KEY (PROPERTIES_ID);
GO

-------------------------------------------------------------------
-- LOTUSCONNECTIONSTASK
-------------------------------------------------------------------

CREATE TABLE HOMEPAGE.LOTUSCONNECTIONSTASK ( [TASKID] BIGINT NOT NULL ,
               [VERSION] NVARCHAR(5) NOT NULL ,
               [ROW_VERSION] INT NOT NULL ,
               [TASKTYPE] INT NOT NULL ,
               [TASKSUSPENDED] TINYINT NOT NULL ,
               [CANCELLED] TINYINT NOT NULL ,
               [NEXTFIRETIME] BIGINT NOT NULL ,
               [STARTBYINTERVAL] NVARCHAR(254) NULL ,
               [STARTBYTIME] BIGINT NULL ,
               [VALIDFROMTIME] BIGINT NULL ,
               [VALIDTOTIME] BIGINT NULL ,
               [REPEATINTERVAL] NVARCHAR(254) NULL ,
               [MAXREPEATS] INT NOT NULL ,
               [REPEATSLEFT] INT NOT NULL ,
               [TASKINFO] IMAGE NULL ,
               [NAME] NVARCHAR(254) NOT NULL ,
               [AUTOPURGE] INT NOT NULL ,
               [FAILUREACTION] INT NULL ,
               [MAXATTEMPTS] INT NULL ,
               [QOS] INT NULL ,
               [PARTITIONID] INT NULL ,
               [OWNERTOKEN] NVARCHAR(200) NOT NULL ,
               [CREATETIME] BIGINT NOT NULL ) 
GO

ALTER TABLE HOMEPAGE.LOTUSCONNECTIONSTASK WITH NOCHECK ADD CONSTRAINT LOTUSCONNECTIONSTASK_PK PRIMARY KEY  NONCLUSTERED ( [TASKID] ) 
GO

CREATE INDEX LOTUSCONNECTIONSTASK_IDX1 ON HOMEPAGE.LOTUSCONNECTIONSTASK ( [TASKID],
               [OWNERTOKEN] ) 
GO

CREATE CLUSTERED INDEX LOTUSCONNECTIONSTASK_IDX2 ON HOMEPAGE.LOTUSCONNECTIONSTASK ( [NEXTFIRETIME] ASC,
               [REPEATSLEFT],
               [PARTITIONID] )
GO

--START 40252: SPR#WDWU8AAA3P : search cluster nodes will insert dup scheduler task when scheduler table is empty
ALTER TABLE HOMEPAGE.LOTUSCONNECTIONSTASK
    ADD CONSTRAINT UNIQUE_LCT_NAME UNIQUE (NAME)
GO    


-------------------------------------------------------------------
-- LOTUSCONNECTIONSTREG
-------------------------------------------------------------------

CREATE TABLE HOMEPAGE.LOTUSCONNECTIONSTREG ( [REGKEY] NVARCHAR(254) NOT NULL ,
               [REGVALUE] NVARCHAR(254) NULL ,
               PRIMARY KEY ( [REGKEY] ) )
GO

-------------------------------------------------------------------
-- LOTUSCONNECTIONSLMGR
-------------------------------------------------------------------

CREATE TABLE HOMEPAGE.LOTUSCONNECTIONSLMGR ( [LEASENAME] NVARCHAR(254) NOT NULL,
               [LEASEOWNER] NVARCHAR(254) NOT NULL,
               [LEASE_EXPIRE_TIME] BIGINT,
               [DISABLED] NVARCHAR(5) )
GO

ALTER TABLE HOMEPAGE.LOTUSCONNECTIONSLMGR WITH NOCHECK ADD CONSTRAINT LOTUSCONNECTIONSLMGR_PK PRIMARY KEY  NONCLUSTERED ( [LEASENAME] ) 
GO

-------------------------------------------------------------------
-- LOTUSCONNECTIONSLMPR
-------------------------------------------------------------------


CREATE TABLE HOMEPAGE.LOTUSCONNECTIONSLMPR ( [LEASENAME] NVARCHAR(224) NOT NULL,
               [NAME] NVARCHAR(224) NOT NULL,
               [VALUE] NVARCHAR(254) NOT NULL )
GO

CREATE INDEX LOTUSCONNECTIONSLMPR_IDX1 ON HOMEPAGE.LOTUSCONNECTIONSLMPR ( [LEASENAME],
               [NAME] ) 
GO

--------------------------------------------------------------
--HOMEPAGE.SR_FILECONTENTINDEXINGTASK
--------------------------------------------------------------

CREATE TABLE HOMEPAGE.SR_FILECONTENTINDEXINGTASK (
	FILE_CONTENT_INDEXING_TASK_ID NVARCHAR(36) NOT NULL,
	TASK_ID NVARCHAR(36) NOT NULL,
	FILE_CONT_INDX_TASK_SERVICES NVARCHAR(256) NOT NULL,
	FILE_CONT_INDX_TASK_DURATION NUMERIC(19,0) NOT NULL
)ON [PRIMARY]
GO

ALTER TABLE HOMEPAGE.SR_FILECONTENTINDEXINGTASK
	ADD CONSTRAINT PK_FCI_TASK_ID PRIMARY KEY (FILE_CONTENT_INDEXING_TASK_ID);
GO

CREATE UNIQUE INDEX TASK_ID_UN_IDX
    ON HOMEPAGE.SR_FILECONTENTINDEXINGTASK(TASK_ID);
GO

ALTER TABLE HOMEPAGE.SR_FILECONTENTINDEXINGTASK
	ADD CONSTRAINT FK_FCI_TASK_ID FOREIGN KEY (TASK_ID) 
	REFERENCES  HOMEPAGE.SR_TASKDEF(TASK_ID);
GO

DROP VIEW HOMEPAGE.SR_ALLTASKSDEF;
GO

CREATE VIEW HOMEPAGE.SR_ALLTASKSDEF AS
(
	SELECT 	T1.TASK_ID  		AS	PARENT_TASK_ID,
	T1.TASK_NAME 				AS	PARENT_TASK_NAME,
	T1.INTERVAL 				AS	PARENT_TASK_INTERVAL,
	T1.STARTBY	 				AS	PARENT_TASK_STARTBY,
	T1.TASK_TYPE 				AS	PARENT_TASK_TYPE,
	T1.ENABLED					AS  PARENT_TASK_ENABLED,
	T2.INDEXING_TASK_SERVICES	AS	INDEXING_TASK_SERVICES,
	T2.INDEXING_TASK_OPTIMIZE	AS	INDEXING_TASK_OPTIMIZE,
	T2.INDEXING_TASK_ID			AS	INDEXING_TASK_ID,
	''							AS	OPTIMIZE_TASK_ID,
	'' 							AS 	FILECONTENT_TASK_ID,
	''							AS	FILE_CONTENT_TASK_SERVICES,
	0							AS 	CONTENT_FAILURES_ONLY,
        ''                  	AS  SAND_TASK_ID,
	''							AS	SAND_TASK_SERVICES,
	'' 							AS 	BACKUP_TASK_ID,
	''							AS	BACKUP_TASK_TYPE,
	''							AS	BACKUP_TASK_SCRIPT,
	''							AS	FILE_CONTENT_INDEXING_TASK_ID,
	''							AS	FILE_CONT_INDX_TASK_SERVICES,
	0							AS	FILE_CONT_INDX_TASK_DURATION,
	T2.INDEXING_TASK_ID			AS	CHILDTASK_PK	
	FROM    HOMEPAGE.SR_TASKDEF T1,HOMEPAGE.SR_INDEXINGTASKDEF T2 
	WHERE T1.TASK_ID=T2.TASK_ID
) 
UNION 
(
	SELECT T3.TASK_ID		AS 	PARENT_TASK_ID,
	T3.TASK_NAME 			AS 	PARENT_TASK_NAME,
	T3.INTERVAL				AS 	PARENT_TASK_INTERVAL,
	T3.STARTBY 				AS	PARENT_TASK_STARTBY,
	T3.TASK_TYPE 			AS 	PARENT_TASK_TYPE,
 	T3.ENABLED 				AS 	PARENT_TASK_ENABLED,
	''						AS 	INDEXING_TASK_SERVICES,
	0						AS	INDEXING_TASK_OPTIMIZE,
	''						AS	INDEXING_TASK_ID,
	T4.OPTIMIZE_TASK_ID 	AS	OPTIMIZE_TASK_ID,
	'' 						AS 	FILECONTENT_TASK_ID,
	''						AS	FILE_CONTENT_TASK_SERVICES,
	0						AS	CONTENT_FAILURES_ONLY,
        ''                 	AS  SAND_TASK_ID,
	''                      AS  SAND_TASK_SERVICES,
	'' 						AS 	BACKUP_TASK_ID,
	''						AS	BACKUP_TASK_TYPE,
	''						AS	BACKUP_TASK_SCRIPT,
	''						AS	FILE_CONTENT_INDEXING_TASK_ID,
	''						AS	FILE_CONT_INDX_TASK_SERVICES,
	0						AS	FILE_CONT_INDX_TASK_DURATION,
	T4.OPTIMIZE_TASK_ID		AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T3,HOMEPAGE.SR_OPTIMIZETASKDEF T4
	WHERE  T3.TASK_ID=T4.TASK_ID
)
UNION 
(
	SELECT T5.TASK_ID				AS	PARENT_TASK_ID,
	T5.TASK_NAME 					AS	PARENT_TASK_NAME,
	T5.INTERVAL						AS	PARENT_TASK_INTERVAL,
	T5.STARTBY 						AS	PARENT_TASK_STARTBY,
	T5.TASK_TYPE 					AS	PARENT_TASK_TYPE,
 	T5.ENABLED 						AS	PARENT_TASK_ENABLED,
	''								AS	INDEXING_TASK_SERVICES,
	0								AS	INDEXING_TASK_OPTIMIZE,
	''								AS	INDEXING_TASK_ID,
	''								AS	OPTIMIZE_TASK_ID,
	T6.FILECONTENT_TASK_ID 			AS	FILECONTENT_TASK_ID,
	T6.FILE_CONTENT_TASK_SERVICES	AS	FILE_CONTENT_TASK_SERVICES,
	T6.CONTENT_FAILURES_ONLY		AS	CONTENT_FAILURES_ONLY,
        ''                  		AS  SAND_TASK_ID,
	''                      		AS  SAND_TASK_SERVICES,
	'' 								AS  BACKUP_TASK_ID,
	''								AS	BACKUP_TASK_TYPE,
	''								AS	BACKUP_TASK_SCRIPT,
	''								AS	FILE_CONTENT_INDEXING_TASK_ID,
	''								AS	FILE_CONT_INDX_TASK_SERVICES,
	0								AS	FILE_CONT_INDX_TASK_DURATION,
	T6.FILECONTENT_TASK_ID			AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T5,HOMEPAGE.SR_FILECONTENTTASKDEF T6
	WHERE  T5.TASK_ID=T6.TASK_ID
)
UNION 
(
	SELECT T7.TASK_ID		AS 	PARENT_TASK_ID,
	T7.TASK_NAME 			AS 	PARENT_TASK_NAME,
	T7.INTERVAL				AS 	PARENT_TASK_INTERVAL,
	T7.STARTBY 				AS	PARENT_TASK_STARTBY,
	T7.TASK_TYPE 			AS 	PARENT_TASK_TYPE,
 	T7.ENABLED 				AS	PARENT_TASK_ENABLED,
	''						AS 	INDEXING_TASK_SERVICES,
	0						AS	INDEXING_TASK_OPTIMIZE,
	''						AS	INDEXING_TASK_ID,
	''						AS	OPTIMIZE_TASK_ID,
	''		 				AS 	FILECONTENT_TASK_ID,
	''						AS	FILE_CONTENT_TASK_SERVICES,
	0						AS	CONTENT_FAILURES_ONLY,
	''                  	AS  SAND_TASK_ID,
	''                      AS  SAND_TASK_SERVICES,
	T8.BACKUP_TASK_ID		AS 	BACKUP_TASK_ID,
	T8.TYPE					AS	BACKUP_TASK_TYPE,
	T8.SCRIPT				AS	BACKUP_TASK_SCRIPT,
	''						AS	FILE_CONTENT_INDEXING_TASK_ID,
	''						AS	FILE_CONT_INDX_TASK_SERVICES,
	0						AS	FILE_CONT_INDX_TASK_DURATION,
	T8.BACKUP_TASK_ID		AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T7,HOMEPAGE.SR_BACKUPTASKDEF T8
	WHERE  T7.TASK_ID=T8.TASK_ID
)
UNION
(
        SELECT T9.TASK_ID              AS   PARENT_TASK_ID,
        T9.TASK_NAME                   AS   PARENT_TASK_NAME,
        T9.INTERVAL                    AS   PARENT_TASK_INTERVAL,
        T9.STARTBY                     AS   PARENT_TASK_STARTBY,
        T9.TASK_TYPE                   AS   PARENT_TASK_TYPE,
        T9.ENABLED                     AS   PARENT_TASK_ENABLED,
        ''                             AS   INDEXING_TASK_SERVICES,
        0                              AS   INDEXING_TASK_OPTIMIZE,
        ''                             AS   INDEXING_TASK_ID,
        ''                             AS   OPTIMIZE_TASK_ID,
        ''                             AS   FILECONTENT_TASK_ID,
        ''                             AS   FILE_CONTENT_TASK_SERVICES,
        0                              AS   CONTENT_FAILURES_ONLY,
        T10.SAND_TASK_ID               AS   SAND_TASK_ID,
	T10.SAND_TASK_SERVICES		   AS	SAND_TASK_SERVICES,
        ''                             AS   BACKUP_TASK_ID,
        ''                             AS   BACKUP_TASK_TYPE,
        ''                             AS   BACKUP_TASK_SCRIPT,
        ''							   AS	FILE_CONTENT_INDEXING_TASK_ID,
	''							   AS	FILE_CONT_INDX_TASK_SERVICES,
	0							   AS	FILE_CONT_INDX_TASK_DURATION,
        T10.SAND_TASK_ID               AS   CHILDTASK_PK
        FROM   HOMEPAGE.SR_TASKDEF T9,HOMEPAGE.SR_SANDTASKDEF T10
        WHERE  T9.TASK_ID=T10.TASK_ID
)
UNION
(
        SELECT T11.TASK_ID              		AS	PARENT_TASK_ID,
        T11.TASK_NAME                   		AS	PARENT_TASK_NAME,
        T11.INTERVAL                    		AS	PARENT_TASK_INTERVAL,
        T11.STARTBY                     		AS	PARENT_TASK_STARTBY,
        T11.TASK_TYPE                   		AS	PARENT_TASK_TYPE,
        T11.ENABLED                    			AS	PARENT_TASK_ENABLED,
        ''                             			AS	INDEXING_TASK_SERVICES,
        0                              			AS	INDEXING_TASK_OPTIMIZE,
        ''                             			AS	INDEXING_TASK_ID,
        ''                             			AS	OPTIMIZE_TASK_ID,
        ''                             			AS	FILECONTENT_TASK_ID,
        ''                             			AS	FILE_CONTENT_TASK_SERVICES,
        0                              			AS	CONTENT_FAILURES_ONLY,
        ''       				       	AS  	SAND_TASK_ID,
	''						AS	SAND_TASK_SERVICES,
        ''                             			AS  	BACKUP_TASK_ID,
        ''                             			AS  	BACKUP_TASK_TYPE,
        ''                             			AS  	BACKUP_TASK_SCRIPT,
        T12.FILE_CONTENT_INDEXING_TASK_ID		AS	FILE_CONTENT_INDEXING_TASK_ID,
	T12.FILE_CONT_INDX_TASK_SERVICES		AS	FILE_CONT_INDX_TASK_SERVICES,
	T12.FILE_CONT_INDX_TASK_DURATION		AS	FILE_CONT_INDX_TASK_DURATION,
        T12.FILE_CONTENT_INDEXING_TASK_ID		AS	CHILDTASK_PK
        FROM   HOMEPAGE.SR_TASKDEF T11,HOMEPAGE.SR_FILECONTENTINDEXINGTASK T12
        WHERE  T11.TASK_ID=T12.TASK_ID
);
GO

------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
-- END THE DEFINITION FOR THE SEARCH DATABASE
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
