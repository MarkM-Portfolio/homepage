-- ***************************************************************** 
--                                                                   
-- IBM Confidential                                                  
--                                                                   
-- OCO Source Materials                                              
--                                                                   
-- Copyright IBM Corp. 2007, 2015                                    
--                                                                   
-- The source code for this program is not published or otherwise    
-- divested of its trade secrets, irrespective of what has been      
-- deposited with the U.S. Copyright Office.                         
--                                                                   
-- ***************************************************************** 

-- {COPYRIGHT}

------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
-- START THE DEFINITION FOR THE SEARCH DATABASE
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------
-- SEARCH -  CREATE THE TABLES
----------------------------------------------------------------------------


----------------------------------------
--  SR_TASKDEF
----------------------------------------


CREATE TABLE HOMEPAGE.SR_TASKDEF (
	TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,
	TASK_NAME VARCHAR(256) CCSID 1208 NOT NULL,
	STARTBY VARCHAR(256) CCSID 1208,
	INTERVAL VARCHAR(256) CCSID 1208,
	TASK_TYPE VARCHAR(36) CCSID 1208 NOT NULL,
	ENABLED SMALLINT NOT NULL DEFAULT 1
)
;

ALTER TABLE HOMEPAGE.SR_TASKDEF
	 ADD CONSTRAINT "HOMEPAGE"."PK_TASK_ID" PRIMARY KEY ("TASK_ID");

ALTER TABLE HOMEPAGE.SR_TASKDEF
    	ADD CONSTRAINT "HOMEPAGE".UNIQUE_TASK_NAME UNIQUE ("TASK_NAME");

ALTER TABLE HOMEPAGE.SR_TASKDEF
    	ADD CONSTRAINT "HOMEPAGE"."CHECK_SR_TASKDEF"
    	CHECK ( (STARTBY IS NOT NULL AND INTERVAL IS NOT NULL) OR (STARTBY IS NULL AND INTERVAL IS NULL) );

--RUNSTATS ON TABLE "HOMEPAGE"."SR_TASKDEF";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_TASKDEF" FOR INDEXES ALL;

----------------------------------------
--  SR_INDEXINGTASKDEF
----------------------------------------

CREATE TABLE HOMEPAGE.SR_INDEXINGTASKDEF (
	INDEXING_TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,
	TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,
	INDEXING_TASK_SERVICES VARCHAR(256) CCSID 1208 NOT NULL,
	INDEXING_TASK_OPTIMIZE SMALLINT NOT NULL	
)
;

ALTER TABLE HOMEPAGE.SR_INDEXINGTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."PK_INDEX_TASK_ID" PRIMARY KEY ("INDEXING_TASK_ID");

ALTER TABLE HOMEPAGE.SR_INDEXINGTASKDEF
	ADD CONSTRAINT "HOMEPAGE".UNIQUE_TASK_ID_IND UNIQUE ("TASK_ID");


ALTER TABLE HOMEPAGE.SR_INDEXINGTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."FK_INDEX_TASK_ID" FOREIGN KEY ("TASK_ID") 
	REFERENCES HOMEPAGE.SR_TASKDEF("TASK_ID") ON DELETE CASCADE;

--RUNSTATS ON TABLE "HOMEPAGE"."SR_INDEXINGTASKDEF";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_INDEXINGTASKDEF" FOR INDEXES ALL;

----------------------------------------
--  SR_OPTIMIZETASKDEF
----------------------------------------

CREATE TABLE HOMEPAGE.SR_OPTIMIZETASKDEF (
	OPTIMIZE_TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,	
	TASK_ID VARCHAR(36) CCSID 1208 NOT NULL	
)
;

ALTER TABLE HOMEPAGE.SR_OPTIMIZETASKDEF
	ADD CONSTRAINT "HOMEPAGE"."PK_OPT_TASK_ID" PRIMARY KEY ("OPTIMIZE_TASK_ID");

ALTER TABLE HOMEPAGE.SR_OPTIMIZETASKDEF
	ADD CONSTRAINT "HOMEPAGE".UNIQUE_TASK_ID_OPT UNIQUE ("TASK_ID");

ALTER TABLE HOMEPAGE.SR_OPTIMIZETASKDEF
	ADD CONSTRAINT "HOMEPAGE"."FK_OPT_TASK_ID" FOREIGN KEY ("TASK_ID") 
	REFERENCES  HOMEPAGE.SR_TASKDEF("TASK_ID") ON DELETE CASCADE;
	
--RUNSTATS ON TABLE "HOMEPAGE"."SR_OPTIMIZETASKDEF";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_OPTIMIZETASKDEF" FOR INDEXES ALL;

----------------------------------------
--  SR_FILECONTENTTASKDEF
----------------------------------------

CREATE TABLE HOMEPAGE.SR_FILECONTENTTASKDEF (
	FILECONTENT_TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,	
	TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,
	FILE_CONTENT_TASK_SERVICES VARCHAR(256) CCSID 1208 NOT NULL,
	CONTENT_FAILURES_ONLY SMALLINT NOT NULL	
)
;

ALTER TABLE HOMEPAGE.SR_FILECONTENTTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."PK_FC_TASK_ID" PRIMARY KEY ("FILECONTENT_TASK_ID");

ALTER TABLE HOMEPAGE.SR_FILECONTENTTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."UNIQUE_TASK_ID_FC" UNIQUE ("TASK_ID");
	
ALTER TABLE HOMEPAGE.SR_FILECONTENTTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."FK_FC_TASK_ID" FOREIGN KEY ("TASK_ID") 
	REFERENCES  HOMEPAGE.SR_TASKDEF("TASK_ID") ON DELETE CASCADE;

----------------------------------------
--  SR_BACKUPTASKDEF
----------------------------------------

CREATE TABLE HOMEPAGE.SR_BACKUPTASKDEF (
	BACKUP_TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,	
	TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,
	TYPE VARCHAR(36) CCSID 1208 NOT NULL,
	SCRIPT VARCHAR(256) CCSID 1208
)
;

ALTER TABLE HOMEPAGE.SR_BACKUPTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."PK_BKUP_TASK_ID" PRIMARY KEY ("BACKUP_TASK_ID");	

ALTER TABLE HOMEPAGE.SR_BACKUPTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."UNIQUE_TASK_ID_BKP" UNIQUE ("TASK_ID");
	
ALTER TABLE HOMEPAGE.SR_BACKUPTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."FK_BKUP_TASK_ID" FOREIGN KEY ("TASK_ID") 
	REFERENCES  HOMEPAGE.SR_TASKDEF("TASK_ID") ON DELETE CASCADE;

	
--RUNSTATS ON TABLE "HOMEPAGE"."SR_BACKUPTASKDEF";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_BACKUPTASKDEF" FOR INDEXES ALL;

----------------------------------------
--  SR_SANDTASKDEF
----------------------------------------

CREATE TABLE HOMEPAGE.SR_SANDTASKDEF (
	SAND_TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,
	TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,
	SAND_TASK_SERVICES VARCHAR(256) CCSID 1208 NOT NULL
)
;

ALTER TABLE HOMEPAGE.SR_SANDTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."PK_ST_TASK_ID" PRIMARY KEY ("SAND_TASK_ID");

ALTER TABLE HOMEPAGE.SR_SANDTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."UNIQUE_TASK_ID_ST" UNIQUE ("TASK_ID");
	
ALTER TABLE HOMEPAGE.SR_SANDTASKDEF
	ADD CONSTRAINT "HOMEPAGE"."FK_ST_TASK_ID" FOREIGN KEY ("TASK_ID") 
	REFERENCES  HOMEPAGE.SR_TASKDEF("TASK_ID") ON DELETE CASCADE;

--RUNSTATS ON TABLE "HOMEPAGE"."SR_SANDTASKDEF";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_SANDTASKDEF" FOR INDEXES ALL;

----------------------------------------
--  SR_ALLTASKSDEF
----------------------------------------

CREATE VIEW HOMEPAGE.SR_ALLTASKSDEF AS
(
	SELECT 	T1.TASK_ID  		AS	PARENT_TASK_ID,
	T1.TASK_NAME 				AS	PARENT_TASK_NAME,
	T1.INTERVAL 				AS	PARENT_TASK_INTERVAL,
	T1.STARTBY	 				AS	PARENT_TASK_STARTBY,
	T1.TASK_TYPE 				AS	PARENT_TASK_TYPE,
	T1.ENABLED					AS  PARENT_TASK_ENABLED,
	T2.INDEXING_TASK_SERVICES	AS	INDEXING_TASK_SERVICES,
	T2.INDEXING_TASK_OPTIMIZE	AS	INDEXING_TASK_OPTIMIZE,
	T2.INDEXING_TASK_ID			AS	INDEXING_TASK_ID,
	''							AS	OPTIMIZE_TASK_ID,
	'' 							AS 	FILECONTENT_TASK_ID,
	''							AS	FILE_CONTENT_TASK_SERVICES,
	0							AS 	CONTENT_FAILURES_ONLY,
        ''                  	AS  SAND_TASK_ID,
	''							AS	SAND_TASK_SERVICES,
	'' 							AS 	BACKUP_TASK_ID,
	''							AS	BACKUP_TASK_TYPE,
	''							AS	BACKUP_TASK_SCRIPT,
	T2.INDEXING_TASK_ID			AS	CHILDTASK_PK	
	FROM    HOMEPAGE.SR_TASKDEF T1,HOMEPAGE.SR_INDEXINGTASKDEF T2 
	WHERE T1.TASK_ID=T2.TASK_ID
) 
UNION 
(
	SELECT T3.TASK_ID		AS 	PARENT_TASK_ID,
	T3.TASK_NAME 			AS 	PARENT_TASK_NAME,
	T3.INTERVAL				AS 	PARENT_TASK_INTERVAL,
	T3.STARTBY 				AS	PARENT_TASK_STARTBY,
	T3.TASK_TYPE 			AS 	PARENT_TASK_TYPE,
 	T3.ENABLED 				AS 	PARENT_TASK_ENABLED,
	''						AS 	INDEXING_TASK_SERVICES,
	0						AS	INDEXING_TASK_OPTIMIZE,
	''						AS	INDEXING_TASK_ID,
	T4.OPTIMIZE_TASK_ID 	AS	OPTIMIZE_TASK_ID,
	'' 						AS 	FILECONTENT_TASK_ID,
	''						AS	FILE_CONTENT_TASK_SERVICES,
	0						AS	CONTENT_FAILURES_ONLY,
        ''                 	AS  SAND_TASK_ID,
	''                      AS  SAND_TASK_SERVICES,
	'' 						AS 	BACKUP_TASK_ID,
	''						AS	BACKUP_TASK_TYPE,
	''						AS	BACKUP_TASK_SCRIPT,
	T4.OPTIMIZE_TASK_ID		AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T3,HOMEPAGE.SR_OPTIMIZETASKDEF T4
	WHERE  T3.TASK_ID=T4.TASK_ID
)
UNION 
(
	SELECT T5.TASK_ID				AS	PARENT_TASK_ID,
	T5.TASK_NAME 					AS	PARENT_TASK_NAME,
	T5.INTERVAL						AS	PARENT_TASK_INTERVAL,
	T5.STARTBY 						AS	PARENT_TASK_STARTBY,
	T5.TASK_TYPE 					AS	PARENT_TASK_TYPE,
 	T5.ENABLED 						AS	PARENT_TASK_ENABLED,
	''								AS	INDEXING_TASK_SERVICES,
	0								AS	INDEXING_TASK_OPTIMIZE,
	''								AS	INDEXING_TASK_ID,
	''								AS	OPTIMIZE_TASK_ID,
	T6.FILECONTENT_TASK_ID 			AS	FILECONTENT_TASK_ID,
	T6.FILE_CONTENT_TASK_SERVICES	AS	FILE_CONTENT_TASK_SERVICES,
	T6.CONTENT_FAILURES_ONLY		AS	CONTENT_FAILURES_ONLY,
        ''                  		AS  SAND_TASK_ID,
	''                      		AS  SAND_TASK_SERVICES,
	'' 								AS  BACKUP_TASK_ID,
	''								AS	BACKUP_TASK_TYPE,
	''								AS	BACKUP_TASK_SCRIPT,
	T6.FILECONTENT_TASK_ID			AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T5,HOMEPAGE.SR_FILECONTENTTASKDEF T6
	WHERE  T5.TASK_ID=T6.TASK_ID
)
UNION 
(
	SELECT T7.TASK_ID		AS 	PARENT_TASK_ID,
	T7.TASK_NAME 			AS 	PARENT_TASK_NAME,
	T7.INTERVAL				AS 	PARENT_TASK_INTERVAL,
	T7.STARTBY 				AS	PARENT_TASK_STARTBY,
	T7.TASK_TYPE 			AS 	PARENT_TASK_TYPE,
 	T7.ENABLED 				AS	PARENT_TASK_ENABLED,
	''						AS 	INDEXING_TASK_SERVICES,
	0						AS	INDEXING_TASK_OPTIMIZE,
	''						AS	INDEXING_TASK_ID,
	''						AS	OPTIMIZE_TASK_ID,
	''		 				AS 	FILECONTENT_TASK_ID,
	''						AS	FILE_CONTENT_TASK_SERVICES,
	0						AS	CONTENT_FAILURES_ONLY,
	''                  	AS  SAND_TASK_ID,
	''                      AS  SAND_TASK_SERVICES,
	T8.BACKUP_TASK_ID		AS 	BACKUP_TASK_ID,
	T8.TYPE					AS	BACKUP_TASK_TYPE,
	T8.SCRIPT				AS	BACKUP_TASK_SCRIPT,
	T8.BACKUP_TASK_ID		AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T7,HOMEPAGE.SR_BACKUPTASKDEF T8
	WHERE  T7.TASK_ID=T8.TASK_ID
)
UNION
(
        SELECT T9.TASK_ID              AS   PARENT_TASK_ID,
        T9.TASK_NAME                   AS   PARENT_TASK_NAME,
        T9.INTERVAL                    AS   PARENT_TASK_INTERVAL,
        T9.STARTBY                     AS   PARENT_TASK_STARTBY,
        T9.TASK_TYPE                   AS   PARENT_TASK_TYPE,
        T9.ENABLED                     AS   PARENT_TASK_ENABLED,
        ''                             AS   INDEXING_TASK_SERVICES,
        0                              AS   INDEXING_TASK_OPTIMIZE,
        ''                             AS   INDEXING_TASK_ID,
        ''                             AS   OPTIMIZE_TASK_ID,
        ''                             AS   FILECONTENT_TASK_ID,
        ''                             AS   FILE_CONTENT_TASK_SERVICES,
        0                              AS   CONTENT_FAILURES_ONLY,
        T10.SAND_TASK_ID               AS   SAND_TASK_ID,
		T10.SAND_TASK_SERVICES		   AS	SAND_TASK_SERVICES,
        ''                             AS   BACKUP_TASK_ID,
        ''                             AS   BACKUP_TASK_TYPE,
        ''                             AS   BACKUP_TASK_SCRIPT,
        T10.SAND_TASK_ID               AS   CHILDTASK_PK
        FROM   HOMEPAGE.SR_TASKDEF T9,HOMEPAGE.SR_SANDTASKDEF T10
        WHERE  T9.TASK_ID=T10.TASK_ID
);

----------------------------------------
--  SR_FILESCONTENT
----------------------------------------

CREATE TABLE HOMEPAGE.SR_FILESCONTENT (
	FILESCONTENT_ID VARCHAR(36) CCSID 1208 NOT NULL,
	URL VARCHAR(256) CCSID 1208 NOT NULL,
	COMPONENT_UUID VARCHAR(36) CCSID 1208 NOT NULL,
	COMPONENT VARCHAR(36) CCSID 1208 NOT NULL,
	CREATION_DATE TIMESTAMP NOT NULL,
	LAST_MODIFIED_DATE TIMESTAMP NOT NULL,
	LAST_ACCESSED_DATE TIMESTAMP NOT NULL,
	STATUS SMALLINT NOT NULL,
	FILE_SIZE BIGINT NOT NULL,
	CONTENT_SIZE BIGINT NOT NULL,
	INPUT_MIME_TYPE VARCHAR(256) CCSID 1208 NOT NULL,
	CLAIMED SMALLINT NOT NULL DEFAULT 0,
	CLAIMED_TIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	FS_LOCAL_PATH VARCHAR(256) CCSID 1208 NOT NULL,
	PROCESSOR VARCHAR(36) CCSID 1208,
	PROCESSOR_STATE BLOB,
	CONTENT_LOCATION VARCHAR(256) CCSID 1208 NOT NULL,
	IS_READY SMALLINT NOT NULL DEFAULT 0,
	VERSION VARCHAR(36) CCSID 1208
)
;

ALTER TABLE HOMEPAGE.SR_FILESCONTENT
	ADD CONSTRAINT "HOMEPAGE"."PK_FILESCONTENT_ID" PRIMARY KEY ("FILESCONTENT_ID");

ALTER TABLE HOMEPAGE.SR_FILESCONTENT
	ADD CONSTRAINT "HOMEPAGE".UNIQUE_COMP_UUID UNIQUE ("COMPONENT_UUID","COMPONENT");

CREATE INDEX  HOMEPAGE.SR_FILESCONTENT_STATUS_IDX 
ON HOMEPAGE.SR_FILESCONTENT (STATUS);	

CREATE INDEX  HOMEPAGE.SR_FILESCONTENT_VERSION_IDX 
ON HOMEPAGE.SR_FILESCONTENT (VERSION);

--RUNSTATS ON TABLE "HOMEPAGE"."SR_FILESCONTENT";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_FILESCONTENT" FOR INDEXES ALL;

----------------------------------------
--  SR_MIGTASKDEFINFO
----------------------------------------

CREATE TABLE HOMEPAGE.SR_MIGTASKDEFINFO (
	MIGTASKDEFINFO_ID VARCHAR(36) CCSID 1208 NOT NULL,
	NUM_TASKS_MIG INTEGER NOT NULL DEFAULT 1  
)
;

ALTER TABLE HOMEPAGE.SR_MIGTASKDEFINFO
	ADD CONSTRAINT "HOMEPAGE"."PK_MIGTASKDEF_ID" PRIMARY KEY("MIGTASKDEFINFO_ID");

--RUNSTATS ON TABLE "HOMEPAGE"."SR_MIGTASKDEFINFO";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_MIGTASKDEFINFO" FOR INDEXES ALL;


----------------------------------------
--  SR_INDEX_MANAGEMENT
----------------------------------------

CREATE TABLE HOMEPAGE.SR_INDEX_MANAGEMENT (
	NODE_ID VARCHAR(256) CCSID 1208 NOT NULL,
	LAST_CRAWLING_VERSION BIGINT NOT NULL,
	OUT_OF_DATE SMALLINT NOT NULL DEFAULT 0,
	OUT_OF_SYNC SMALLINT NOT NULL DEFAULT 0,
	INDEXER SMALLINT NOT NULL DEFAULT 1
)
;


ALTER TABLE HOMEPAGE.SR_INDEX_MANAGEMENT
	ADD CONSTRAINT "HOMEPAGE"."PK_INDEX_MGMT_ID" PRIMARY KEY ("NODE_ID");

--RUNSTATS ON TABLE "HOMEPAGE"."SR_INDEX_MANAGEMENT";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_INDEX_MANAGEMENT" FOR INDEXES ALL;

----------------------------------------
--  SR_RESUME_TOKENS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_RESUME_TOKENS (
	TOKEN_ID VARCHAR(36) CCSID 1208 NOT NULL,
	NODE_ID VARCHAR(256) CCSID 1208 NOT NULL,
	TOKEN VARCHAR(256) CCSID 1208,
	SERVICE VARCHAR(36) CCSID 1208 NOT NULL
)
;

	
ALTER TABLE HOMEPAGE.SR_RESUME_TOKENS
	ADD CONSTRAINT "HOMEPAGE"."PK_TOKEN_ID" PRIMARY KEY ("TOKEN_ID");
	
ALTER TABLE HOMEPAGE.SR_RESUME_TOKENS
	ADD CONSTRAINT "HOMEPAGE"."FK_RT_IDX_MGMT_ID" FOREIGN KEY ("NODE_ID")
	REFERENCES HOMEPAGE.SR_INDEX_MANAGEMENT("NODE_ID") ON DELETE CASCADE;

--RUNSTATS ON TABLE "HOMEPAGE"."SR_RESUME_TOKENS";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_RESUME_TOKENS" FOR INDEXES ALL;
	

----------------------------------------
--  SR_INDEX_DOCS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_INDEX_DOCS(
	DOCUMENT_ID VARCHAR(36) CCSID 1208 NOT NULL,
	DOCUMENT BLOB NOT NULL,
	CRAWLING_VERSION BIGINT NOT NULL,
	ACTION SMALLINT NOT NULL,
	UPDATE_TIME  TIMESTAMP NOT NULL,
	RESUME_POINT VARCHAR(256) CCSID 1208,
	SERVICE VARCHAR(36) CCSID 1208 NOT NULL,
	FILES_REF_ID VARCHAR(36) CCSID 1208,
	ATOM_ID  VARCHAR(256) CCSID 1208
)
;


ALTER TABLE HOMEPAGE.SR_INDEX_DOCS
	ADD CONSTRAINT "HOMEPAGE"."PK_INDEX_DOCS_ID" PRIMARY KEY ("DOCUMENT_ID");

	
CREATE INDEX HOMEPAGE.SR_INDEX_CRAWL_VERSION_IDX
	ON HOMEPAGE.SR_INDEX_DOCS (CRAWLING_VERSION);

CREATE INDEX HOMEPAGE.SR_INDEX_DOCS_RPS_IDX  
	ON HOMEPAGE.SR_INDEX_DOCS (RESUME_POINT,SERVICE);
	
CREATE INDEX HOMEPAGE.SR_INDEX_DOCS_ACT_IDX
	ON HOMEPAGE.SR_INDEX_DOCS(ACTION);
	
CREATE INDEX HOMEPAGE.SR_INDEX_DOCS_ACS_IDX
	ON HOMEPAGE.SR_INDEX_DOCS(SERVICE,ATOM_ID,CRAWLING_VERSION);	
	
CREATE INDEX HOMEPAGE.SR_INDEX_DOCS_FRID_IDX 
	ON  HOMEPAGE.SR_INDEX_DOCS (FILES_REF_ID ASC, SERVICE ASC, UPDATE_TIME DESC);
	
--40269: PERF, homepage db,  this read sql needs index on sr_index_docs
CREATE INDEX HOMEPAGE.SR_INDEX_DOCS_LLT4_IDX ON HOMEPAGE.SR_INDEX_DOCS (UPDATE_TIME ASC,ACTION DESC ,CRAWLING_VERSION,SERVICE);

-- Defect 77766: Search slow query
CREATE INDEX HOMEPAGE.SR_INDEX_DOCS_SUID_IDX ON  HOMEPAGE.SR_INDEX_DOCS (SERVICE,UPDATE_TIME);

-- SmartCloud Defect 96370
CREATE INDEX HOMEPAGE.SR_INDEX_DOCS_TAW_IDX ON  HOMEPAGE.SR_INDEX_DOCS (UPDATE_TIME ASC,DOCUMENT_ID ASC,CRAWLING_VERSION ASC);

CREATE INDEX HOMEPAGE.SR_INDEX_DOCS_SUDCRA_IDX
	ON HOMEPAGE.SR_INDEX_DOCS (SERVICE ASC, UPDATE_TIME ASC, DOCUMENT_ID ASC, CRAWLING_VERSION ASC, RESUME_POINT ASC, ACTION ASC);
	
ALTER TABLE HOMEPAGE.SR_INDEX_DOCS 
	ADD CONSTRAINT "HOMEPAGE"."ID_ACT_CHECK"
	CHECK (ACTION >=0 AND ACTION < 4);		
	
ALTER TABLE HOMEPAGE.SR_INDEX_DOCS 
	ADD CONSTRAINT "HOMEPAGE"."IGNORE_ACT_CHECK"
	CHECK (ACTION <> 3 OR RESUME_POINT IS NULL);

--RUNSTATS ON TABLE "HOMEPAGE"."SR_INDEX_DOCS";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_INDEX_DOCS" FOR INDEXES ALL;


----------------------------------------
--  SR_FEEDBACK
----------------------------------------

CREATE TABLE HOMEPAGE.SR_FEEDBACK (
	ID VARCHAR(36) CCSID 1208 NOT NULL,
	PERSON_ID  VARCHAR(36) CCSID 1208 NOT NULL,
	CLIENT_ID VARCHAR(256) CCSID 1208 NOT NULL,
	ACTION VARCHAR(256) CCSID 1208 NOT NULL,
	FEEDBACK_TIME	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	ITEM_ID  VARCHAR(256) CCSID 1208 NOT NULL 
)
;

ALTER TABLE HOMEPAGE.SR_FEEDBACK
	ADD CONSTRAINT "HOMEPAGE"."PK_FEEDBACK_ID" PRIMARY KEY ("ID");	
	
ALTER TABLE HOMEPAGE.SR_FEEDBACK
	ADD CONSTRAINT "HOMEPAGE"."FK_SRFB_PERSON_ID" FOREIGN KEY ("PERSON_ID")
	REFERENCES HOMEPAGE.PERSON("PERSON_ID");
	
CREATE INDEX HOMEPAGE.SR_FEEDBACK_CLIENT_IDX
		ON HOMEPAGE.SR_FEEDBACK (CLIENT_ID);
		
CREATE INDEX HOMEPAGE.SR_FEEDBACK_PERSON_ID_IDX 
		ON HOMEPAGE.SR_FEEDBACK (PERSON_ID);

--RUNSTATS ON TABLE "HOMEPAGE"."SR_FEEDBACK";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_FEEDBACK" FOR INDEXES ALL;

----------------------------------------
--  SR_FEEDBACK_CONTEXT
----------------------------------------

CREATE TABLE HOMEPAGE.SR_FEEDBACK_CONTEXT (
	CONTEXT_ID VARCHAR(36) CCSID 1208 NOT NULL,
	ID VARCHAR(36) CCSID 1208 NOT NULL,
	TYPE  VARCHAR(256) CCSID 1208 NOT NULL,
	TYPE_VALUE VARCHAR(256) CCSID 1208 NOT NULL,
	WEIGHT VARCHAR(256) CCSID 1208 NOT NULL
)
;


ALTER TABLE HOMEPAGE.SR_FEEDBACK_CONTEXT
	ADD CONSTRAINT "HOMEPAGE"."PK_FBK_CTXT_ID" PRIMARY KEY ("CONTEXT_ID");	

ALTER TABLE HOMEPAGE.SR_FEEDBACK_CONTEXT
	ADD CONSTRAINT "HOMEPAGE"."FK_FBK_CTXT_ID" FOREIGN KEY ("ID")
	REFERENCES HOMEPAGE.SR_FEEDBACK("ID") ON DELETE CASCADE;

--RUNSTATS ON TABLE "HOMEPAGE"."SR_FEEDBACK_CONTEXT";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_FEEDBACK_CONTEXT" FOR INDEXES ALL;

----------------------------------------
--  SR_FEEDBACK_PARAMETERS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_FEEDBACK_PARAMETERS (
	PARAMETERS_ID VARCHAR(36) CCSID 1208 NOT NULL,
	ID VARCHAR(36) CCSID 1208 NOT NULL,
	PARAM  VARCHAR(256) CCSID 1208 NOT NULL,
	PARAM_VALUE VARCHAR(256) CCSID 1208 NOT NULL
)
;
	
ALTER TABLE HOMEPAGE.SR_FEEDBACK_PARAMETERS
	ADD CONSTRAINT "HOMEPAGE"."PK_FBK_PARAMS_ID" PRIMARY KEY ("PARAMETERS_ID");
	
ALTER TABLE HOMEPAGE.SR_FEEDBACK_PARAMETERS
	ADD CONSTRAINT "HOMEPAGE"."FK_FBK_PARAMS_ID" FOREIGN KEY ("ID")
	REFERENCES HOMEPAGE.SR_FEEDBACK("ID") ON DELETE CASCADE;

--RUNSTATS ON TABLE "HOMEPAGE"."SR_FEEDBACK_PARAMETERS";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_FEEDBACK_PARAMETERS" FOR INDEXES ALL;

----------------------------------------
--  SR_STATS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_STATS(
	STAT_ID		VARCHAR(36) CCSID 1208 NOT NULL,
	STAT_KEY 	VARCHAR(256) CCSID 1208 NOT NULL,
	STAT_TYPE	SMALLINT NOT NULL,
	UPDATED		TIMESTAMP NOT NULL
)
;

ALTER TABLE HOMEPAGE.SR_STATS
	ADD CONSTRAINT "HOMEPAGE"."PK_SR_STAT_ID" PRIMARY KEY ("STAT_ID");

ALTER TABLE HOMEPAGE.SR_STATS
	ADD CONSTRAINT "HOMEPAGE"."UNIQUE_STAT_KEY" UNIQUE ("STAT_KEY");


--RUNSTATS ON TABLE "HOMEPAGE"."SR_STATS";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_STATS" FOR INDEXES ALL;


----------------------------------------
--  SR_STRING_STATS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_STRING_STATS(
	STRING_STAT_ID		VARCHAR(36) CCSID 1208 NOT NULL,
	STAT_ID				VARCHAR(36) CCSID 1208 NOT NULL,
	STAT_VALUE			VARCHAR(256) CCSID 1208  NOT NULL
)
;

ALTER TABLE HOMEPAGE.SR_STRING_STATS
	ADD CONSTRAINT "HOMEPAGE"."PK_STR_STAT_ID" PRIMARY KEY ("STRING_STAT_ID");

ALTER TABLE HOMEPAGE.SR_STRING_STATS
	ADD CONSTRAINT "HOMEPAGE"."FK_STR_STAT_ID" FOREIGN KEY ("STAT_ID")
	REFERENCES HOMEPAGE.SR_STATS("STAT_ID");

CREATE INDEX HOMEPAGE.SR_STRING_STAT_IDX ON HOMEPAGE.SR_STRING_STATS(STAT_ID);
	
--RUNSTATS ON TABLE "HOMEPAGE"."SR_STRING_STATS";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_STRING_STATS" FOR INDEXES ALL;

----------------------------------------
--  SR_NUMBER_STATS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_NUMBER_STATS(
	NUMBER_STAT_ID		VARCHAR(36) CCSID 1208 NOT NULL,
	STAT_ID				VARCHAR(36) CCSID 1208 NOT NULL,
	STAT_VALUE			BIGINT NOT NULL
)
;

ALTER TABLE HOMEPAGE.SR_NUMBER_STATS
	ADD CONSTRAINT "HOMEPAGE"."PK_NUM_STAT_ID" PRIMARY KEY ("NUMBER_STAT_ID");


ALTER TABLE HOMEPAGE.SR_NUMBER_STATS
	ADD CONSTRAINT "HOMEPAGE"."FK_NUM_STAT_ID" FOREIGN KEY ("STAT_ID")
	REFERENCES HOMEPAGE.SR_STATS("STAT_ID");

CREATE INDEX HOMEPAGE.SR_NUMBER_STAT_IDX ON HOMEPAGE.SR_NUMBER_STATS(STAT_ID);
	
--RUNSTATS ON TABLE "HOMEPAGE"."SR_NUMBER_STATS";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_NUMBER_STATS" FOR INDEXES ALL;
	

----------------------------------------
--  SR_TIMER_STATS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_TIMER_STATS(
	TIMER_STAT_ID		VARCHAR(36) CCSID 1208 NOT NULL,
	STAT_ID				VARCHAR(36) CCSID 1208 NOT NULL,
	AVERAGE				BIGINT NOT NULL,
	MINIMUM				BIGINT NOT NULL,
	MAXIMUM				BIGINT NOT NULL,
	COUNTER				INTEGER	NOT NULL
)
;

ALTER TABLE HOMEPAGE.SR_TIMER_STATS
	ADD CONSTRAINT "HOMEPAGE"."PK_TMR_STAT_ID" PRIMARY KEY ("TIMER_STAT_ID");	
	
ALTER TABLE HOMEPAGE.SR_TIMER_STATS
	ADD CONSTRAINT "HOMEPAGE"."FK_TMR_STAT_ID" FOREIGN KEY ("STAT_ID")
	REFERENCES HOMEPAGE.SR_STATS("STAT_ID");

CREATE INDEX HOMEPAGE.SR_TIMER_STAT_IDX ON HOMEPAGE.SR_TIMER_STATS(STAT_ID);
	
--RUNSTATS ON TABLE "HOMEPAGE"."SR_TIMER_STATS";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_TIMER_STATS" FOR INDEXES ALL;

--START 38374: DAO Layer Changes for Dynamic Global Properties for SAND 

----------------------------------------
--  SR_GLOBAL_SAND_PROPS
----------------------------------------

CREATE TABLE HOMEPAGE.SR_GLOBAL_SAND_PROPS(
	GSP_ID			VARCHAR(36) CCSID 1208 NOT NULL,
	GSP_NAME		VARCHAR(36) CCSID 1208 NOT NULL,
	GSP_VALUE		VARCHAR(36) CCSID 1208 NOT NULL,
	GSP_TYPE        SMALLINT NOT NULL
) ;

ALTER TABLE HOMEPAGE.SR_GLOBAL_SAND_PROPS
	ADD CONSTRAINT "HOMEPAGE"."PK_GSP_ID" PRIMARY KEY ("GSP_ID");

ALTER TABLE HOMEPAGE.SR_GLOBAL_SAND_PROPS
    ADD CONSTRAINT "HOMEPAGE".UNIQUE_GSP_NAME UNIQUE ("GSP_NAME");
		
ALTER TABLE HOMEPAGE.SR_GLOBAL_SAND_PROPS		
	ADD CONSTRAINT "HOMEPAGE"."GSP_TYPE_CHECK"
	CHECK (GSP_TYPE >=0 AND GSP_TYPE < 4);

GRANT DELETE,INSERT,SELECT,UPDATE ON HOMEPAGE.SR_GLOBAL_SAND_PROPS TO LCUSER;


--reorg table HOMEPAGE.SR_GLOBAL_SAND_PROPS use TEMPSPACE1;
--reorg indexes all for table HOMEPAGE.SR_GLOBAL_SAND_PROPS;

--RUNSTATS ON TABLE "HOMEPAGE"."SR_RESUME_TOKENS";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_RESUME_TOKENS" FOR INDEXES ALL;
	
--END 38374: DAO Layer Changes for Dynamic Global Properties for SAND 

-- add at LC4.5 - begin
--START 74517: Create script that creates DB table that hold document type labels

----------------------------------------
--  SR_ECM_DOCUMENT_TYPE_LABELS 
----------------------------------------

CREATE TABLE HOMEPAGE.SR_ECM_DOCUMENT_TYPE_LABELS(
    LABEL_ID VARCHAR(36) CCSID 1208 NOT NULL,
    LABEL_NAME VARCHAR(256) CCSID 1208 NOT NULL,
    DOCUMENT_TYPES CLOB CCSID 1208 NOT NULL,
    UPDATE_TIME  TIMESTAMP NOT NULL
);

ALTER TABLE HOMEPAGE.SR_ECM_DOCUMENT_TYPE_LABELS
         ADD CONSTRAINT "HOMEPAGE"."PK_LABEL_ID" PRIMARY KEY ("LABEL_ID");

ALTER TABLE HOMEPAGE.SR_ECM_DOCUMENT_TYPE_LABELS
        ADD CONSTRAINT "HOMEPAGE".UNIQUE_LABEL_NAME UNIQUE ("LABEL_NAME");


--RUNSTATS ON TABLE "HOMEPAGE"."SR_ECM_DOCUMENT_TYPE_LABELS";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_ECM_DOCUMENT_TYPE_LABELS" FOR INDEXES ALL;

--END 74517: Create script that creates DB table that hold document type labels


--START Task 78083 Prepare DB table for storing post filtering service.

----------------------------------------
--  SR_POST_FILTERING_SERVICE
----------------------------------------

CREATE TABLE HOMEPAGE.SR_POST_FILTERING_SERVICE(
    PFS_ID VARCHAR(36) CCSID 1208 NOT NULL,
    SERVICE_NAME VARCHAR(36) CCSID 1208 NOT NULL,
    URL VARCHAR(2048) CCSID 1208 NOT NULL
);

ALTER TABLE HOMEPAGE.SR_POST_FILTERING_SERVICE
         ADD CONSTRAINT "HOMEPAGE"."PK_PFS_ID" PRIMARY KEY ("PFS_ID");

ALTER TABLE HOMEPAGE.SR_POST_FILTERING_SERVICE
   ADD CONSTRAINT "HOMEPAGE".UNIQUE_SERVICE_NAME UNIQUE ("SERVICE_NAME");

--RUNSTATS ON TABLE "HOMEPAGE"."SR_POST_FILTERING_SERVICE";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_POST_FILTERING_SERVICE" FOR INDEXES ALL;


--END Task 78083 Prepare DB table for storing post filtering service.


----------------------------------------
--  SR_ECM_DOCUMENT_TYPE_PROPS
----------------------------------------


--START 77488 Create DB tables and scripts for ecm properties
   
CREATE TABLE HOMEPAGE.SR_ECM_DOCUMENT_TYPE_PROPS(
    PROPERTIES_ID VARCHAR(36) CCSID 1208 NOT NULL,
    DOCUMENT_TYPE_ID VARCHAR(256) CCSID 1208 NOT NULL,
    LOCALE VARCHAR(10) CCSID 1208 NOT NULL,
    PROPERTIES CLOB CCSID 1208 NOT NULL
);

ALTER TABLE HOMEPAGE.SR_ECM_DOCUMENT_TYPE_PROPS
         ADD CONSTRAINT "HOMEPAGE"."PK_PROPERTIES_ID" PRIMARY KEY ("PROPERTIES_ID");


--RUNSTATS ON TABLE "HOMEPAGE"."SR_ECM_DOCUMENT_TYPE_PROPS";
--RUNSTATS ON TABLE "HOMEPAGE"."SR_ECM_DOCUMENT_TYPE_PROPS" FOR INDEXES ALL;

--END Task 77488 Create DB tables and scripts for ecm properties

-- add at LC4.5 - end

-------------------------------------------------------------------
-- LOTUSCONNECTIONSTASK
-------------------------------------------------------------------

CREATE TABLE HOMEPAGE.LOTUSCONNECTIONSTASK ("TASKID" BIGINT NOT NULL ,
              "VERSION" VARCHAR(5) CCSID 1208 NOT NULL ,
              "ROW_VERSION" INTEGER NOT NULL ,
              "TASKTYPE" INTEGER NOT NULL ,
              "TASKSUSPENDED" SMALLINT NOT NULL ,
              "CANCELLED" SMALLINT NOT NULL ,
              "NEXTFIRETIME" BIGINT NOT NULL ,
              "STARTBYINTERVAL" VARCHAR(254) CCSID 1208 ,
              "STARTBYTIME" BIGINT ,
              "VALIDFROMTIME" BIGINT ,
              "VALIDTOTIME" BIGINT ,
              "REPEATINTERVAL" VARCHAR(254) CCSID 1208 ,
              "MAXREPEATS" INTEGER NOT NULL ,
              "REPEATSLEFT" INTEGER NOT NULL ,
              "TASKINFO" BLOB(102400) ,
              "NAME" VARCHAR(254) CCSID 1208 NOT NULL ,
              "AUTOPURGE" INTEGER NOT NULL ,
              "FAILUREACTION" INTEGER ,
              "MAXATTEMPTS" INTEGER ,
              "QOS" INTEGER ,
              "PARTITIONID" INTEGER ,
              "OWNERTOKEN" VARCHAR(200) CCSID 1208 NOT NULL ,
              "CREATETIME" BIGINT NOT NULL )  ;

ALTER TABLE HOMEPAGE.LOTUSCONNECTIONSTASK ADD PRIMARY KEY ("TASKID");

CREATE INDEX HOMEPAGE.LOTUSCONNECTIONSTASK_IDX1 ON HOMEPAGE.LOTUSCONNECTIONSTASK ("TASKID",
              "OWNERTOKEN") ;

CREATE INDEX HOMEPAGE.LOTUSCONNECTIONSTASK_IDX2 ON HOMEPAGE.LOTUSCONNECTIONSTASK ("NEXTFIRETIME" ASC,
               "REPEATSLEFT",
               "PARTITIONID");
               

--40252: SPR#WDWU8AAA3P :   earch nodes will insert dup scheduler task when scheduler table is empty       
ALTER TABLE HOMEPAGE.LOTUSCONNECTIONSTASK  	ADD CONSTRAINT "HOMEPAGE".UNIQUE_LCT_NAME UNIQUE ("NAME");

-------------------------------------------------------------------
-- LOTUSCONNECTIONSTREG
-------------------------------------------------------------------

CREATE TABLE HOMEPAGE.LOTUSCONNECTIONSTREG ("REGKEY" VARCHAR(254) CCSID 1208 NOT NULL ,
              "REGVALUE" VARCHAR(254) CCSID 1208 ) ;

-------------------------------------------------------------------
-- LOTUSCONNECTIONSLMGR
-------------------------------------------------------------------


ALTER TABLE HOMEPAGE.LOTUSCONNECTIONSTREG ADD PRIMARY KEY ("REGKEY");

CREATE TABLE HOMEPAGE.LOTUSCONNECTIONSLMGR (LEASENAME VARCHAR(254) CCSID 1208 NOT NULL,
               LEASEOWNER VARCHAR(254) CCSID 1208 NOT NULL,
               LEASE_EXPIRE_TIME  BIGINT,
              DISABLED VARCHAR(5) CCSID 1208);

ALTER TABLE HOMEPAGE.LOTUSCONNECTIONSLMGR ADD PRIMARY KEY ("LEASENAME");

-------------------------------------------------------------------
-- LOTUSCONNECTIONSLMPR
-------------------------------------------------------------------

CREATE TABLE HOMEPAGE.LOTUSCONNECTIONSLMPR (LEASENAME VARCHAR(254) CCSID 1208 NOT NULL,
              NAME VARCHAR(254) CCSID 1208 NOT NULL,
              VALUE VARCHAR(254) CCSID 1208 NOT NULL);

CREATE INDEX HOMEPAGE.LOTUSCONNECTIONSLMPR_IDX1 ON HOMEPAGE.LOTUSCONNECTIONSLMPR (LEASENAME,
               NAME);


CREATE TABLE HOMEPAGE.SR_RECOMMEND_CACHE_USERPROFILE (
	RECOMMEND_CACHE_USERPROFILE_ID VARCHAR(36) CCSID 1208 NOT NULL,	
	PERSON_ID VARCHAR(36) CCSID 1208 NOT NULL,
	CACHED_VALUE_IN_JSON VARCHAR(3000) CCSID 1208 DEFAULT 'none' NOT NULL,
	UPDATE_DATE TIMESTAMP NOT NULL
);

ALTER TABLE HOMEPAGE.SR_RECOMMEND_CACHE_USERPROFILE
	ADD CONSTRAINT HOMEPAGE.PK_RCUP_ID PRIMARY KEY (RECOMMEND_CACHE_USERPROFILE_ID);

ALTER TABLE HOMEPAGE.SR_RECOMMEND_CACHE_USERPROFILE
	ADD CONSTRAINT HOMEPAGE.FK_RCUP_PERSON_ID FOREIGN KEY (PERSON_ID) REFERENCES HOMEPAGE.PERSON (PERSON_ID);

CREATE UNIQUE INDEX HOMEPAGE.SR_UNIQUE_RCUP_PERSON_ID  
	ON HOMEPAGE.SR_RECOMMEND_CACHE_USERPROFILE (PERSON_ID);
	
CREATE UNIQUE INDEX HOMEPAGE.SR_UNIQUE_RCUP_PERSON_ID_UDATE  
	ON HOMEPAGE.SR_RECOMMEND_CACHE_USERPROFILE (PERSON_ID, UPDATE_DATE DESC);	
	
--RUNSTATS ON TABLE HOMEPAGE.SR_RECOMMEND_CACHE_USERPROFILE;


---------------------------------------------------------
-- SR_FILECONTENTINDEXINGTASK
---------------------------------------------------------

CREATE TABLE HOMEPAGE.SR_FILECONTENTINDEXINGTASK (
	FILE_CONTENT_INDEXING_TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,
	TASK_ID VARCHAR(36) CCSID 1208 NOT NULL,
	FILE_CONT_INDX_TASK_SERVICES VARCHAR(256) CCSID 1208 NOT NULL,
	FILE_CONT_INDX_TASK_DURATION BIGINT NOT NULL
);

ALTER TABLE HOMEPAGE.SR_FILECONTENTINDEXINGTASK
	ADD CONSTRAINT "HOMEPAGE"."PK_FCI_TASK_ID" PRIMARY KEY ("FILE_CONTENT_INDEXING_TASK_ID");

CREATE UNIQUE INDEX HOMEPAGE.TASK_ID_UN_IDX
    ON HOMEPAGE.SR_FILECONTENTINDEXINGTASK("TASK_ID");

ALTER TABLE HOMEPAGE.SR_FILECONTENTINDEXINGTASK
	ADD CONSTRAINT "HOMEPAGE"."FK_FCI_TASK_ID" FOREIGN KEY ("TASK_ID") 
	REFERENCES  HOMEPAGE.SR_TASKDEF("TASK_ID");

DROP VIEW HOMEPAGE.SR_ALLTASKSDEF;

CREATE VIEW HOMEPAGE.SR_ALLTASKSDEF AS
(
	SELECT 	T1.TASK_ID  		AS	PARENT_TASK_ID,
	T1.TASK_NAME 				AS	PARENT_TASK_NAME,
	T1.INTERVAL 				AS	PARENT_TASK_INTERVAL,
	T1.STARTBY	 				AS	PARENT_TASK_STARTBY,
	T1.TASK_TYPE 				AS	PARENT_TASK_TYPE,
	T1.ENABLED					AS  PARENT_TASK_ENABLED,
	T2.INDEXING_TASK_SERVICES	AS	INDEXING_TASK_SERVICES,
	T2.INDEXING_TASK_OPTIMIZE	AS	INDEXING_TASK_OPTIMIZE,
	T2.INDEXING_TASK_ID			AS	INDEXING_TASK_ID,
	''							AS	OPTIMIZE_TASK_ID,
	'' 							AS 	FILECONTENT_TASK_ID,
	''							AS	FILE_CONTENT_TASK_SERVICES,
	0							AS 	CONTENT_FAILURES_ONLY,
        ''                  	AS  SAND_TASK_ID,
	''							AS	SAND_TASK_SERVICES,
	'' 							AS 	BACKUP_TASK_ID,
	''							AS	BACKUP_TASK_TYPE,
	''							AS	BACKUP_TASK_SCRIPT,
	''							AS	FILE_CONTENT_INDEXING_TASK_ID,
	''							AS	FILE_CONT_INDX_TASK_SERVICES,
	0							AS	FILE_CONT_INDX_TASK_DURATION,
	T2.INDEXING_TASK_ID			AS	CHILDTASK_PK	
	FROM    HOMEPAGE.SR_TASKDEF T1,HOMEPAGE.SR_INDEXINGTASKDEF T2 
	WHERE T1.TASK_ID=T2.TASK_ID
) 
UNION 
(
	SELECT T3.TASK_ID		AS 	PARENT_TASK_ID,
	T3.TASK_NAME 			AS 	PARENT_TASK_NAME,
	T3.INTERVAL				AS 	PARENT_TASK_INTERVAL,
	T3.STARTBY 				AS	PARENT_TASK_STARTBY,
	T3.TASK_TYPE 			AS 	PARENT_TASK_TYPE,
 	T3.ENABLED 				AS 	PARENT_TASK_ENABLED,
	''						AS 	INDEXING_TASK_SERVICES,
	0						AS	INDEXING_TASK_OPTIMIZE,
	''						AS	INDEXING_TASK_ID,
	T4.OPTIMIZE_TASK_ID 	AS	OPTIMIZE_TASK_ID,
	'' 						AS 	FILECONTENT_TASK_ID,
	''						AS	FILE_CONTENT_TASK_SERVICES,
	0						AS	CONTENT_FAILURES_ONLY,
        ''                 	AS  SAND_TASK_ID,
	''                      AS  SAND_TASK_SERVICES,
	'' 						AS 	BACKUP_TASK_ID,
	''						AS	BACKUP_TASK_TYPE,
	''						AS	BACKUP_TASK_SCRIPT,
	''						AS	FILE_CONTENT_INDEXING_TASK_ID,
	''						AS	FILE_CONT_INDX_TASK_SERVICES,
	0						AS	FILE_CONT_INDX_TASK_DURATION,
	T4.OPTIMIZE_TASK_ID		AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T3,HOMEPAGE.SR_OPTIMIZETASKDEF T4
	WHERE  T3.TASK_ID=T4.TASK_ID
)
UNION 
(
	SELECT T5.TASK_ID				AS	PARENT_TASK_ID,
	T5.TASK_NAME 					AS	PARENT_TASK_NAME,
	T5.INTERVAL						AS	PARENT_TASK_INTERVAL,
	T5.STARTBY 						AS	PARENT_TASK_STARTBY,
	T5.TASK_TYPE 					AS	PARENT_TASK_TYPE,
 	T5.ENABLED 						AS	PARENT_TASK_ENABLED,
	''								AS	INDEXING_TASK_SERVICES,
	0								AS	INDEXING_TASK_OPTIMIZE,
	''								AS	INDEXING_TASK_ID,
	''								AS	OPTIMIZE_TASK_ID,
	T6.FILECONTENT_TASK_ID 			AS	FILECONTENT_TASK_ID,
	T6.FILE_CONTENT_TASK_SERVICES	AS	FILE_CONTENT_TASK_SERVICES,
	T6.CONTENT_FAILURES_ONLY		AS	CONTENT_FAILURES_ONLY,
        ''                  		AS  SAND_TASK_ID,
	''                      		AS  SAND_TASK_SERVICES,
	'' 								AS  BACKUP_TASK_ID,
	''								AS	BACKUP_TASK_TYPE,
	''								AS	BACKUP_TASK_SCRIPT,
	''								AS	FILE_CONTENT_INDEXING_TASK_ID,
	''								AS	FILE_CONT_INDX_TASK_SERVICES,
	0								AS	FILE_CONT_INDX_TASK_DURATION,
	T6.FILECONTENT_TASK_ID			AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T5,HOMEPAGE.SR_FILECONTENTTASKDEF T6
	WHERE  T5.TASK_ID=T6.TASK_ID
)
UNION 
(
	SELECT T7.TASK_ID		AS 	PARENT_TASK_ID,
	T7.TASK_NAME 			AS 	PARENT_TASK_NAME,
	T7.INTERVAL				AS 	PARENT_TASK_INTERVAL,
	T7.STARTBY 				AS	PARENT_TASK_STARTBY,
	T7.TASK_TYPE 			AS 	PARENT_TASK_TYPE,
 	T7.ENABLED 				AS	PARENT_TASK_ENABLED,
	''						AS 	INDEXING_TASK_SERVICES,
	0						AS	INDEXING_TASK_OPTIMIZE,
	''						AS	INDEXING_TASK_ID,
	''						AS	OPTIMIZE_TASK_ID,
	''		 				AS 	FILECONTENT_TASK_ID,
	''						AS	FILE_CONTENT_TASK_SERVICES,
	0						AS	CONTENT_FAILURES_ONLY,
	''                  	AS  SAND_TASK_ID,
	''                      AS  SAND_TASK_SERVICES,
	T8.BACKUP_TASK_ID		AS 	BACKUP_TASK_ID,
	T8.TYPE					AS	BACKUP_TASK_TYPE,
	T8.SCRIPT				AS	BACKUP_TASK_SCRIPT,
	''						AS	FILE_CONTENT_INDEXING_TASK_ID,
	''						AS	FILE_CONT_INDX_TASK_SERVICES,
	0						AS	FILE_CONT_INDX_TASK_DURATION,
	T8.BACKUP_TASK_ID		AS	CHILDTASK_PK
	FROM   HOMEPAGE.SR_TASKDEF T7,HOMEPAGE.SR_BACKUPTASKDEF T8
	WHERE  T7.TASK_ID=T8.TASK_ID
)
UNION
(
        SELECT T9.TASK_ID              AS   PARENT_TASK_ID,
        T9.TASK_NAME                   AS   PARENT_TASK_NAME,
        T9.INTERVAL                    AS   PARENT_TASK_INTERVAL,
        T9.STARTBY                     AS   PARENT_TASK_STARTBY,
        T9.TASK_TYPE                   AS   PARENT_TASK_TYPE,
        T9.ENABLED                     AS   PARENT_TASK_ENABLED,
        ''                             AS   INDEXING_TASK_SERVICES,
        0                              AS   INDEXING_TASK_OPTIMIZE,
        ''                             AS   INDEXING_TASK_ID,
        ''                             AS   OPTIMIZE_TASK_ID,
        ''                             AS   FILECONTENT_TASK_ID,
        ''                             AS   FILE_CONTENT_TASK_SERVICES,
        0                              AS   CONTENT_FAILURES_ONLY,
        T10.SAND_TASK_ID               AS   SAND_TASK_ID,
	T10.SAND_TASK_SERVICES		   AS	SAND_TASK_SERVICES,
        ''                             AS   BACKUP_TASK_ID,
        ''                             AS   BACKUP_TASK_TYPE,
        ''                             AS   BACKUP_TASK_SCRIPT,
        ''							   AS	FILE_CONTENT_INDEXING_TASK_ID,
	''							       AS	FILE_CONT_INDX_TASK_SERVICES,
	0							       AS	FILE_CONT_INDX_TASK_DURATION,
        T10.SAND_TASK_ID               AS   CHILDTASK_PK
        FROM   HOMEPAGE.SR_TASKDEF T9,HOMEPAGE.SR_SANDTASKDEF T10
        WHERE  T9.TASK_ID=T10.TASK_ID
)
UNION
(
        SELECT T11.TASK_ID              		AS	PARENT_TASK_ID,
        T11.TASK_NAME                   		AS	PARENT_TASK_NAME,
        T11.INTERVAL                    		AS	PARENT_TASK_INTERVAL,
        T11.STARTBY                     		AS	PARENT_TASK_STARTBY,
        T11.TASK_TYPE                   		AS	PARENT_TASK_TYPE,
        T11.ENABLED                    			AS	PARENT_TASK_ENABLED,
        ''                             			AS	INDEXING_TASK_SERVICES,
        0                              			AS	INDEXING_TASK_OPTIMIZE,
        ''                             			AS	INDEXING_TASK_ID,
        ''                             			AS	OPTIMIZE_TASK_ID,
        ''                             			AS	FILECONTENT_TASK_ID,
        ''                             			AS	FILE_CONTENT_TASK_SERVICES,
        0                              			AS	CONTENT_FAILURES_ONLY,
        ''       				       	AS  	SAND_TASK_ID,
	''						AS	SAND_TASK_SERVICES,
        ''                             			AS  	BACKUP_TASK_ID,
        ''                             			AS  	BACKUP_TASK_TYPE,
        ''                             			AS  	BACKUP_TASK_SCRIPT,
        T12.FILE_CONTENT_INDEXING_TASK_ID		AS	FILE_CONTENT_INDEXING_TASK_ID,
	T12.FILE_CONT_INDX_TASK_SERVICES			AS	FILE_CONT_INDX_TASK_SERVICES,
	T12.FILE_CONT_INDX_TASK_DURATION			AS	FILE_CONT_INDX_TASK_DURATION,
        T12.FILE_CONTENT_INDEXING_TASK_ID		AS	CHILDTASK_PK
        FROM   HOMEPAGE.SR_TASKDEF T11,HOMEPAGE.SR_FILECONTENTINDEXINGTASK T12
        WHERE  T11.TASK_ID=T12.TASK_ID
);
        
               
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
-- END THE DEFINITION FOR THE SEARCH DATABASE
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
